[0.000000] (-) TimerEvent: {}
[0.000207] (articubot_one) JobQueued: {'identifier': 'articubot_one', 'dependencies': OrderedDict({'articubot_one': '/home/jonatan/ros2_ws/install/articubot_one'})}
[0.001169] (articubot_one) JobStarted: {'identifier': 'articubot_one'}
[0.031701] (articubot_one) Command: {'cmd': ['/usr/bin/ctest', '-C', 'Release', '-D', 'ExperimentalTest', '--no-compress-output', '-V', '--force-new-ctest-process'], 'cwd': '/home/jonatan/ros2_ws/build/articubot_one', 'env': OrderedDict({'GJS_DEBUG_TOPICS': 'JS ERROR;JS LOG', 'XDG_ACTIVATION_TOKEN': '2ddf9c17-5cf4-48ad-bc40-f39f8ecbfeb7', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'jonatan', 'GZ_CONFIG_PATH': '/opt/ros/jazzy/opt/gz_sim_vendor/share/gz:/opt/ros/jazzy/opt/sdformat_vendor/share/gz:/opt/ros/jazzy/opt/gz_gui_vendor/share/gz:/opt/ros/jazzy/opt/gz_transport_vendor/share/gz:/opt/ros/jazzy/opt/gz_rendering_vendor/share/gz:/opt/ros/jazzy/opt/gz_plugin_vendor/share/gz:/opt/ros/jazzy/opt/gz_fuel_tools_vendor/share/gz:/opt/ros/jazzy/opt/gz_msgs_vendor/share/gz:/opt/ros/jazzy/opt/gz_common_vendor/share/gz', 'XDG_SESSION_TYPE': 'wayland', 'CLUTTER_DISABLE_MIPMAPPED_TEXT': '1', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/opt/ros/jazzy/opt/gz_sim_vendor/lib:/opt/ros/jazzy/opt/gz_sensors_vendor/lib:/opt/ros/jazzy/opt/gz_physics_vendor/lib:/opt/ros/jazzy/opt/sdformat_vendor/lib:/opt/ros/jazzy/opt/rviz_ogre_vendor/lib:/opt/ros/jazzy/lib/x86_64-linux-gnu:/opt/ros/jazzy/opt/gz_gui_vendor/lib:/opt/ros/jazzy/opt/gz_transport_vendor/lib:/opt/ros/jazzy/opt/gz_rendering_vendor/lib:/opt/ros/jazzy/opt/gz_plugin_vendor/lib:/opt/ros/jazzy/opt/gz_fuel_tools_vendor/lib:/opt/ros/jazzy/opt/gz_msgs_vendor/lib:/opt/ros/jazzy/opt/gz_common_vendor/lib:/opt/ros/jazzy/opt/gz_math_vendor/lib:/opt/ros/jazzy/opt/gz_utils_vendor/lib:/opt/ros/jazzy/opt/gz_tools_vendor/lib:/opt/ros/jazzy/opt/gz_ogre_next_vendor/lib:/opt/ros/jazzy/opt/gz_dartsim_vendor/lib:/opt/ros/jazzy/opt/gz_cmake_vendor/lib:/opt/ros/jazzy/lib', 'LESS': '-R', 'HOME': '/home/jonatan', 'OLDPWD': '/home/jonatan', 'DESKTOP_SESSION': 'ubuntu', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'ZSH': '/home/jonatan/.oh-my-zsh', 'GIO_LAUNCHED_DESKTOP_FILE': '/usr/share/applications/terminator.desktop', 'ROS_PYTHON_VERSION': '3', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'GTK_MODULES': 'gail:atk-bridge', 'PAGER': 'less', 'PS1': '\\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$', 'MANAGERPID': '2008', 'P9K_TTY': 'old', 'SYSTEMD_EXEC_PID': '2272', 'GSM_SKIP_SSH_AGENT_WORKAROUND': 'true', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'GIO_LAUNCHED_DESKTOP_FILE_PID': '3097', 'WAYLAND_DISPLAY': 'wayland-0', 'ROS_DISTRO': 'jazzy', 'LOGNAME': 'jonatan', '_P9K_SSH_TTY': '/dev/pts/2', 'JOURNAL_STREAM': '9:19463', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'MEMORY_PRESSURE_WATCH': '/sys/fs/cgroup/user.slice/user-1000.slice/user@1000.service/session.slice/org.gnome.Shell@wayland.service/memory.pressure', 'XDG_SESSION_CLASS': 'user', 'USERNAME': 'jonatan', 'TERM': 'xterm-256color', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'PATH': '/opt/ros/jazzy/opt/gz_msgs_vendor/bin:/opt/ros/jazzy/opt/gz_tools_vendor/bin:/opt/ros/jazzy/opt/gz_ogre_next_vendor/bin:/opt/ros/jazzy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin', 'SESSION_MANAGER': 'local/HP-EliteBook-x360-1030-G2:@/tmp/.ICE-unix/2219,unix/HP-EliteBook-x360-1030-G2:/tmp/.ICE-unix/2219', 'INVOCATION_ID': '1d5efdbd10c34d46a8570a6c200c5332', 'XDG_MENU_PREFIX': 'gnome-', 'GNOME_SETUP_DISPLAY': ':1', 'XDG_RUNTIME_DIR': '/run/user/1000', 'DISPLAY': ':0', 'LANG': 'en_US.UTF-8', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'XMODIFIERS': '@im=ibus', 'XDG_SESSION_DESKTOP': 'ubuntu', 'XAUTHORITY': '/run/user/1000/.mutter-Xwaylandauth.DBMW62', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:', 'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh', 'AMENT_PREFIX_PATH': '/home/jonatan/ros2_ws/install/articubot_one:/opt/ros/jazzy', 'SHELL': '/usr/bin/zsh', 'TERMINATOR_UUID': 'urn:uuid:0947d2af-0509-4362-9f98-b841aba16eb4', 'QT_ACCESSIBILITY': '1', 'GDMSESSION': 'ubuntu', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'IGN_GAZEBO_RESOURCE_PATH': '/opt/ros/jazzy/share', 'GJS_DEBUG_OUTPUT': 'stderr', 'P9K_SSH': '0', 'ROS_AUTOMATIC_DISCOVERY_RANGE': 'SUBNET', 'QT_IM_MODULE': 'ibus', 'PWD': '/home/jonatan/ros2_ws/build/articubot_one', 'LC_ALL': 'en_US.UTF-8', '_P9K_TTY': '/dev/pts/2', 'XDG_DATA_DIRS': '/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'PYTHONPATH': '/home/jonatan/ros2_ws/install/articubot_one/lib/python3.12/site-packages:/opt/ros/jazzy/lib/python3.12/site-packages', 'COLCON': '1', 'MEMORY_PRESSURE_WRITE': 'c29tZSAyMDAwMDAgMjAwMDAwMAA=', 'VTE_VERSION': '7600', 'CMAKE_PREFIX_PATH': '/home/jonatan/ros2_ws/install/articubot_one:/opt/ros/jazzy/opt/gz_sim_vendor:/opt/ros/jazzy/opt/gz_sensors_vendor:/opt/ros/jazzy/opt/gz_physics_vendor:/opt/ros/jazzy/opt/sdformat_vendor:/opt/ros/jazzy/opt/gz_gui_vendor:/opt/ros/jazzy/opt/gz_transport_vendor:/opt/ros/jazzy/opt/gz_rendering_vendor:/opt/ros/jazzy/opt/gz_plugin_vendor:/opt/ros/jazzy/opt/gz_fuel_tools_vendor:/opt/ros/jazzy/opt/gz_msgs_vendor:/opt/ros/jazzy/opt/gz_common_vendor:/opt/ros/jazzy/opt/gz_math_vendor:/opt/ros/jazzy/opt/gz_utils_vendor:/opt/ros/jazzy/opt/gz_tools_vendor:/opt/ros/jazzy/opt/gz_ogre_next_vendor:/opt/ros/jazzy/opt/gz_dartsim_vendor:/opt/ros/jazzy/opt/gz_cmake_vendor'}), 'shell': False}
[0.045206] (articubot_one) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.045667] (articubot_one) StdoutLine: {'line': b'Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.045959] (articubot_one) StdoutLine: {'line': b'   Site: HP-EliteBook-x360-1030-G2\n'}
[0.046300] (articubot_one) StdoutLine: {'line': b'   Build name: (empty)\n'}
[0.046472] (articubot_one) StdoutLine: {'line': b' Add coverage exclude regular expressions.\n'}
[0.046632] (articubot_one) StdoutLine: {'line': b'Create new tag: 20250518-1832 - Experimental\n'}
[0.046830] (articubot_one) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.047007] (articubot_one) StdoutLine: {'line': b'Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.047205] (articubot_one) StdoutLine: {'line': b'Test project /home/jonatan/ros2_ws/build/articubot_one\n'}
[0.047415] (articubot_one) StdoutLine: {'line': b'Constructing a list of tests\n'}
[0.047676] (articubot_one) StdoutLine: {'line': b'Done constructing a list of tests\n'}
[0.047995] (articubot_one) StdoutLine: {'line': b'Updating test list for fixtures\n'}
[0.048202] (articubot_one) StdoutLine: {'line': b'Added 0 tests to meet fixture requirements\n'}
[0.048301] (articubot_one) StdoutLine: {'line': b'Checking test dependency graph...\n'}
[0.048388] (articubot_one) StdoutLine: {'line': b'Checking test dependency graph end\n'}
[0.048470] (articubot_one) StdoutLine: {'line': b'test 1\n'}
[0.048553] (articubot_one) StdoutLine: {'line': b'    Start 1: laser_obstacle_test\n'}
[0.048635] (articubot_one) StdoutLine: {'line': b'\n'}
[0.048717] (articubot_one) StdoutLine: {'line': b'1: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test.txt" "--command" "/usr/bin/python3" "-u" "-m" "pytest" "/home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py" "-o" "cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache" "--junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--junit-prefix=articubot_one"\n'}
[0.048854] (articubot_one) StdoutLine: {'line': b'1: Working Directory: /home/jonatan/ros2_ws/build/articubot_one\n'}
[0.048941] (articubot_one) StdoutLine: {'line': b'1: Test timeout computed to be: 60\n'}
[0.099782] (-) TimerEvent: {}
[0.134678] (articubot_one) StdoutLine: {'line': b"1: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/build/articubot_one':\n"}
[0.134921] (articubot_one) StdoutLine: {'line': b'1:  - /usr/bin/python3 -u -m pytest /home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py -o cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache --junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml --junit-prefix=articubot_one\n'}
[0.199907] (-) TimerEvent: {}
[0.300148] (-) TimerEvent: {}
[0.400417] (-) TimerEvent: {}
[0.500679] (-) TimerEvent: {}
[0.583996] (articubot_one) StdoutLine: {'line': b'1: ============================= test session starts ==============================\n'}
[0.584173] (articubot_one) StdoutLine: {'line': b'1: platform linux -- Python 3.12.3, pytest-7.4.4, pluggy-1.4.0\n'}
[0.588868] (articubot_one) StdoutLine: {'line': b'1: cachedir: /home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache\n'}
[0.589112] (articubot_one) StdoutLine: {'line': b'1: rootdir: /home/jonatan/ros2_ws/src/articubot_one\n'}
[0.589238] (articubot_one) StdoutLine: {'line': b'1: plugins: launch-testing-3.4.4, ament-xmllint-0.17.2, ament-pep257-0.17.2, ament-copyright-0.17.2, ament-flake8-0.17.2, launch-testing-ros-0.26.7, ament-lint-0.17.2, cov-4.1.0, typeguard-4.1.5, colcon-core-0.19.0\n'}
[0.600808] (-) TimerEvent: {}
[0.701066] (-) TimerEvent: {}
[0.801392] (-) TimerEvent: {}
[0.814319] (articubot_one) StdoutLine: {'line': b'1: collected 3 items\n'}
[0.814956] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.901494] (-) TimerEvent: {}
[0.917319] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py F.F            [100%]\n'}
[0.917608] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.918327] (articubot_one) StdoutLine: {'line': b'1: =================================== FAILURES ===================================\n'}
[0.918596] (articubot_one) StdoutLine: {'line': b'1: ______________________________ test_node_creation ______________________________\n'}
[0.918838] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.919351] (articubot_one) StdoutLine: {'line': b'1:     def test_node_creation():\n'}
[0.919521] (articubot_one) StdoutLine: {'line': b'1:         rclpy.init\n'}
[0.920248] (articubot_one) StdoutLine: {'line': b'1:         try :\n'}
[0.920410] (articubot_one) StdoutLine: {'line': b'1: >           node=Obstacle()\n'}
[0.920619] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.920827] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py:13: \n'}
[0.921093] (articubot_one) StdoutLine: {'line': b'1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n'}
[0.921254] (articubot_one) StdoutLine: {'line': b'1: ../../install/articubot_one/lib/python3.12/site-packages/articubot_one/obstacle_avoidance.py:15: in __init__\n'}
[0.921420] (articubot_one) StdoutLine: {'line': b'1:     super().__init__("Laser_Obstacle_Avoidance")\n'}
[0.921570] (articubot_one) StdoutLine: {'line': b'1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n'}
[0.921718] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.921891] (articubot_one) StdoutLine: {'line': b'1: self = <articubot_one.obstacle_avoidance.Obstacle object at 0x7f6cc9b01490>\n'}
[0.922034] (articubot_one) StdoutLine: {'line': b"1: node_name = 'Laser_Obstacle_Avoidance'\n"}
[0.922175] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.922316] (articubot_one) StdoutLine: {'line': b'1:     def __init__(\n'}
[0.922457] (articubot_one) StdoutLine: {'line': b'1:         self,\n'}
[0.922597] (articubot_one) StdoutLine: {'line': b'1:         node_name: str,\n'}
[0.922736] (articubot_one) StdoutLine: {'line': b'1:         *,\n'}
[0.922892] (articubot_one) StdoutLine: {'line': b'1:         context: Optional[Context] = None,\n'}
[0.923035] (articubot_one) StdoutLine: {'line': b'1:         cli_args: Optional[List[str]] = None,\n'}
[0.923175] (articubot_one) StdoutLine: {'line': b'1:         namespace: Optional[str] = None,\n'}
[0.923315] (articubot_one) StdoutLine: {'line': b'1:         use_global_arguments: bool = True,\n'}
[0.923440] (articubot_one) StdoutLine: {'line': b'1:         enable_rosout: bool = True,\n'}
[0.923569] (articubot_one) StdoutLine: {'line': b'1:         start_parameter_services: bool = True,\n'}
[0.923702] (articubot_one) StdoutLine: {'line': b'1:         parameter_overrides: Optional[List[Parameter]] = None,\n'}
[0.923854] (articubot_one) StdoutLine: {'line': b'1:         allow_undeclared_parameters: bool = False,\n'}
[0.923993] (articubot_one) StdoutLine: {'line': b'1:         automatically_declare_parameters_from_overrides: bool = False,\n'}
[0.924129] (articubot_one) StdoutLine: {'line': b'1:         enable_logger_service: bool = False\n'}
[0.924265] (articubot_one) StdoutLine: {'line': b'1:     ) -> None:\n'}
[0.924423] (articubot_one) StdoutLine: {'line': b'1:         """\n'}
[0.924558] (articubot_one) StdoutLine: {'line': b'1:         Create a Node.\n'}
[0.924696] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[0.924873] (articubot_one) StdoutLine: {'line': b'1:         :param node_name: A name to give to this node. Validated by :func:`validate_node_name`.\n'}
[0.925022] (articubot_one) StdoutLine: {'line': b'1:         :param context: The context to be associated with, or ``None`` for the default global\n'}
[0.925175] (articubot_one) StdoutLine: {'line': b'1:             context.\n'}
[0.925311] (articubot_one) StdoutLine: {'line': b'1:         :param cli_args: A list of strings of command line args to be used only by this node.\n'}
[0.925450] (articubot_one) StdoutLine: {'line': b'1:             These arguments are used to extract remappings used by the node and other ROS specific\n'}
[0.925591] (articubot_one) StdoutLine: {'line': b'1:             settings, as well as user defined non-ROS arguments.\n'}
[0.925731] (articubot_one) StdoutLine: {'line': b'1:         :param namespace: The namespace to which relative topic and service names will be prefixed.\n'}
[0.925923] (articubot_one) StdoutLine: {'line': b'1:             Validated by :func:`validate_namespace`.\n'}
[0.926076] (articubot_one) StdoutLine: {'line': b'1:         :param use_global_arguments: ``False`` if the node should ignore process-wide command line\n'}
[0.926216] (articubot_one) StdoutLine: {'line': b'1:             args.\n'}
[0.926352] (articubot_one) StdoutLine: {'line': b'1:         :param enable_rosout: ``False`` if the node should ignore rosout logging.\n'}
[0.926486] (articubot_one) StdoutLine: {'line': b'1:         :param start_parameter_services: ``False`` if the node should not create parameter\n'}
[0.926621] (articubot_one) StdoutLine: {'line': b'1:             services.\n'}
[0.926765] (articubot_one) StdoutLine: {'line': b'1:         :param parameter_overrides: A list of overrides for initial values for parameters declared\n'}
[0.926914] (articubot_one) StdoutLine: {'line': b'1:             on the node.\n'}
[0.927052] (articubot_one) StdoutLine: {'line': b'1:         :param allow_undeclared_parameters: True if undeclared parameters are allowed.\n'}
[0.927191] (articubot_one) StdoutLine: {'line': b'1:             This flag affects the behavior of parameter-related operations.\n'}
[0.927331] (articubot_one) StdoutLine: {'line': b'1:         :param automatically_declare_parameters_from_overrides: If True, the "parameter overrides"\n'}
[0.927473] (articubot_one) StdoutLine: {'line': b'1:             will be used to implicitly declare parameters on the node during creation.\n'}
[0.927613] (articubot_one) StdoutLine: {'line': b'1:         :param enable_logger_service: ``True`` if ROS2 services are created to allow external nodes\n'}
[0.927761] (articubot_one) StdoutLine: {'line': b'1:             to get and set logger levels of this node. Otherwise, logger levels are only managed\n'}
[0.927942] (articubot_one) StdoutLine: {'line': b'1:             locally. That is, logger levels cannot be changed remotely.\n'}
[0.928079] (articubot_one) StdoutLine: {'line': b'1:         """\n'}
[0.928214] (articubot_one) StdoutLine: {'line': b'1:         self.__handle = None\n'}
[0.928347] (articubot_one) StdoutLine: {'line': b'1:         self._context = get_default_context() if context is None else context\n'}
[0.928484] (articubot_one) StdoutLine: {'line': b'1:         self._parameters: dict = {}\n'}
[0.928620] (articubot_one) StdoutLine: {'line': b'1:         self._publishers: List[Publisher] = []\n'}
[0.928784] (articubot_one) StdoutLine: {'line': b'1:         self._subscriptions: List[Subscription] = []\n'}
[0.928946] (articubot_one) StdoutLine: {'line': b'1:         self._clients: List[Client] = []\n'}
[0.929098] (articubot_one) StdoutLine: {'line': b'1:         self._services: List[Service] = []\n'}
[0.929239] (articubot_one) StdoutLine: {'line': b'1:         self._timers: List[Timer] = []\n'}
[0.929378] (articubot_one) StdoutLine: {'line': b'1:         self._guards: List[GuardCondition] = []\n'}
[0.929517] (articubot_one) StdoutLine: {'line': b'1:         self.__waitables: List[Waitable] = []\n'}
[0.929660] (articubot_one) StdoutLine: {'line': b'1:         self._default_callback_group = MutuallyExclusiveCallbackGroup()\n'}
[0.929820] (articubot_one) StdoutLine: {'line': b'1:         self._pre_set_parameters_callbacks: List[Callable[[List[Parameter]], List[Parameter]]] = []\n'}
[0.929965] (articubot_one) StdoutLine: {'line': b'1:         self._on_set_parameters_callbacks: \\\n'}
[0.930101] (articubot_one) StdoutLine: {'line': b'1:             List[Callable[[List[Parameter]], SetParametersResult]] = []\n'}
[0.930256] (articubot_one) StdoutLine: {'line': b'1:         self._post_set_parameters_callbacks: List[Callable[[List[Parameter]], None]] = []\n'}
[0.930404] (articubot_one) StdoutLine: {'line': b'1:         self._rate_group = ReentrantCallbackGroup()\n'}
[0.930548] (articubot_one) StdoutLine: {'line': b'1:         self._allow_undeclared_parameters = allow_undeclared_parameters\n'}
[0.930691] (articubot_one) StdoutLine: {'line': b'1:         self._parameter_overrides = {}\n'}
[0.930853] (articubot_one) StdoutLine: {'line': b'1:         self._descriptors = {}\n'}
[0.930999] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[0.931150] (articubot_one) StdoutLine: {'line': b"1:         namespace = namespace or ''\n"}
[0.931291] (articubot_one) StdoutLine: {'line': b'1:         if not self._context.ok():\n'}
[0.931431] (articubot_one) StdoutLine: {'line': b"1: >           raise NotInitializedException('cannot create node')\n"}
[0.931571] (articubot_one) StdoutLine: {'line': b'1: E           rclpy.exceptions.NotInitializedException: rclpy.init() has not been called. msg:cannot create node\n'}
[0.931710] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.931913] (articubot_one) StdoutLine: {'line': b'1: /opt/ros/jazzy/lib/python3.12/site-packages/rclpy/node.py:184: NotInitializedException\n'}
[0.932025] (articubot_one) StdoutLine: {'line': b'1: ________________________________ test_obstacle _________________________________\n'}
[0.932114] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.932197] (articubot_one) StdoutLine: {'line': b'1:     def test_obstacle():\n'}
[0.932279] (articubot_one) StdoutLine: {'line': b'1:         rclpy.init\n'}
[0.932361] (articubot_one) StdoutLine: {'line': b'1:         try :\n'}
[0.932442] (articubot_one) StdoutLine: {'line': b'1: >           node=Obstacle()\n'}
[0.932523] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.932603] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py:33: \n'}
[0.932684] (articubot_one) StdoutLine: {'line': b'1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n'}
[0.932775] (articubot_one) StdoutLine: {'line': b'1: ../../install/articubot_one/lib/python3.12/site-packages/articubot_one/obstacle_avoidance.py:15: in __init__\n'}
[0.932862] (articubot_one) StdoutLine: {'line': b'1:     super().__init__("Laser_Obstacle_Avoidance")\n'}
[0.932943] (articubot_one) StdoutLine: {'line': b'1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n'}
[0.933022] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.933101] (articubot_one) StdoutLine: {'line': b'1: self = <articubot_one.obstacle_avoidance.Obstacle object at 0x7f6cc8d23c20>\n'}
[0.933181] (articubot_one) StdoutLine: {'line': b"1: node_name = 'Laser_Obstacle_Avoidance'\n"}
[0.933260] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.933340] (articubot_one) StdoutLine: {'line': b'1:     def __init__(\n'}
[0.933420] (articubot_one) StdoutLine: {'line': b'1:         self,\n'}
[0.933500] (articubot_one) StdoutLine: {'line': b'1:         node_name: str,\n'}
[0.933581] (articubot_one) StdoutLine: {'line': b'1:         *,\n'}
[0.933661] (articubot_one) StdoutLine: {'line': b'1:         context: Optional[Context] = None,\n'}
[0.933773] (articubot_one) StdoutLine: {'line': b'1:         cli_args: Optional[List[str]] = None,\n'}
[0.933867] (articubot_one) StdoutLine: {'line': b'1:         namespace: Optional[str] = None,\n'}
[0.933951] (articubot_one) StdoutLine: {'line': b'1:         use_global_arguments: bool = True,\n'}
[0.934032] (articubot_one) StdoutLine: {'line': b'1:         enable_rosout: bool = True,\n'}
[0.934113] (articubot_one) StdoutLine: {'line': b'1:         start_parameter_services: bool = True,\n'}
[0.934194] (articubot_one) StdoutLine: {'line': b'1:         parameter_overrides: Optional[List[Parameter]] = None,\n'}
[0.934274] (articubot_one) StdoutLine: {'line': b'1:         allow_undeclared_parameters: bool = False,\n'}
[0.934354] (articubot_one) StdoutLine: {'line': b'1:         automatically_declare_parameters_from_overrides: bool = False,\n'}
[0.934433] (articubot_one) StdoutLine: {'line': b'1:         enable_logger_service: bool = False\n'}
[0.934512] (articubot_one) StdoutLine: {'line': b'1:     ) -> None:\n'}
[0.934592] (articubot_one) StdoutLine: {'line': b'1:         """\n'}
[0.934672] (articubot_one) StdoutLine: {'line': b'1:         Create a Node.\n'}
[0.934763] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[0.934855] (articubot_one) StdoutLine: {'line': b'1:         :param node_name: A name to give to this node. Validated by :func:`validate_node_name`.\n'}
[0.934944] (articubot_one) StdoutLine: {'line': b'1:         :param context: The context to be associated with, or ``None`` for the default global\n'}
[0.935026] (articubot_one) StdoutLine: {'line': b'1:             context.\n'}
[0.935106] (articubot_one) StdoutLine: {'line': b'1:         :param cli_args: A list of strings of command line args to be used only by this node.\n'}
[0.935188] (articubot_one) StdoutLine: {'line': b'1:             These arguments are used to extract remappings used by the node and other ROS specific\n'}
[0.935268] (articubot_one) StdoutLine: {'line': b'1:             settings, as well as user defined non-ROS arguments.\n'}
[0.935347] (articubot_one) StdoutLine: {'line': b'1:         :param namespace: The namespace to which relative topic and service names will be prefixed.\n'}
[0.935428] (articubot_one) StdoutLine: {'line': b'1:             Validated by :func:`validate_namespace`.\n'}
[0.935509] (articubot_one) StdoutLine: {'line': b'1:         :param use_global_arguments: ``False`` if the node should ignore process-wide command line\n'}
[0.935590] (articubot_one) StdoutLine: {'line': b'1:             args.\n'}
[0.935671] (articubot_one) StdoutLine: {'line': b'1:         :param enable_rosout: ``False`` if the node should ignore rosout logging.\n'}
[0.935762] (articubot_one) StdoutLine: {'line': b'1:         :param start_parameter_services: ``False`` if the node should not create parameter\n'}
[0.935852] (articubot_one) StdoutLine: {'line': b'1:             services.\n'}
[0.935933] (articubot_one) StdoutLine: {'line': b'1:         :param parameter_overrides: A list of overrides for initial values for parameters declared\n'}
[0.936013] (articubot_one) StdoutLine: {'line': b'1:             on the node.\n'}
[0.936093] (articubot_one) StdoutLine: {'line': b'1:         :param allow_undeclared_parameters: True if undeclared parameters are allowed.\n'}
[0.936173] (articubot_one) StdoutLine: {'line': b'1:             This flag affects the behavior of parameter-related operations.\n'}
[0.936254] (articubot_one) StdoutLine: {'line': b'1:         :param automatically_declare_parameters_from_overrides: If True, the "parameter overrides"\n'}
[0.936335] (articubot_one) StdoutLine: {'line': b'1:             will be used to implicitly declare parameters on the node during creation.\n'}
[0.936416] (articubot_one) StdoutLine: {'line': b'1:         :param enable_logger_service: ``True`` if ROS2 services are created to allow external nodes\n'}
[0.936504] (articubot_one) StdoutLine: {'line': b'1:             to get and set logger levels of this node. Otherwise, logger levels are only managed\n'}
[0.936585] (articubot_one) StdoutLine: {'line': b'1:             locally. That is, logger levels cannot be changed remotely.\n'}
[0.936663] (articubot_one) StdoutLine: {'line': b'1:         """\n'}
[0.936743] (articubot_one) StdoutLine: {'line': b'1:         self.__handle = None\n'}
[0.936837] (articubot_one) StdoutLine: {'line': b'1:         self._context = get_default_context() if context is None else context\n'}
[0.936919] (articubot_one) StdoutLine: {'line': b'1:         self._parameters: dict = {}\n'}
[0.936999] (articubot_one) StdoutLine: {'line': b'1:         self._publishers: List[Publisher] = []\n'}
[0.937080] (articubot_one) StdoutLine: {'line': b'1:         self._subscriptions: List[Subscription] = []\n'}
[0.937160] (articubot_one) StdoutLine: {'line': b'1:         self._clients: List[Client] = []\n'}
[0.937240] (articubot_one) StdoutLine: {'line': b'1:         self._services: List[Service] = []\n'}
[0.937319] (articubot_one) StdoutLine: {'line': b'1:         self._timers: List[Timer] = []\n'}
[0.937398] (articubot_one) StdoutLine: {'line': b'1:         self._guards: List[GuardCondition] = []\n'}
[0.937477] (articubot_one) StdoutLine: {'line': b'1:         self.__waitables: List[Waitable] = []\n'}
[0.937556] (articubot_one) StdoutLine: {'line': b'1:         self._default_callback_group = MutuallyExclusiveCallbackGroup()\n'}
[0.937636] (articubot_one) StdoutLine: {'line': b'1:         self._pre_set_parameters_callbacks: List[Callable[[List[Parameter]], List[Parameter]]] = []\n'}
[0.937723] (articubot_one) StdoutLine: {'line': b'1:         self._on_set_parameters_callbacks: \\\n'}
[0.937833] (articubot_one) StdoutLine: {'line': b'1:             List[Callable[[List[Parameter]], SetParametersResult]] = []\n'}
[0.937919] (articubot_one) StdoutLine: {'line': b'1:         self._post_set_parameters_callbacks: List[Callable[[List[Parameter]], None]] = []\n'}
[0.938001] (articubot_one) StdoutLine: {'line': b'1:         self._rate_group = ReentrantCallbackGroup()\n'}
[0.938082] (articubot_one) StdoutLine: {'line': b'1:         self._allow_undeclared_parameters = allow_undeclared_parameters\n'}
[0.938163] (articubot_one) StdoutLine: {'line': b'1:         self._parameter_overrides = {}\n'}
[0.938243] (articubot_one) StdoutLine: {'line': b'1:         self._descriptors = {}\n'}
[0.938323] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[0.938405] (articubot_one) StdoutLine: {'line': b"1:         namespace = namespace or ''\n"}
[0.938487] (articubot_one) StdoutLine: {'line': b'1:         if not self._context.ok():\n'}
[0.938568] (articubot_one) StdoutLine: {'line': b"1: >           raise NotInitializedException('cannot create node')\n"}
[0.938649] (articubot_one) StdoutLine: {'line': b'1: E           rclpy.exceptions.NotInitializedException: rclpy.init() has not been called. msg:cannot create node\n'}
[0.938729] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.938826] (articubot_one) StdoutLine: {'line': b'1: /opt/ros/jazzy/lib/python3.12/site-packages/rclpy/node.py:184: NotInitializedException\n'}
[0.938909] (articubot_one) StdoutLine: {'line': b'1: - generated xml file: /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml -\n'}
[0.938990] (articubot_one) StdoutLine: {'line': b'1: =========================== short test summary info ============================\n'}
[0.939071] (articubot_one) StdoutLine: {'line': b'1: FAILED ../../src/articubot_one/test/pytest/test_laserObstacle.py::test_node_creation\n'}
[0.939151] (articubot_one) StdoutLine: {'line': b'1: FAILED ../../src/articubot_one/test/pytest/test_laserObstacle.py::test_obstacle\n'}
[0.939243] (articubot_one) StdoutLine: {'line': b'1: ========================= 2 failed, 1 passed in 0.34s ==========================\n'}
[1.001667] (-) TimerEvent: {}
[1.034474] (articubot_one) StdoutLine: {'line': b'1: -- run_test.py: return code 1\n'}
[1.034873] (articubot_one) StdoutLine: {'line': b"1: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml'\n"}
[1.049229] (articubot_one) StdoutLine: {'line': b'1/6 Test #1: laser_obstacle_test ..............***Failed    1.00 sec\n'}
[1.049652] (articubot_one) StdoutLine: {'line': b'test 2\n'}
[1.049847] (articubot_one) StdoutLine: {'line': b'    Start 2: copyright\n'}
[1.049966] (articubot_one) StdoutLine: {'line': b'\n'}
[1.050075] (articubot_one) StdoutLine: {'line': b'2: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_copyright/copyright.txt" "--command" "/opt/ros/jazzy/bin/ament_copyright" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml"\n'}
[1.050195] (articubot_one) StdoutLine: {'line': b'2: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[1.050301] (articubot_one) StdoutLine: {'line': b'2: Test timeout computed to be: 200\n'}
[1.101810] (-) TimerEvent: {}
[1.139416] (articubot_one) StdoutLine: {'line': b"2: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[1.139695] (articubot_one) StdoutLine: {'line': b'2:  - /opt/ros/jazzy/bin/ament_copyright --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml\n'}
[1.201902] (-) TimerEvent: {}
[1.302166] (-) TimerEvent: {}
[1.402445] (-) TimerEvent: {}
[1.422476] (articubot_one) StdoutLine: {'line': b'2: CONTRIBUTING.md: file not found\n'}
[1.422652] (articubot_one) StdoutLine: {'line': b'2: LICENSE: file not found\n'}
[1.422757] (articubot_one) StdoutLine: {'line': b'2: articubot_one/obstacle_avoidance.py: could not find copyright notice\n'}
[1.422870] (articubot_one) StdoutLine: {'line': b'2: launch/ball_tracker.launch.py: could not find copyright notice\n'}
[1.422984] (articubot_one) StdoutLine: {'line': b'2: launch/camera.launch.py: could not find copyright notice\n'}
[1.423068] (articubot_one) StdoutLine: {'line': b'2: launch/joystick.launch.py: could not find copyright notice\n'}
[1.423149] (articubot_one) StdoutLine: {'line': b'2: launch/launch_robot.launch.py: could not find copyright notice\n'}
[1.423259] (articubot_one) StdoutLine: {'line': b'2: launch/launch_sim.launch.py: could not find copyright notice\n'}
[1.423372] (articubot_one) StdoutLine: {'line': b'2: launch/online_async_launch.py: could not find copyright notice\n'}
[1.423486] (articubot_one) StdoutLine: {'line': b'2: launch/rplidar.launch.py: could not find copyright notice\n'}
[1.423570] (articubot_one) StdoutLine: {'line': b'2: launch/rsp.launch.py: could not find copyright notice\n'}
[1.423651] (articubot_one) StdoutLine: {'line': b'2: launch/rviz_gazebo.launch.py: could not find copyright notice\n'}
[1.423745] (articubot_one) StdoutLine: {'line': b'2: test/pytest/test_laserObstacle.py: could not find copyright notice\n'}
[1.423841] (articubot_one) StdoutLine: {'line': b'2: 13 errors, checked 16 files\n'}
[1.438212] (articubot_one) StdoutLine: {'line': b'2: -- run_test.py: return code 1\n'}
[1.438532] (articubot_one) StdoutLine: {'line': b"2: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml'\n"}
[1.449652] (articubot_one) StdoutLine: {'line': b'2/6 Test #2: copyright ........................***Failed    0.40 sec\n'}
[1.449925] (articubot_one) StdoutLine: {'line': b'test 3\n'}
[1.450022] (articubot_one) StdoutLine: {'line': b'    Start 3: flake8\n'}
[1.450109] (articubot_one) StdoutLine: {'line': b'\n'}
[1.450193] (articubot_one) StdoutLine: {'line': b'3: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_flake8/flake8.txt" "--command" "/opt/ros/jazzy/bin/ament_flake8" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml"\n'}
[1.450282] (articubot_one) StdoutLine: {'line': b'3: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[1.450365] (articubot_one) StdoutLine: {'line': b'3: Test timeout computed to be: 60\n'}
[1.502566] (-) TimerEvent: {}
[1.527460] (articubot_one) StdoutLine: {'line': b"3: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[1.527690] (articubot_one) StdoutLine: {'line': b'3:  - /opt/ros/jazzy/bin/ament_flake8 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml\n'}
[1.602722] (-) TimerEvent: {}
[1.703023] (-) TimerEvent: {}
[1.803316] (-) TimerEvent: {}
[1.903592] (-) TimerEvent: {}
[1.944990] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist\n'}
[1.945310] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.945559] (articubot_one) StdoutLine: {'line': b'3: import math\n'}
[1.945742] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.945883] (articubot_one) StdoutLine: {'line': b'3: import math\n'}
[1.946032] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.946206] (articubot_one) StdoutLine: {'line': b'3: # i am writing down this piece of code with paramters \n'}
[1.946378] (articubot_one) StdoutLine: {'line': b'3:                                                      ^\n'}
[1.946548] (articubot_one) StdoutLine: {'line': b'3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node \n'}
[1.947209] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.947385] (articubot_one) StdoutLine: {'line': b'3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node \n'}
[1.947556] (articubot_one) StdoutLine: {'line': b'3:                                                                                                               ^\n'}
[1.947726] (articubot_one) StdoutLine: {'line': b'3:     def __init__(self) :\n'}
[1.947946] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[1.948138] (articubot_one) StdoutLine: {'line': b'3:         super().__init__("Laser_Obstacle_Avoidance")\n'}
[1.948336] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[1.948551] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[1.948764] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.948965] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[1.949199] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[1.949421] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[1.949607] (articubot_one) StdoutLine: {'line': b'3:                                                    ^\n'}
[1.949817] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[1.950012] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.950194] (articubot_one) StdoutLine: {'line': b'3:         self.threshold=self.get_parameter("threshold_distance").value\n'}
[1.950376] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[1.950559] (articubot_one) StdoutLine: {'line': b'3:         self.threshold=self.get_parameter("threshold_distance").value\n'}
[1.950753] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[1.950961] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[1.951170] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.951364] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[1.951558] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[1.951758] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[1.951966] (articubot_one) StdoutLine: {'line': b'3:                                                  ^\n'}
[1.952162] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[1.952357] (articubot_one) StdoutLine: {'line': b'3:                                                   ^\n'}
[1.952549] (articubot_one) StdoutLine: {'line': b'3:         self.laser_topic=self.get_parameter("laser_scan_topic").value\n'}
[1.952742] (articubot_one) StdoutLine: {'line': b'3:                         ^\n'}
[1.953261] (articubot_one) StdoutLine: {'line': b'3:         self.laser_topic=self.get_parameter("laser_scan_topic").value\n'}
[1.953410] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[1.953882] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[1.954114] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.954323] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[1.954529] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[1.955051] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[1.955268] (articubot_one) StdoutLine: {'line': b'3:                                               ^\n'}
[1.955815] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[1.956015] (articubot_one) StdoutLine: {'line': b'3:                                                ^\n'}
[1.956206] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value\n'}
[1.956394] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[1.956581] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value\n'}
[1.956683] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[1.956790] (articubot_one) StdoutLine: {'line': b"3:         self.frontal_detection_angle_rad = math.radians(self.get_parameter('frontal_detection_angle_deg').value)\n"}
[1.956885] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.956973] (articubot_one) StdoutLine: {'line': b'3:         #create a publisher to the /cmd_vel\n'}
[1.957058] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[1.957142] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_vel_pub = self.create_publisher(Twist,self.cmd_topic, 10)\n'}
[1.957228] (articubot_one) StdoutLine: {'line': b'3:                                                       ^\n'}
[1.957312] (articubot_one) StdoutLine: {'line': b'3:     def laser_callback(self,msg):\n'}
[1.957396] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.957480] (articubot_one) StdoutLine: {'line': b'3:     def laser_callback(self,msg):\n'}
[1.957563] (articubot_one) StdoutLine: {'line': b'3:                            ^\n'}
[1.957647] (articubot_one) StdoutLine: {'line': b'3:   \n'}
[1.957732] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.957836] (articubot_one) StdoutLine: {'line': b'3:         if not(scan_size) :\n'}
[1.957923] (articubot_one) StdoutLine: {'line': b'3:               ^\n'}
[1.958010] (articubot_one) StdoutLine: {'line': b'3:         if not(scan_size) :\n'}
[1.958095] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[1.958179] (articubot_one) StdoutLine: {'line': b'3:             #no laser data \n'}
[1.958263] (articubot_one) StdoutLine: {'line': b'3:             ^\n'}
[1.958347] (articubot_one) StdoutLine: {'line': b'3:             #no laser data \n'}
[1.958432] (articubot_one) StdoutLine: {'line': b'3:                           ^\n'}
[1.958518] (articubot_one) StdoutLine: {'line': b'3:             return \n'}
[1.958602] (articubot_one) StdoutLine: {'line': b'3:                   ^\n'}
[1.958686] (articubot_one) StdoutLine: {'line': b'3:         # the lidar provides angles,angle step (common difference of the angle sequence), distances in meter\n'}
[1.958779] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.958870] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[1.958954] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.959037] (articubot_one) StdoutLine: {'line': b'3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance\n'}
[1.959122] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[1.959207] (articubot_one) StdoutLine: {'line': b'3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance\n'}
[1.959291] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.959376] (articubot_one) StdoutLine: {'line': b"3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance\n"}
[1.959461] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[1.959545] (articubot_one) StdoutLine: {'line': b"3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance\n"}
[1.960498] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.960705] (articubot_one) StdoutLine: {'line': b'3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle \n'}
[1.960925] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.961094] (articubot_one) StdoutLine: {'line': b'3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle \n'}
[1.961234] (articubot_one) StdoutLine: {'line': b'3:                                                                                                                      ^\n'}
[1.961419] (articubot_one) StdoutLine: {'line': b'3:         # we are sweeping across all the angles with the increment \n'}
[1.961560] (articubot_one) StdoutLine: {'line': b'3:                                                                   ^\n'}
[1.961705] (articubot_one) StdoutLine: {'line': b'3:         # while sweeping we compare  only the ranges with the ones in the defined angle \n'}
[1.966494] (articubot_one) StdoutLine: {'line': b'3:                                                                                        ^\n'}
[1.966621] (articubot_one) StdoutLine: {'line': b'3:                  # If the range reading is valid (not inf or nan)\n'}
[1.966713] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[1.966817] (articubot_one) StdoutLine: {'line': b'3:                  # If the range reading is valid (not inf or nan)\n'}
[1.966905] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[1.966987] (articubot_one) StdoutLine: {'line': b'3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):\n'}
[1.967070] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[1.967152] (articubot_one) StdoutLine: {'line': b'3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):\n'}
[1.967243] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[1.967327] (articubot_one) StdoutLine: {'line': b'3:             \n'}
[1.967409] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.967505] (articubot_one) StdoutLine: {'line': b'3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])\n'}
[1.967584] (articubot_one) StdoutLine: {'line': b'3:                      ^\n'}
[1.967663] (articubot_one) StdoutLine: {'line': b'3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])\n'}
[1.967742] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.967839] (articubot_one) StdoutLine: {'line': b'3:         #  To stop the robot from moving ahead when ever it meets an obstacle, it will just go back \n'}
[1.967919] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.967995] (articubot_one) StdoutLine: {'line': b'3:         if obstacle_detected :\n'}
[1.968071] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[1.968147] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')\n"}
[1.968224] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.968300] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')\n"}
[1.968376] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.968453] (articubot_one) StdoutLine: {'line': b'3:            twist.linear.x = 0.0\n'}
[1.968536] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.968614] (articubot_one) StdoutLine: {'line': b'3:            twist.angular.z =0.0\n'}
[1.968691] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.968777] (articubot_one) StdoutLine: {'line': b'3:            twist.angular.z =0.0\n'}
[1.968861] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[1.968938] (articubot_one) StdoutLine: {'line': b'3:            self.cmd_vel_pub.publish(twist)\n'}
[1.969014] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.969090] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[1.969168] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.969245] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[1.969325] (articubot_one) StdoutLine: {'line': b'3:                                   ^\n'}
[1.969402] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[1.969479] (articubot_one) StdoutLine: {'line': b'3:                                                           ^\n'}
[1.969557] (articubot_one) StdoutLine: {'line': b'3: def main(args=None):\n'}
[1.969634] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.969710] (articubot_one) StdoutLine: {'line': b'3:         rclpy.spin(node) # Keep the node running and process callbacks\n'}
[1.969824] (articubot_one) StdoutLine: {'line': b'3:                         ^\n'}
[1.969909] (articubot_one) StdoutLine: {'line': b"3:         node.get_logger().info('Smart Obstacle Avoider Node stopped cleanly via KeyboardInterrupt.')\n"}
[1.969989] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.970068] (articubot_one) StdoutLine: {'line': b"3: if __name__ == '__main__':\n"}
[1.970146] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.970225] (articubot_one) StdoutLine: {'line': b'3:     main()    \n'}
[1.970302] (articubot_one) StdoutLine: {'line': b'3:           ^\n'}
[1.970380] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[1.970458] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.970534] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[1.970611] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.970688] (articubot_one) StdoutLine: {'line': b"3:     my_package_name='articubot_one'\n"}
[1.970777] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[1.970863] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[1.970942] (articubot_one) StdoutLine: {'line': b'3:                                                                                   ^\n'}
[1.971019] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[1.971097] (articubot_one) StdoutLine: {'line': b'3:                                                                                            ^\n'}
[1.971176] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[1.971254] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.971333] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[1.971412] (articubot_one) StdoutLine: {'line': b'3:                                                                                     ^\n'}
[1.971491] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[1.971583] (articubot_one) StdoutLine: {'line': b'3:                                                                                              ^\n'}
[1.971661] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[1.971741] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.971832] (articubot_one) StdoutLine: {'line': b'3:     params_path = PythonExpression([\'"\',tracker_params_sim, \'" if "true" == "\', sim_mode, \'" else "\', tracker_params_robot, \'"\'])\n'}
[1.971926] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[1.972003] (articubot_one) StdoutLine: {'line': b'3:     params_path = PythonExpression([\'"\',tracker_params_sim, \'" if "true" == "\', sim_mode, \'" else "\', tracker_params_robot, \'"\'])\n'}
[1.972081] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.972160] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory('ball_tracker'), 'launch', 'ball_tracker.launch.py')]),\n"}
[1.972239] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.972319] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'params_file': params_path,\n"}
[1.972398] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[1.972476] (articubot_one) StdoutLine: {'line': b"3:                                     'image_topic': '/camera/image_raw',\n"}
[1.972554] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[1.972631] (articubot_one) StdoutLine: {'line': b"3:                                     'cmd_vel_topic': '/cmd_vel_tracker',\n"}
[1.972708] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[1.972796] (articubot_one) StdoutLine: {'line': b"3:                                     'enable_3d_tracker': 'true'}.items())\n"}
[1.972878] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[1.972957] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[1.973035] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.973111] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[1.973188] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.973263] (articubot_one) StdoutLine: {'line': b'3:     return LaunchDescription([\n'}
[1.973339] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.973414] (articubot_one) StdoutLine: {'line': b"3:                 'image_size': [640,480],\n"}
[1.973490] (articubot_one) StdoutLine: {'line': b'3:                                   ^\n'}
[1.973566] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[1.973642] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.973719] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.973825] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:5:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[1.973909] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.973987] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:6:1: I100 Import statements are in the wrong order. 'import math' should be before 'from geometry_msgs.msg import Twist' and in a different group.\n"}
[1.974066] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.974143] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:6:1: I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.\n"}
[1.974231] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.974307] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:9:54: W291 trailing whitespace\n'}
[1.974384] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.974476] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:10:100: E501 line too long (110 > 99 characters)\n'}
[1.974556] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.974635] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:10:111: W291 trailing whitespace\n'}
[1.974714] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.974805] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:14:23: E203 whitespace before ':'\n"}
[1.974888] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.974966] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:15:26: Q000 Double quotes found but single quotes preferred\n'}
[1.975047] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.975127] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:16:1: W293 blank line contains whitespace\n'}
[1.975208] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.975287] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:17:32: Q000 Double quotes found but single quotes preferred\n'}
[1.975366] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.975458] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:17:52: E231 missing whitespace after ','\n"}
[1.975535] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.975686] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:17:100: E501 line too long (102 > 99 characters)\n'}
[1.975811] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.975898] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:18:23: E225 missing whitespace around operator\n'}
[1.975979] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.976059] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:18:43: Q000 Double quotes found but single quotes preferred\n'}
[1.976138] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.976217] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:19:1: W293 blank line contains whitespace\n'}
[1.976294] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.976371] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:20:32: Q000 Double quotes found but single quotes preferred\n'}
[1.976448] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.976525] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:20:50: E231 missing whitespace after ','\n"}
[1.976604] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.976682] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:20:51: Q000 Double quotes found but single quotes preferred\n'}
[1.976770] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.976855] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:21:25: E225 missing whitespace around operator\n'}
[1.976933] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.977009] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:21:45: Q000 Double quotes found but single quotes preferred\n'}
[1.977086] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.977163] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:22:1: W293 blank line contains whitespace\n'}
[1.977242] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.977319] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:23:32: Q000 Double quotes found but single quotes preferred\n'}
[1.977410] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.977489] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:23:47: E231 missing whitespace after ','\n"}
[1.977568] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.977645] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:23:48: Q000 Double quotes found but single quotes preferred\n'}
[1.977728] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.977905] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:24:23: E225 missing whitespace around operator\n'}
[1.978059] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.978145] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:24:43: Q000 Double quotes found but single quotes preferred\n'}
[1.978227] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.978309] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:29:100: E501 line too long (112 > 99 characters)\n'}
[1.978391] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.978471] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:38:9: E265 block comment should start with '# '\n"}
[1.978563] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.978644] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:39:55: E231 missing whitespace after ','\n"}
[1.978738] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.978831] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:43:5: E303 too many blank lines (2)\n'}
[1.978913] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.978990] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:43:28: E231 missing whitespace after ','\n"}
[1.979069] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.979146] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:47:1: W293 blank line contains whitespace\n'}
[1.979224] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.979301] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:48:15: E275 missing whitespace after keyword\n'}
[1.979379] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.979456] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:48:26: E203 whitespace before ':'\n"}
[1.979535] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.979613] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:49:13: E265 block comment should start with '# '\n"}
[1.979691] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.979784] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:49:27: W291 trailing whitespace\n'}
[1.979871] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.979949] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:50:19: W291 trailing whitespace\n'}
[1.980027] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.980104] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:51:100: E501 line too long (108 > 99 characters)\n'}
[1.980197] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.980277] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:56:1: W293 blank line contains whitespace\n'}
[1.980358] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.980439] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:60:9: E265 block comment should start with '# '\n"}
[1.980521] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.980601] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:60:100: E501 line too long (148 > 99 characters)\n'}
[1.980683] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.980775] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:61:9: E265 block comment should start with '# '\n"}
[1.980864] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.980945] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:61:100: E501 line too long (106 > 99 characters)\n'}
[1.981025] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.981105] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:62:100: E501 line too long (117 > 99 characters)\n'}
[1.981199] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.981281] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:62:118: W291 trailing whitespace\n'}
[1.981361] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.981441] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:64:67: W291 trailing whitespace\n'}
[1.981520] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.981598] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:65:88: W291 trailing whitespace\n'}
[1.981679] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.981787] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:75:18: E114 indentation is not a multiple of 4 (comment)\n'}
[1.981888] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.981971] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:75:18: E117 over-indented (comment)\n'}
[1.982053] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.982133] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:76:18: E111 indentation is not a multiple of 4\n'}
[1.982213] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.982292] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:76:18: E117 over-indented\n'}
[1.982371] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.982451] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:77:1: W293 blank line contains whitespace\n'}
[1.982531] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.982611] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:78:22: E111 indentation is not a multiple of 4\n'}
[1.982691] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.982781] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:78:100: E501 line too long (104 > 99 characters)\n'}
[1.982868] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.982948] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:86:100: W291 trailing whitespace\n'}
[1.983027] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.983105] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:87:29: E203 whitespace before ':'\n"}
[1.983186] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.983266] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:88:12: E111 indentation is not a multiple of 4\n'}
[1.983348] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.983428] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:88:100: E501 line too long (115 > 99 characters)\n'}
[1.983508] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.983589] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:89:12: E111 indentation is not a multiple of 4\n'}
[1.983667] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.983753] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:90:12: E111 indentation is not a multiple of 4\n'}
[1.983853] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.983936] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:90:29: E225 missing whitespace around operator\n'}
[1.984016] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.984095] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:91:12: E111 indentation is not a multiple of 4\n'}
[1.984175] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.984254] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:12: E111 indentation is not a multiple of 4\n'}
[1.984334] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.984413] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:35: F541 f-string is missing placeholders\n'}
[1.984493] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.984571] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:59: W291 trailing whitespace\n'}
[1.984651] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.984737] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:95:1: E302 expected 2 blank lines, found 1\n'}
[1.984830] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.984912] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:99:25: E261 at least two spaces before inline comment\n'}
[1.984992] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.985072] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:101:100: E501 line too long (100 > 99 characters)\n'}
[1.985151] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.985231] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:116:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[1.985310] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.985389] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:117:11: W291 trailing whitespace\n'}
[1.985468] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.985548] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:2:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[1.985631] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.985711] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:8:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import PythonExpression'\n"}
[1.985825] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.985909] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:13:20: E225 missing whitespace around operator\n'}
[1.985989] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.986067] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:17:83: E231 missing whitespace after ','\n"}
[1.986146] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.986225] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:17:92: E231 missing whitespace after ','\n"}
[1.986305] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.986384] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:17:100: E501 line too long (123 > 99 characters)\n'}
[1.986463] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.986542] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:18:85: E231 missing whitespace after ','\n"}
[1.986622] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.986701] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:18:94: E231 missing whitespace after ','\n"}
[1.986791] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.986875] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:18:100: E501 line too long (127 > 99 characters)\n'}
[1.986955] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987035] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:20:40: E231 missing whitespace after ','\n"}
[1.987115] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987194] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:20:100: E501 line too long (129 > 99 characters)\n'}
[1.987273] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987352] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:24:100: E501 line too long (103 > 99 characters)\n'}
[1.987431] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987509] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:25:21: E131 continuation line unaligned for hanging indent\n'}
[1.987588] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987666] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:26:37: E128 continuation line under-indented for visual indent\n'}
[1.987752] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987842] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:27:37: E128 continuation line under-indented for visual indent\n'}
[1.987932] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.988013] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:28:37: E128 continuation line under-indented for visual indent\n'}
[1.988093] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.988172] (articubot_one) StdoutLine: {'line': b"3: ./launch/camera.launch.py:1:1: F401 'os' imported but unused\n"}
[1.988252] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.988330] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:6:1: E302 expected 2 blank lines, found 1\n'}
[1.988412] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.988492] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:10:5: E303 too many blank lines (3)\n'}
[1.988573] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.988652] (articubot_one) StdoutLine: {'line': b"3: ./launch/camera.launch.py:18:35: E231 missing whitespace after ','\n"}
[1.988733] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.988826] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:22:5: E122 continuation line missing indentation or outdented\n'}
[1.988910] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.988990] (articubot_one) StdoutLine: {'line': b'3: from launch.substitutions import LaunchConfiguration\n'}
[1.989070] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.989149] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[1.989229] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.989308] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[1.989388] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.989467] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[1.989548] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.989627] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[1.989706] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.989797] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[1.989882] (articubot_one) StdoutLine: {'line': b'3:                                                                           ^\n'}
[1.989971] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[1.990054] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[1.990134] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[1.990215] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.990295] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel','/cmd_vel_joy')]\n"}
[1.990377] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[1.990456] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_in','/diff_cont/cmd_vel_unstamped'),\n"}
[1.990535] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[1.990614] (articubot_one) StdoutLine: {'line': b"3:                         ('/cmd_vel_out','/diff_cont/cmd_vel')]\n"}
[1.990694] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[1.990787] (articubot_one) StdoutLine: {'line': b'3:     return LaunchDescription([\n'}
[1.990877] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.990958] (articubot_one) StdoutLine: {'line': b'3:         twist_stamper       \n'}
[1.991040] (articubot_one) StdoutLine: {'line': b'3:                      ^\n'}
[1.991121] (articubot_one) StdoutLine: {'line': b'3:     ])      ^\n'}
[1.991202] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import RegisterEventHandler\n'}
[1.991294] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.991375] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[1.991455] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.991535] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[1.991616] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.991696] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[1.991790] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.991881] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[1.991962] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[1.992041] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[1.992123] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[1.992203] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[1.992286] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[1.992369] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[1.992451] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[1.992532] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[1.992612] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[1.992691] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[1.992800] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.992885] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[1.992967] (articubot_one) StdoutLine: {'line': b'3:                                                                              ^\n'}
[1.993047] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[1.993130] (articubot_one) StdoutLine: {'line': b'3:                                                                                       ^\n'}
[1.993211] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[1.993293] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.993375] (articubot_one) StdoutLine: {'line': b'3:             package="twist_mux",\n'}
[1.993457] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[1.993535] (articubot_one) StdoutLine: {'line': b'3:             executable="twist_mux",\n'}
[1.993614] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[1.993693] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]\n"}
[1.993785] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[1.993873] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[1.993953] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.994033] (articubot_one) StdoutLine: {'line': b"3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])\n"}
[1.994114] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.994193] (articubot_one) StdoutLine: {'line': b"3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])\n"}
[1.994282] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.994362] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[1.994442] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[1.994523] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[1.994603] (articubot_one) StdoutLine: {'line': b'3:                                                                                             ^\n'}
[1.994689] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[1.994782] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.994869] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[1.994950] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[1.995029] (articubot_one) StdoutLine: {'line': b'3:         executable="ros2_control_node",\n'}
[1.995109] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[1.995189] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[1.995270] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[1.995351] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[1.995432] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[1.995512] (articubot_one) StdoutLine: {'line': b'3:         arguments=["diff_cont"],\n'}
[1.995593] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[1.995672] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[1.995758] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[1.995848] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[1.995929] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[1.996009] (articubot_one) StdoutLine: {'line': b'3:         arguments=["joint_broad"],\n'}
[1.996090] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[1.996169] (articubot_one) StdoutLine: {'line': b"3:     # Code for delaying a node (I haven't tested how effective it is)\n"}
[1.996249] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.996328] (articubot_one) StdoutLine: {'line': b'3:     # \n'}
[1.996407] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[1.996486] (articubot_one) StdoutLine: {'line': b'3:     # Launch them all!\n'}
[1.996565] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.996644] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument\n'}
[1.996725] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.996872] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[1.996963] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.997045] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[1.997128] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.997209] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[1.997289] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.997369] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[1.997450] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[1.997543] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[1.997625] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[1.997707] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[1.997809] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[1.997896] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[1.997978] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[1.998059] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[1.998140] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[1.998221] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'\n"}
[1.998301] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[1.998382] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'\n"}
[1.998462] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[1.998543] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[1.998623] (articubot_one) StdoutLine: {'line': b'3:                                                                              ^\n'}
[1.998703] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[1.998806] (articubot_one) StdoutLine: {'line': b'3:                                                                                       ^\n'}
[1.998891] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[1.998972] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.999052] (articubot_one) StdoutLine: {'line': b'3:             package="twist_mux",\n'}
[1.999134] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[1.999216] (articubot_one) StdoutLine: {'line': b'3:             executable="twist_mux",\n'}
[1.999296] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[1.999376] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]\n"}
[1.999549] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[1.999630] (articubot_one) StdoutLine: {'line': b'3:     default_world = os.path.join(\n'}
[1.999711] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.999862] (articubot_one) StdoutLine: {'line': b'3:         )    \n'}
[1.999979] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[2.000090] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[2.000201] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.000310] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[2.000424] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[2.000534] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[2.000646] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.000771] (articubot_one) StdoutLine: {'line': b"3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.\n"}
[2.000899] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.001012] (articubot_one) StdoutLine: {'line': b'3:     diff_drive_spawner = Node(\n'}
[2.001123] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.001233] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[2.001344] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.001457] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[2.001568] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.001676] (articubot_one) StdoutLine: {'line': b'3:         arguments=["diff_cont"],\n'}
[2.001792] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.001910] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[2.002056] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.002250] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[2.002508] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.002665] (articubot_one) StdoutLine: {'line': b'3:         arguments=["joint_broad"],\n'}
[2.002841] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.003011] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.003171] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.003328] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.003488] (articubot_one) StdoutLine: {'line': b'3:                                                                           ^\n'}
[2.003642] (-) TimerEvent: {}
[2.003773] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.003958] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[2.004123] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.004282] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.004448] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[2.004609] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.004770] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[2.004925] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.005082] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_image",\n'}
[2.005240] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.005385] (articubot_one) StdoutLine: {'line': b'3:         executable="image_bridge",\n'}
[2.005539] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.005705] (articubot_one) StdoutLine: {'line': b'3:         arguments=["/camera/image_raw"]\n'}
[2.005885] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.006054] (articubot_one) StdoutLine: {'line': b"3:     # Code for delaying a node (I haven't tested how effective it is)\n"}
[2.006216] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.006366] (articubot_one) StdoutLine: {'line': b'3:     # \n'}
[2.006511] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[2.006639] (articubot_one) StdoutLine: {'line': b'3:     # Launch them all!\n'}
[2.006796] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.007067] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[2.007241] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.007455] (articubot_one) StdoutLine: {'line': b'3:     default_params_file = os.path.join(get_package_share_directory("articubot_one"),\n'}
[2.007660] (articubot_one) StdoutLine: {'line': b'3:                                                                    ^\n'}
[2.008163] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[2.008393] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.008594] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:3:1: I100 Import statements are in the wrong order. 'from launch.substitutions import LaunchConfiguration' should be before 'from launch_ros.actions import Node'\n"}
[2.008809] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.009007] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:4:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration'\n"}
[2.009198] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.009383] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:6:1: I100 Import statements are in the wrong order. 'import os' should be before 'from launch.actions import DeclareLaunchArgument' and in a different group.\n"}
[2.009561] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.009737] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:7:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[2.009941] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.010115] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:9:1: E302 expected 2 blank lines, found 1\n'}
[2.010291] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.010465] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:12:75: E231 missing whitespace after ','\n"}
[2.010640] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.010841] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:12:84: E231 missing whitespace after ','\n"}
[2.011047] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.011217] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:12:100: E501 line too long (100 > 99 characters)\n'}
[2.011387] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.011565] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:25:36: E231 missing whitespace after ','\n"}
[2.011739] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.011943] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:32:39: E231 missing whitespace after ','\n"}
[2.012127] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.012299] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:33:40: E231 missing whitespace after ','\n"}
[2.012476] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.012652] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:37:5: E303 too many blank lines (2)\n'}
[2.012856] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.013050] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:44:22: W291 trailing whitespace\n'}
[2.013231] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.013408] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:45:7: W292 no newline at end of file\n'}
[2.013586] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.013771] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:10:1: I100 Import statements are in the wrong order. 'from launch.actions import RegisterEventHandler' should be before 'from launch.substitutions import Command'\n"}
[2.013956] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.014130] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:17:1: E303 too many blank lines (3)\n'}
[2.014402] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.014598] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:20:5: E303 too many blank lines (2)\n'}
[2.014799] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.014998] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:20:100: E501 line too long (110 > 99 characters)\n'}
[2.015200] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.015383] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:23:17: E225 missing whitespace around operator\n'}
[2.015573] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.015775] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:23:33: E261 at least two spaces before inline comment\n'}
[2.015978] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.016169] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:23:34: E262 inline comment should start with '# '\n"}
[2.016362] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.016551] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:27:62: E231 missing whitespace after ','\n"}
[2.016738] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.017012] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:27:71: E231 missing whitespace after ','\n"}
[2.017197] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.017381] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:38:5: E303 too many blank lines (2)\n'}
[2.017567] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.017761] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:38:78: E231 missing whitespace after ','\n"}
[2.017960] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.018147] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:38:87: E231 missing whitespace after ','\n"}
[2.018330] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.018511] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:38:100: E501 line too long (104 > 99 characters)\n'}
[2.018696] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.018903] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:40:21: Q000 Double quotes found but single quotes preferred\n'}
[2.019094] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.019275] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:41:24: Q000 Double quotes found but single quotes preferred\n'}
[2.019452] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.019632] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:43:40: E231 missing whitespace after ','\n"}
[2.019833] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.020024] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:46:1: W293 blank line contains whitespace\n'}
[2.020189] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.020350] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:49:5: E303 too many blank lines (4)\n'}
[2.020518] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.020684] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:49:100: E501 line too long (104 > 99 characters)\n'}
[2.020883] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.021056] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:51:84: E231 missing whitespace after ','\n"}
[2.021235] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.021411] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:51:93: E231 missing whitespace after ','\n"}
[2.021598] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.021890] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:51:100: E501 line too long (115 > 99 characters)\n'}
[2.022096] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.022299] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:54:17: Q000 Double quotes found but single quotes preferred\n'}
[2.022496] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.022692] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:55:20: Q000 Double quotes found but single quotes preferred\n'}
[2.022920] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.023117] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:63:17: Q000 Double quotes found but single quotes preferred\n'}
[2.023322] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.023515] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:64:20: Q000 Double quotes found but single quotes preferred\n'}
[2.023713] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.023934] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:65:20: Q000 Double quotes found but single quotes preferred\n'}
[2.024139] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.024331] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:76:17: Q000 Double quotes found but single quotes preferred\n'}
[2.024498] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.024660] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:77:20: Q000 Double quotes found but single quotes preferred\n'}
[2.024843] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.025020] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:78:20: Q000 Double quotes found but single quotes preferred\n'}
[2.025208] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.025379] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:89:5: E303 too many blank lines (2)\n'}
[2.025554] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.025722] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:90:6: W291 trailing whitespace\n'}
[2.025966] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.026197] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:107:5: E303 too many blank lines (3)\n'}
[2.026428] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.026657] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[2.026917] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.027157] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:15:1: E303 too many blank lines (3)\n'}
[2.027392] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.027626] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:18:5: E303 too many blank lines (2)\n'}
[2.027886] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.028077] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:18:100: E501 line too long (110 > 99 characters)\n'}
[2.028290] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.028498] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:21:17: E225 missing whitespace around operator\n'}
[2.028705] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.028934] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:21:33: E261 at least two spaces before inline comment\n'}
[2.029144] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.029453] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:21:34: E262 inline comment should start with '# '\n"}
[2.029843] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.030052] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:25:62: E231 missing whitespace after ','\n"}
[2.030248] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.030439] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:25:71: E231 missing whitespace after ','\n"}
[2.030633] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.030843] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:31:62: E231 missing whitespace after ','\n"}
[2.031042] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.031235] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:31:71: E231 missing whitespace after ','\n"}
[2.031428] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.031620] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:35:78: E231 missing whitespace after ','\n"}
[2.031821] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.032002] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:35:87: E231 missing whitespace after ','\n"}
[2.032182] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.032352] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:35:100: E501 line too long (104 > 99 characters)\n'}
[2.032523] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.032694] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:37:21: Q000 Double quotes found but single quotes preferred\n'}
[2.032896] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.033070] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:38:24: Q000 Double quotes found but single quotes preferred\n'}
[2.033241] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.033410] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:40:40: E231 missing whitespace after ','\n"}
[2.033581] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.033760] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:44:5: E303 too many blank lines (2)\n'}
[2.033945] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.034116] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:48:10: W291 trailing whitespace\n'}
[2.034286] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.034456] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:49:1: W293 blank line contains whitespace\n'}
[2.034626] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.034810] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:62:21: E131 continuation line unaligned for hanging indent\n'}
[2.034990] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.035160] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:62:100: E501 line too long (104 > 99 characters)\n'}
[2.035331] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.035501] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:65:100: E501 line too long (126 > 99 characters)\n'}
[2.035671] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.035830] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:73:5: E303 too many blank lines (2)\n'}
[2.035939] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.036040] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:74:17: Q000 Double quotes found but single quotes preferred\n'}
[2.036139] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.036237] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:75:20: Q000 Double quotes found but single quotes preferred\n'}
[2.036335] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.036432] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:76:20: Q000 Double quotes found but single quotes preferred\n'}
[2.036532] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.036722] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:80:17: Q000 Double quotes found but single quotes preferred\n'}
[2.036907] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.037062] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:81:20: Q000 Double quotes found but single quotes preferred\n'}
[2.037215] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.037368] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:82:20: Q000 Double quotes found but single quotes preferred\n'}
[2.037517] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.037673] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:86:5: E303 too many blank lines (2)\n'}
[2.037877] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.038078] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:86:75: E231 missing whitespace after ','\n"}
[2.038273] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.038463] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:86:84: E231 missing whitespace after ','\n"}
[2.038655] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.038868] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:86:100: E501 line too long (101 > 99 characters)\n'}
[2.039079] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.039291] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:88:17: Q000 Double quotes found but single quotes preferred\n'}
[2.039463] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.039632] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:89:20: Q000 Double quotes found but single quotes preferred\n'}
[2.039823] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.040002] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:98:17: Q000 Double quotes found but single quotes preferred\n'}
[2.040173] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.040343] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:99:20: Q000 Double quotes found but single quotes preferred\n'}
[2.040513] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.040683] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:100:20: Q000 Double quotes found but single quotes preferred\n'}
[2.040875] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.041048] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:105:5: E303 too many blank lines (3)\n'}
[2.041219] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.041388] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:106:6: W291 trailing whitespace\n'}
[2.041558] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.041728] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:123:5: E303 too many blank lines (3)\n'}
[2.041895] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.042002] (articubot_one) StdoutLine: {'line': b"3: ./launch/online_async_launch.py:8:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'from launch_ros.actions import Node'\n"}
[2.042106] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.042248] (articubot_one) StdoutLine: {'line': b'3: ./launch/online_async_launch.py:15:68: Q000 Double quotes found but single quotes preferred\n'}
[2.042351] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.042450] (articubot_one) StdoutLine: {'line': b"3: ./launch/rplidar.launch.py:1:1: F401 'os' imported but unused\n"}
[2.042549] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.042647] (articubot_one) StdoutLine: {'line': b"3: ./launch/rplidar.launch.py:2:1: I201 Missing newline between import groups. 'from launch import LaunchDescription' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[2.042756] (articubot_one) StdoutLine: {'line': b'3: from launch import LaunchDescription\n'}
[2.042870] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.042969] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[2.043067] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.043163] (articubot_one) StdoutLine: {'line': b"3:                 'serial_port': '/dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.3:1.0-port0',\n"}
[2.043263] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.043361] (articubot_one) StdoutLine: {'line': b'3: from launch.substitutions import LaunchConfiguration, Command\n'}
[2.043457] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.043604] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[2.043795] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.043993] (articubot_one) StdoutLine: {'line': b'3: import xacro\n'}
[2.044282] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.044507] (articubot_one) StdoutLine: {'line': b"3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')\n"}
[2.044729] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[2.044951] (articubot_one) StdoutLine: {'line': b"3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')\n"}
[2.045148] (articubot_one) StdoutLine: {'line': b'3:                                                     ^\n'}
[2.045344] (articubot_one) StdoutLine: {'line': b"3:     robot_description_config = Command(['xacro ', xacro_file, ' use_ros2_control:=', use_ros2_control, ' sim_mode:=', use_sim_time])\n"}
[2.045536] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.045736] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[2.045969] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.046161] (articubot_one) StdoutLine: {'line': b'3:     # Launch!\n'}
[2.046390] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.046587] (articubot_one) StdoutLine: {'line': b'3: import xacro\n'}
[2.046761] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.046945] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[2.047112] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.047350] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument\n'}
[2.047594] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.047810] (articubot_one) StdoutLine: {'line': b'3: from launch.conditions import IfCondition, UnlessCondition\n'}
[2.048007] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.048149] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[2.048255] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.048354] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[2.048455] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.048554] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.048653] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.048767] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.048888] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[2.048988] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.049088] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[2.049187] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[2.049287] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[2.049384] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[2.049541] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[2.049726] (articubot_one) StdoutLine: {'line': b'3:         )    \n'}
[2.049853] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[2.049957] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[2.050056] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.050156] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[2.050257] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[2.050355] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[2.050456] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.050555] (articubot_one) StdoutLine: {'line': b"3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.\n"}
[2.050668] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.050779] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.050886] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.050985] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[2.051083] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[2.051191] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[2.051291] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[2.051389] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[2.051487] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[2.051707] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[2.051912] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[2.052109] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[2.052303] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.052496] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.052689] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.052909] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.053107] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[2.053299] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[2.053497] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[2.053690] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[2.053902] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[2.054078] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[2.054249] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[2.054420] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[2.054591] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[2.054770] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.054952] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.055123] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.055293] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.055464] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[2.055636] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[2.055798] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[2.055912] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[2.056014] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[2.056113] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[2.056211] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[2.056311] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[2.056409] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[2.056507] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.056604] (articubot_one) StdoutLine: {'line': b'3:        \n'}
[2.056700] (articubot_one) StdoutLine: {'line': b'3:                                                                                            ^\n'}
[2.056830] (articubot_one) StdoutLine: {'line': b"3:     package='ros_gz_bridge',\n"}
[2.056935] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.057033] (articubot_one) StdoutLine: {'line': b"3:     executable='parameter_bridge',\n"}
[2.057129] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.057226] (articubot_one) StdoutLine: {'line': b'3:     arguments=[\n'}
[2.057323] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.057420] (articubot_one) StdoutLine: {'line': b"3:           '/odom@nav_msgs/msg/Odometry@gz.msgs.Odometry',\n"}
[2.057536] (articubot_one) StdoutLine: {'line': b'3:           ^\n'}
[2.057633] (articubot_one) StdoutLine: {'line': b"3:          '/scan@sensor_msgs/msg/LaserScan@gz.msgs.LaserScan',\n"}
[2.057730] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[2.057844] (articubot_one) StdoutLine: {'line': b"3:     output='screen'\n"}
[2.057944] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.058041] (articubot_one) StdoutLine: {'line': b'3: )\n'}
[2.058139] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.058265] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_image",\n'}
[2.058363] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.058459] (articubot_one) StdoutLine: {'line': b'3:         executable="image_bridge",\n'}
[2.058556] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.058651] (articubot_one) StdoutLine: {'line': b'3:         arguments=["/camera/image_raw"]\n'}
[2.058755] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.058873] (articubot_one) StdoutLine: {'line': b'3:     #Adding rviz plugin\n'}
[2.059071] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.059220] (articubot_one) StdoutLine: {'line': b"3:     share_dir=get_package_share_directory('articubot_one')\n"}
[2.059428] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[2.059621] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[2.059832] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.060037] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[2.060230] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.060422] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[2.060618] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.060835] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[2.061036] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.061233] (articubot_one) StdoutLine: {'line': b'3: from sensor_msgs.msg import LaserScan\n'}
[2.061426] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.061600] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[2.061781] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.061965] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[2.062137] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.062307] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[2.062478] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[2.062648] (articubot_one) StdoutLine: {'line': b'3: from articubot_one.obstacle_avoidance import Obstacle \n'}
[2.062837] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.063012] (articubot_one) StdoutLine: {'line': b'3: from articubot_one.obstacle_avoidance import Obstacle \n'}
[2.063183] (articubot_one) StdoutLine: {'line': b'3:                                                      ^\n'}
[2.063354] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[2.063525] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.063695] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[2.063843] (articubot_one) StdoutLine: {'line': b'3:        ^\n'}
[2.063950] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[2.064050] (articubot_one) StdoutLine: {'line': b'3:             ^\n'}
[2.064152] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[2.064255] (articubot_one) StdoutLine: {'line': b'3:                               ^\n'}
[2.064356] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[2.064456] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[2.064556] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[2.064655] (articubot_one) StdoutLine: {'line': b'3:                            ^\n'}
[2.064770] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[2.064887] (articubot_one) StdoutLine: {'line': b'3:                                                                          ^\n'}
[2.064998] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[2.065096] (articubot_one) StdoutLine: {'line': b'3:                            ^\n'}
[2.065194] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[2.065293] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[2.065392] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[2.065491] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.065589] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[2.065686] (articubot_one) StdoutLine: {'line': b'3:        ^\n'}
[2.065801] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[2.065907] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[2.066005] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[2.066105] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.066203] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[2.066301] (articubot_one) StdoutLine: {'line': b'3:        ^\n'}
[2.066489] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[2.066624] (articubot_one) StdoutLine: {'line': b'3:             ^\n'}
[2.066796] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[2.066971] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[2.067128] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[2.067298] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[2.067462] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[2.067621] (articubot_one) StdoutLine: {'line': b'3:                   ^\n'}
[2.067791] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[2.067972] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[2.068129] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[2.068289] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[2.068446] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[2.068603] (articubot_one) StdoutLine: {'line': b'3:                                      ^\n'}
[2.068773] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[2.068975] (articubot_one) StdoutLine: {'line': b'3:                           ^\n'}
[2.069149] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[2.069323] (articubot_one) StdoutLine: {'line': b'3:                                               ^\n'}
[2.069496] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[2.069669] (articubot_one) StdoutLine: {'line': b'3:                                                    ^\n'}
[2.069860] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[2.070038] (articubot_one) StdoutLine: {'line': b'3:                                                             ^\n'}
[2.070212] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.070417] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[2.070592] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.070779] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[2.070965] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.071140] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[2.071324] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.071496] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[2.071668] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.071857] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[2.072035] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[2.072207] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[2.072378] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[2.072550] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[2.072721] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[2.072916] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[2.073092] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[2.073265] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[2.073437] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[2.073609] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[2.073794] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[2.074043] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[2.074176] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[2.074372] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[2.074567] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[2.074792] (articubot_one) StdoutLine: {'line': b'3:                                                    ^\n'}
[2.075002] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[2.075197] (articubot_one) StdoutLine: {'line': b'3:                                                     ^\n'}
[2.075392] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[2.075589] (articubot_one) StdoutLine: {'line': b'3:                                                               ^\n'}
[2.075798] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[2.076001] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[2.076197] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.076387] (articubot_one) StdoutLine: {'line': b'3: ./launch/rplidar.launch.py:5:1: E302 expected 2 blank lines, found 1\n'}
[2.076562] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.076734] (articubot_one) StdoutLine: {'line': b'3: ./launch/rplidar.launch.py:14:100: E501 line too long (113 > 99 characters)\n'}
[2.076929] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.077104] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:6:1: I101 Imported names are in the wrong order. Should be Command, LaunchConfiguration\n'}
[2.077277] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.077448] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:7:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration, Command'\n"}
[2.077631] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.077826] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:10:1: F401 'xacro' imported but unused\n"}
[2.078007] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.078179] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:21:39: E231 missing whitespace after ','\n"}
[2.078351] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.078522] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:21:53: E231 missing whitespace after ','\n"}
[2.078694] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.078839] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:23:100: E501 line too long (132 > 99 characters)\n'}
[2.078947] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.079047] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:24:1: W293 blank line contains whitespace\n'}
[2.079147] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.079246] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:35:5: E303 too many blank lines (2)\n'}
[2.079345] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.079443] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:2:1: I201 Missing newline between import groups. 'import xacro' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[2.079545] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.079672] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:3:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'import xacro'\n"}
[2.079789] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.079897] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[2.079998] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.080096] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:12:1: I100 Import statements are in the wrong order. 'from launch.conditions import IfCondition, UnlessCondition' should be before 'from launch_ros.actions import Node'\n"}
[2.080198] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.080296] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:18:5: E303 too many blank lines (2)\n'}
[2.080394] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.080493] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:18:100: E501 line too long (110 > 99 characters)\n'}
[2.080594] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.080692] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:21:17: E225 missing whitespace around operator\n'}
[2.080822] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.080929] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:21:33: E261 at least two spaces before inline comment\n'}
[2.081029] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.081127] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:21:34: E262 inline comment should start with '# '\n"}
[2.081257] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.081466] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:25:62: E231 missing whitespace after ','\n"}
[2.081656] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.081868] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:25:71: E231 missing whitespace after ','\n"}
[2.082075] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.082263] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:33:10: W291 trailing whitespace\n'}
[2.082457] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.082653] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:34:1: W293 blank line contains whitespace\n'}
[2.082874] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.083074] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:47:21: E131 continuation line unaligned for hanging indent\n'}
[2.083280] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.083476] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:47:100: E501 line too long (104 > 99 characters)\n'}
[2.083674] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.083883] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:50:100: E501 line too long (126 > 99 characters)\n'}
[2.084060] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.084232] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:58:5: Q001 Single quote multiline found but double quotes preferred\n'}
[2.084405] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.084576] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:58:5: E303 too many blank lines (2)\n'}
[2.084757] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.084944] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:59:100: E501 line too long (101 > 99 characters)\n'}
[2.085117] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.085287] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:72:5: E122 continuation line missing indentation or outdented\n'}
[2.085459] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.085630] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:73:5: E122 continuation line missing indentation or outdented\n'}
[2.085801] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.085915] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:74:5: E122 continuation line missing indentation or outdented\n'}
[2.086017] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.086117] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:77:11: E131 continuation line unaligned for hanging indent\n'}
[2.086218] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.086316] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:78:10: E131 continuation line unaligned for hanging indent\n'}
[2.086415] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.086513] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:81:5: E122 continuation line missing indentation or outdented\n'}
[2.086612] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.086710] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:82:1: E122 continuation line missing indentation or outdented\n'}
[2.086828] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.086931] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:85:17: Q000 Double quotes found but single quotes preferred\n'}
[2.087046] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.087144] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:86:20: Q000 Double quotes found but single quotes preferred\n'}
[2.087244] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.087342] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:87:20: Q000 Double quotes found but single quotes preferred\n'}
[2.087439] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.087537] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:89:5: E265 block comment should start with '# '\n"}
[2.087641] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.087742] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:90:14: E225 missing whitespace around operator\n'}
[2.087860] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.087961] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:96:1: W293 blank line contains whitespace\n'}
[2.088061] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.088160] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:136:1: W293 blank line contains whitespace\n'}
[2.088260] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.088357] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:140:1: W293 blank line contains whitespace\n'}
[2.088456] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.088555] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:144:1: W293 blank line contains whitespace\n'}
[2.088661] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.088903] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:5:1: F401 'sensor_msgs.msg.LaserScan' imported but unused\n"}
[2.089075] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.089233] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:6:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[2.089396] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.089549] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:6:1: F401 'geometry_msgs.msg.Twist' imported but unused\n"}
[2.089710] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.089901] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:6:36: W291 trailing whitespace\n'}
[2.090058] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.090209] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:8:1: I100 Import statements are in the wrong order. 'from articubot_one.obstacle_avoidance import Obstacle' should be before 'from geometry_msgs.msg import Twist'\n"}
[2.090405] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.090553] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:8:54: W291 trailing whitespace\n'}
[2.090709] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.090933] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:10:1: E302 expected 2 blank lines, found 1\n'}
[2.091129] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.091496] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:12:8: E203 whitespace before ':'\n"}
[2.091700] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.091953] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:13:13: E225 missing whitespace around operator\n'}
[2.092068] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.092172] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:15:31: E225 missing whitespace around operator\n'}
[2.092274] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.092374] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:15:33: Q000 Double quotes found but single quotes preferred\n'}
[2.092474] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.092572] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:17:28: E231 missing whitespace after ','\n"}
[2.092671] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.092791] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:19:74: W291 trailing whitespace\n'}
[2.092902] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.093002] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:20:28: E231 missing whitespace after ','\n"}
[2.093102] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.093200] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:22:12: E203 whitespace before ':'\n"}
[2.093300] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.093398] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:24:1: E302 expected 2 blank lines, found 0\n'}
[2.093496] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.093594] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:26:8: E203 whitespace before ':'\n"}
[2.093693] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.093816] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:28:12: E203 whitespace before ':'\n"}
[2.093922] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.094020] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:30:1: E302 expected 2 blank lines, found 0\n'}
[2.094119] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.094217] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:32:8: E203 whitespace before ':'\n"}
[2.094325] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.094421] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:33:13: E225 missing whitespace around operator\n'}
[2.094519] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.094615] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:34:9: E265 block comment should start with '# '\n"}
[2.094714] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.094827] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:35:18: E225 missing whitespace around operator\n'}
[2.094930] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.095027] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:36:19: E225 missing whitespace around operator\n'}
[2.095125] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.095222] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:36:39: Q000 Double quotes found but single quotes preferred\n'}
[2.095319] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.095416] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:18: E225 missing whitespace around operator\n'}
[2.095513] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.095610] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:38: Q000 Double quotes found but single quotes preferred\n'}
[2.095708] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.095822] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:38:27: E225 missing whitespace around operator\n'}
[2.095924] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.096023] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:38:47: Q000 Double quotes found but single quotes preferred\n'}
[2.096121] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.096327] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:39:52: W291 trailing whitespace\n'}
[2.096477] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.096632] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:40:61: W291 trailing whitespace\n'}
[2.096801] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.096972] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:41:36: E231 missing whitespace after ','\n"}
[2.097138] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.097301] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:41:43: E203 whitespace before ','\n"}
[2.097456] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.097609] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:41:44: E231 missing whitespace after ','\n"}
[2.097779] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.097935] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:41:45: Q000 Double quotes found but single quotes preferred\n'}
[2.098084] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.098235] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:41:45: F541 f-string is missing placeholders\n'}
[2.098393] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.098547] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:42:37: E231 missing whitespace after ','\n"}
[2.098880] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.099100] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:42:44: Q000 Double quotes found but single quotes preferred\n'}
[2.099283] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.099455] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:42:44: F541 f-string is missing placeholders\n'}
[2.099629] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.099801] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:43:36: E231 missing whitespace after ','\n"}
[2.099916] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.100026] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:43:43: Q000 Double quotes found but single quotes preferred\n'}
[2.100126] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.100306] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:43:43: F541 f-string is missing placeholders\n'}
[2.100411] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.100510] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:44:45: E231 missing whitespace after ','\n"}
[2.100610] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.100709] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:44:52: E231 missing whitespace after ','\n"}
[2.100845] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.100949] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:44:53: F541 f-string is missing placeholders\n'}
[2.101048] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.101145] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:45:63: W291 trailing whitespace\n'}
[2.101243] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.101340] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:47:26: E225 missing whitespace around operator\n'}
[2.101438] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.101536] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[2.101635] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[2.101733] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[2.101854] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[2.101957] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[2.102055] (articubot_one) StdoutLine: {'line': b'3:                                          ^\n'}
[2.102152] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[2.102249] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[2.102346] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[2.102444] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[2.102542] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[2.102640] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[2.102738] (articubot_one) StdoutLine: {'line': b'3: 7     E111 indentation is not a multiple of 4\n'}
[2.102858] (articubot_one) StdoutLine: {'line': b'3: 1     E114 indentation is not a multiple of 4 (comment)\n'}
[2.102959] (articubot_one) StdoutLine: {'line': b'3: 2     E117 over-indented (comment)\n'}
[2.103058] (articubot_one) StdoutLine: {'line': b'3: 6     E122 continuation line missing indentation or outdented\n'}
[2.103155] (articubot_one) StdoutLine: {'line': b'3: 3     E128 continuation line under-indented for visual indent\n'}
[2.103253] (articubot_one) StdoutLine: {'line': b'3: 5     E131 continuation line unaligned for hanging indent\n'}
[2.103352] (articubot_one) StdoutLine: {'line': b"3: 11    E203 whitespace before ':'\n"}
[2.103452] (articubot_one) StdoutLine: {'line': b'3: 18    E225 missing whitespace around operator\n'}
[2.103549] (articubot_one) StdoutLine: {'line': b"3: 44    E231 missing whitespace after ','\n"}
[2.103775] (-) TimerEvent: {}
[2.103910] (articubot_one) StdoutLine: {'line': b'3: 4     E261 at least two spaces before inline comment\n'}
[2.104119] (articubot_one) StdoutLine: {'line': b"3: 3     E262 inline comment should start with '# '\n"}
[2.104302] (articubot_one) StdoutLine: {'line': b"3: 6     E265 block comment should start with '# '\n"}
[2.104528] (articubot_one) StdoutLine: {'line': b'3: 1     E275 missing whitespace after keyword\n'}
[2.104722] (articubot_one) StdoutLine: {'line': b'3: 7     E302 expected 2 blank lines, found 1\n'}
[2.104965] (articubot_one) StdoutLine: {'line': b'3: 19    E303 too many blank lines (2)\n'}
[2.105184] (articubot_one) StdoutLine: {'line': b'3: 1     E305 expected 2 blank lines after class or function definition, found 1\n'}
[2.105405] (articubot_one) StdoutLine: {'line': b'3: 30    E501 line too long (110 > 99 characters)\n'}
[2.105589] (articubot_one) StdoutLine: {'line': b"3: 5     F401 'os' imported but unused\n"}
[2.105785] (articubot_one) StdoutLine: {'line': b'3: 5     F541 f-string is missing placeholders\n'}
[2.105994] (articubot_one) StdoutLine: {'line': b"3: 13    I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[2.106186] (articubot_one) StdoutLine: {'line': b'3: 3     I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[2.106423] (articubot_one) StdoutLine: {'line': b"3: 5     I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.\n"}
[2.106774] (articubot_one) StdoutLine: {'line': b'3: 45    Q000 Double quotes found but single quotes preferred\n'}
[2.106989] (articubot_one) StdoutLine: {'line': b'3: 1     Q001 Single quote multiline found but double quotes preferred\n'}
[2.107192] (articubot_one) StdoutLine: {'line': b'3: 22    W291 trailing whitespace\n'}
[2.107310] (articubot_one) StdoutLine: {'line': b'3: 1     W292 no newline at end of file\n'}
[2.107413] (articubot_one) StdoutLine: {'line': b'3: 14    W293 blank line contains whitespace\n'}
[2.107514] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:47:29: Q000 Double quotes found but single quotes preferred\n'}
[2.107626] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.107728] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:48:29: Q000 Double quotes found but single quotes preferred\n'}
[2.107862] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.107964] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:49:42: W291 trailing whitespace\n'}
[2.108064] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.108164] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:50:12: E203 whitespace before ':'\n"}
[2.108264] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.108363] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:54:12: E225 missing whitespace around operator\n'}
[2.108463] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.108671] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:54:24: E203 whitespace before ':'\n"}
[2.108844] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.108952] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.109091] (articubot_one) StdoutLine: {'line': b'3: 15 files checked\n'}
[2.109196] (articubot_one) StdoutLine: {'line': b'3: 282 errors\n'}
[2.109297] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.109397] (articubot_one) StdoutLine: {'line': b"3: 'E'-type errors: 168\n"}
[2.109522] (articubot_one) StdoutLine: {'line': b"3: 'F'-type errors: 10\n"}
[2.109688] (articubot_one) StdoutLine: {'line': b"3: 'I'-type errors: 21\n"}
[2.109851] (articubot_one) StdoutLine: {'line': b"3: 'Q'-type errors: 46\n"}
[2.109959] (articubot_one) StdoutLine: {'line': b"3: 'W'-type errors: 37\n"}
[2.110061] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.110161] (articubot_one) StdoutLine: {'line': b'3: Checked files:\n'}
[2.110262] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.110361] (articubot_one) StdoutLine: {'line': b'3: * ./setup.py\n'}
[2.110460] (articubot_one) StdoutLine: {'line': b'3: * ./test/pytest/test_laserObstacle.py\n'}
[2.110558] (articubot_one) StdoutLine: {'line': b'3: * ./articubot_one/obstacle_avoidance.py\n'}
[2.110657] (articubot_one) StdoutLine: {'line': b'3: * ./articubot_one/__init__.py\n'}
[2.111304] (articubot_one) StdoutLine: {'line': b'3: * ./launch/joystick.launch.py\n'}
[2.111648] (articubot_one) StdoutLine: {'line': b'3: * ./launch/online_async_launch.py\n'}
[2.111938] (articubot_one) StdoutLine: {'line': b'3: * ./launch/ball_tracker.launch.py\n'}
[2.112156] (articubot_one) StdoutLine: {'line': b'3: * ./launch/localization_launch.py\n'}
[2.112369] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rviz_gazebo.launch.py\n'}
[2.112610] (articubot_one) StdoutLine: {'line': b'3: * ./launch/navigation_launch.py\n'}
[2.112857] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rsp.launch.py\n'}
[2.113065] (articubot_one) StdoutLine: {'line': b'3: * ./launch/launch_robot.launch.py\n'}
[2.113249] (articubot_one) StdoutLine: {'line': b'3: * ./launch/camera.launch.py\n'}
[2.113453] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rplidar.launch.py\n'}
[2.113637] (articubot_one) StdoutLine: {'line': b'3: * ./launch/launch_sim.launch.py\n'}
[2.113883] (articubot_one) StdoutLine: {'line': b'3: -- run_test.py: return code 1\n'}
[2.114063] (articubot_one) StdoutLine: {'line': b"3: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml'\n"}
[2.114237] (articubot_one) StdoutLine: {'line': b'3/6 Test #3: flake8 ...........................***Failed    0.58 sec\n'}
[2.114425] (articubot_one) StdoutLine: {'line': b'test 4\n'}
[2.114658] (articubot_one) StdoutLine: {'line': b'    Start 4: lint_cmake\n'}
[2.114928] (articubot_one) StdoutLine: {'line': b'\n'}
[2.115122] (articubot_one) StdoutLine: {'line': b'4: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/jazzy/bin/ament_lint_cmake" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml"\n'}
[2.115313] (articubot_one) StdoutLine: {'line': b'4: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[2.115483] (articubot_one) StdoutLine: {'line': b'4: Test timeout computed to be: 60\n'}
[2.133620] (articubot_one) StdoutLine: {'line': b"4: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[2.133988] (articubot_one) StdoutLine: {'line': b'4:  - /opt/ros/jazzy/bin/ament_lint_cmake --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml\n'}
[2.203877] (-) TimerEvent: {}
[2.236022] (articubot_one) StdoutLine: {'line': b'4: CMakeLists.txt:40: Line ends in whitespace [whitespace/eol]\n'}
[2.236196] (articubot_one) StdoutLine: {'line': b'4: CMakeLists.txt:55: Line ends in whitespace [whitespace/eol]\n'}
[2.236292] (articubot_one) StdoutLine: {'line': b'4: \n'}
[2.236380] (articubot_one) StdoutLine: {'line': b'4: \n'}
[2.236464] (articubot_one) StdoutLine: {'line': b'4: 2 errors\n'}
[2.251774] (articubot_one) StdoutLine: {'line': b'4: -- run_test.py: return code 1\n'}
[2.252110] (articubot_one) StdoutLine: {'line': b"4: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml'\n"}
[2.267013] (articubot_one) StdoutLine: {'line': b'4/6 Test #4: lint_cmake .......................***Failed    0.24 sec\n'}
[2.267304] (articubot_one) StdoutLine: {'line': b'test 5\n'}
[2.267402] (articubot_one) StdoutLine: {'line': b'    Start 5: pep257\n'}
[2.267547] (articubot_one) StdoutLine: {'line': b'\n'}
[2.267764] (articubot_one) StdoutLine: {'line': b'5: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_pep257/pep257.txt" "--command" "/opt/ros/jazzy/bin/ament_pep257" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml"\n'}
[2.267921] (articubot_one) StdoutLine: {'line': b'5: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[2.268038] (articubot_one) StdoutLine: {'line': b'5: Test timeout computed to be: 60\n'}
[2.303969] (-) TimerEvent: {}
[2.348676] (articubot_one) StdoutLine: {'line': b"5: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[2.348895] (articubot_one) StdoutLine: {'line': b'5:  - /opt/ros/jazzy/bin/ament_pep257 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml\n'}
[2.404065] (-) TimerEvent: {}
[2.504346] (-) TimerEvent: {}
[2.550644] (articubot_one) StdoutLine: {'line': b'5: checking ./articubot_one/__init__.py\n'}
[2.550927] (articubot_one) StdoutLine: {'line': b'5: checking ./articubot_one/obstacle_avoidance.py\n'}
[2.551089] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/ball_tracker.launch.py\n'}
[2.551246] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/camera.launch.py\n'}
[2.551387] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/joystick.launch.py\n'}
[2.551518] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/launch_robot.launch.py\n'}
[2.551654] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/launch_sim.launch.py\n'}
[2.551847] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/localization_launch.py\n'}
[2.552048] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/navigation_launch.py\n'}
[2.552220] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/online_async_launch.py\n'}
[2.552363] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rplidar.launch.py\n'}
[2.552505] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rsp.launch.py\n'}
[2.552651] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rviz_gazebo.launch.py\n'}
[2.552808] (articubot_one) StdoutLine: {'line': b'5: checking ./setup.py\n'}
[2.552966] (articubot_one) StdoutLine: {'line': b'5: checking ./test/pytest/test_laserObstacle.py\n'}
[2.553109] (articubot_one) StdoutLine: {'line': b'5: No problems found\n'}
[2.575099] (articubot_one) StdoutLine: {'line': b'5: -- run_test.py: return code 0\n'}
[2.575391] (articubot_one) StdoutLine: {'line': b"5: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml'\n"}
[2.588772] (articubot_one) StdoutLine: {'line': b'5/6 Test #5: pep257 ...........................   Passed    0.32 sec\n'}
[2.589126] (articubot_one) StdoutLine: {'line': b'test 6\n'}
[2.589338] (articubot_one) StdoutLine: {'line': b'    Start 6: xmllint\n'}
[2.589447] (articubot_one) StdoutLine: {'line': b'\n'}
[2.589536] (articubot_one) StdoutLine: {'line': b'6: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_xmllint/xmllint.txt" "--command" "/opt/ros/jazzy/bin/ament_xmllint" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml"\n'}
[2.589629] (articubot_one) StdoutLine: {'line': b'6: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[2.589713] (articubot_one) StdoutLine: {'line': b'6: Test timeout computed to be: 60\n'}
[2.604481] (-) TimerEvent: {}
[2.673586] (articubot_one) StdoutLine: {'line': b"6: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[2.673825] (articubot_one) StdoutLine: {'line': b'6:  - /opt/ros/jazzy/bin/ament_xmllint --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml\n'}
[2.704613] (-) TimerEvent: {}
[2.804970] (-) TimerEvent: {}
[2.905318] (-) TimerEvent: {}
[3.006070] (-) TimerEvent: {}
[3.106879] (-) TimerEvent: {}
[3.207524] (-) TimerEvent: {}
[3.308463] (-) TimerEvent: {}
[3.409160] (-) TimerEvent: {}
[3.509858] (-) TimerEvent: {}
[3.610470] (-) TimerEvent: {}
[3.711225] (-) TimerEvent: {}
[3.811786] (-) TimerEvent: {}
[3.912285] (-) TimerEvent: {}
[4.012767] (-) TimerEvent: {}
[4.113087] (-) TimerEvent: {}
[4.213609] (-) TimerEvent: {}
[4.314191] (-) TimerEvent: {}
[4.414819] (-) TimerEvent: {}
[4.515745] (-) TimerEvent: {}
[4.616728] (-) TimerEvent: {}
[4.717461] (-) TimerEvent: {}
[4.818519] (-) TimerEvent: {}
[4.919239] (-) TimerEvent: {}
[5.020537] (-) TimerEvent: {}
[5.121295] (-) TimerEvent: {}
[5.222065] (-) TimerEvent: {}
[5.322831] (-) TimerEvent: {}
[5.423488] (-) TimerEvent: {}
[5.523879] (-) TimerEvent: {}
[5.624640] (-) TimerEvent: {}
[5.725461] (-) TimerEvent: {}
[5.826156] (-) TimerEvent: {}
[5.926964] (-) TimerEvent: {}
[5.980963] (articubot_one) StdoutLine: {'line': b"6: File 'package.xml' is valid\n"}
[5.981515] (articubot_one) StdoutLine: {'line': b'6: \n'}
[5.982333] (articubot_one) StdoutLine: {'line': b'6: No problems found\n'}
[6.027180] (-) TimerEvent: {}
[6.044212] (articubot_one) StdoutLine: {'line': b'6: -- run_test.py: return code 0\n'}
[6.045685] (articubot_one) StdoutLine: {'line': b"6: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml'\n"}
[6.098996] (articubot_one) StdoutLine: {'line': b'6/6 Test #6: xmllint ..........................   Passed    3.51 sec\n'}
[6.100896] (articubot_one) StdoutLine: {'line': b'\n'}
[6.102934] (articubot_one) StdoutLine: {'line': b'33% tests passed\x1b[0;0m, \x1b[0;31m4 tests failed\x1b[0;0m out of 6\n'}
[6.104354] (articubot_one) StdoutLine: {'line': b'\n'}
[6.105288] (articubot_one) StdoutLine: {'line': b'Label Time Summary:\n'}
[6.106131] (articubot_one) StdoutLine: {'line': b'copyright     =   0.40 sec*proc (1 test)\n'}
[6.107176] (articubot_one) StdoutLine: {'line': b'flake8        =   0.58 sec*proc (1 test)\n'}
[6.108036] (articubot_one) StdoutLine: {'line': b'lint_cmake    =   0.24 sec*proc (1 test)\n'}
[6.108981] (articubot_one) StdoutLine: {'line': b'linter        =   5.05 sec*proc (5 tests)\n'}
[6.109670] (articubot_one) StdoutLine: {'line': b'pep257        =   0.32 sec*proc (1 test)\n'}
[6.110530] (articubot_one) StdoutLine: {'line': b'pytest        =   1.00 sec*proc (1 test)\n'}
[6.111362] (articubot_one) StdoutLine: {'line': b'xmllint       =   3.51 sec*proc (1 test)\n'}
[6.112187] (articubot_one) StdoutLine: {'line': b'\n'}
[6.112863] (articubot_one) StdoutLine: {'line': b'Total Test time (real) =   6.05 sec\n'}
[6.113716] (articubot_one) StdoutLine: {'line': b'\n'}
[6.114152] (articubot_one) StdoutLine: {'line': b'The following tests FAILED:\n'}
[6.114473] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  1 - laser_obstacle_test (Failed)\x1b[0;0m\n'}
[6.114824] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  2 - copyright (Failed)\x1b[0;0m\n'}
[6.115367] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  3 - flake8 (Failed)\x1b[0;0m\n'}
[6.115683] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  4 - lint_cmake (Failed)\x1b[0;0m\n'}
[6.127309] (-) TimerEvent: {}
[6.129528] (articubot_one) StderrLine: {'line': b'Errors while running CTest\n'}
[6.130299] (articubot_one) StderrLine: {'line': b'Output from these tests are in: /home/jonatan/ros2_ws/build/articubot_one/Testing/Temporary/LastTest.log\n'}
[6.130979] (articubot_one) StderrLine: {'line': b'Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.\n'}
[6.136850] (articubot_one) CommandEnded: {'returncode': 8}
[6.139328] (articubot_one) TestFailure: {'identifier': 'articubot_one'}
[6.139527] (articubot_one) JobEnded: {'identifier': 'articubot_one', 'rc': 0}
[6.142992] (-) EventReactorShutdown: {}
