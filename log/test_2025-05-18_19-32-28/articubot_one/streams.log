[0.033s] Invoking command in '/home/jonatan/ros2_ws/build/articubot_one': AMENT_PREFIX_PATH=/home/jonatan/ros2_ws/install/articubot_one:${AMENT_PREFIX_PATH} CMAKE_PREFIX_PATH=/home/jonatan/ros2_ws/install/articubot_one:${CMAKE_PREFIX_PATH} PS1=\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ PYTHONPATH=/home/jonatan/ros2_ws/install/articubot_one/lib/python3.12/site-packages:${PYTHONPATH} /usr/bin/ctest -C Release -D ExperimentalTest --no-compress-output -V --force-new-ctest-process
[0.044s] UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini
[0.045s] Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini
[0.045s]    Site: HP-EliteBook-x360-1030-G2
[0.045s]    Build name: (empty)
[0.045s]  Add coverage exclude regular expressions.
[0.046s] Create new tag: 20250518-1832 - Experimental
[0.046s] UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini
[0.046s] Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini
[0.046s] Test project /home/jonatan/ros2_ws/build/articubot_one
[0.046s] Constructing a list of tests
[0.047s] Done constructing a list of tests
[0.047s] Updating test list for fixtures
[0.047s] Added 0 tests to meet fixture requirements
[0.047s] Checking test dependency graph...
[0.047s] Checking test dependency graph end
[0.047s] test 1
[0.047s]     Start 1: laser_obstacle_test
[0.048s] 
[0.048s] 1: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test.txt" "--command" "/usr/bin/python3" "-u" "-m" "pytest" "/home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py" "-o" "cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache" "--junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--junit-prefix=articubot_one"
[0.048s] 1: Working Directory: /home/jonatan/ros2_ws/build/articubot_one
[0.048s] 1: Test timeout computed to be: 60
[0.134s] 1: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/build/articubot_one':
[0.134s] 1:  - /usr/bin/python3 -u -m pytest /home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py -o cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache --junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml --junit-prefix=articubot_one
[0.583s] 1: ============================= test session starts ==============================
[0.583s] 1: platform linux -- Python 3.12.3, pytest-7.4.4, pluggy-1.4.0
[0.588s] 1: cachedir: /home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache
[0.588s] 1: rootdir: /home/jonatan/ros2_ws/src/articubot_one
[0.588s] 1: plugins: launch-testing-3.4.4, ament-xmllint-0.17.2, ament-pep257-0.17.2, ament-copyright-0.17.2, ament-flake8-0.17.2, launch-testing-ros-0.26.7, ament-lint-0.17.2, cov-4.1.0, typeguard-4.1.5, colcon-core-0.19.0
[0.813s] 1: collected 3 items
[0.814s] 1: 
[0.916s] 1: ../../src/articubot_one/test/pytest/test_laserObstacle.py F.F            [100%]
[0.917s] 1: 
[0.917s] 1: =================================== FAILURES ===================================
[0.918s] 1: ______________________________ test_node_creation ______________________________
[0.918s] 1: 
[0.918s] 1:     def test_node_creation():
[0.919s] 1:         rclpy.init
[0.919s] 1:         try :
[0.919s] 1: >           node=Obstacle()
[0.920s] 1: 
[0.920s] 1: ../../src/articubot_one/test/pytest/test_laserObstacle.py:13: 
[0.920s] 1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[0.920s] 1: ../../install/articubot_one/lib/python3.12/site-packages/articubot_one/obstacle_avoidance.py:15: in __init__
[0.920s] 1:     super().__init__("Laser_Obstacle_Avoidance")
[0.920s] 1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[0.921s] 1: 
[0.921s] 1: self = <articubot_one.obstacle_avoidance.Obstacle object at 0x7f6cc9b01490>
[0.921s] 1: node_name = 'Laser_Obstacle_Avoidance'
[0.921s] 1: 
[0.921s] 1:     def __init__(
[0.921s] 1:         self,
[0.922s] 1:         node_name: str,
[0.922s] 1:         *,
[0.922s] 1:         context: Optional[Context] = None,
[0.922s] 1:         cli_args: Optional[List[str]] = None,
[0.922s] 1:         namespace: Optional[str] = None,
[0.922s] 1:         use_global_arguments: bool = True,
[0.922s] 1:         enable_rosout: bool = True,
[0.922s] 1:         start_parameter_services: bool = True,
[0.923s] 1:         parameter_overrides: Optional[List[Parameter]] = None,
[0.923s] 1:         allow_undeclared_parameters: bool = False,
[0.923s] 1:         automatically_declare_parameters_from_overrides: bool = False,
[0.923s] 1:         enable_logger_service: bool = False
[0.923s] 1:     ) -> None:
[0.923s] 1:         """
[0.923s] 1:         Create a Node.
[0.924s] 1:     
[0.924s] 1:         :param node_name: A name to give to this node. Validated by :func:`validate_node_name`.
[0.924s] 1:         :param context: The context to be associated with, or ``None`` for the default global
[0.924s] 1:             context.
[0.924s] 1:         :param cli_args: A list of strings of command line args to be used only by this node.
[0.924s] 1:             These arguments are used to extract remappings used by the node and other ROS specific
[0.925s] 1:             settings, as well as user defined non-ROS arguments.
[0.925s] 1:         :param namespace: The namespace to which relative topic and service names will be prefixed.
[0.925s] 1:             Validated by :func:`validate_namespace`.
[0.925s] 1:         :param use_global_arguments: ``False`` if the node should ignore process-wide command line
[0.925s] 1:             args.
[0.925s] 1:         :param enable_rosout: ``False`` if the node should ignore rosout logging.
[0.925s] 1:         :param start_parameter_services: ``False`` if the node should not create parameter
[0.926s] 1:             services.
[0.926s] 1:         :param parameter_overrides: A list of overrides for initial values for parameters declared
[0.926s] 1:             on the node.
[0.926s] 1:         :param allow_undeclared_parameters: True if undeclared parameters are allowed.
[0.926s] 1:             This flag affects the behavior of parameter-related operations.
[0.926s] 1:         :param automatically_declare_parameters_from_overrides: If True, the "parameter overrides"
[0.926s] 1:             will be used to implicitly declare parameters on the node during creation.
[0.927s] 1:         :param enable_logger_service: ``True`` if ROS2 services are created to allow external nodes
[0.927s] 1:             to get and set logger levels of this node. Otherwise, logger levels are only managed
[0.927s] 1:             locally. That is, logger levels cannot be changed remotely.
[0.927s] 1:         """
[0.927s] 1:         self.__handle = None
[0.927s] 1:         self._context = get_default_context() if context is None else context
[0.927s] 1:         self._parameters: dict = {}
[0.928s] 1:         self._publishers: List[Publisher] = []
[0.928s] 1:         self._subscriptions: List[Subscription] = []
[0.928s] 1:         self._clients: List[Client] = []
[0.928s] 1:         self._services: List[Service] = []
[0.928s] 1:         self._timers: List[Timer] = []
[0.928s] 1:         self._guards: List[GuardCondition] = []
[0.928s] 1:         self.__waitables: List[Waitable] = []
[0.929s] 1:         self._default_callback_group = MutuallyExclusiveCallbackGroup()
[0.929s] 1:         self._pre_set_parameters_callbacks: List[Callable[[List[Parameter]], List[Parameter]]] = []
[0.929s] 1:         self._on_set_parameters_callbacks: \
[0.929s] 1:             List[Callable[[List[Parameter]], SetParametersResult]] = []
[0.929s] 1:         self._post_set_parameters_callbacks: List[Callable[[List[Parameter]], None]] = []
[0.929s] 1:         self._rate_group = ReentrantCallbackGroup()
[0.929s] 1:         self._allow_undeclared_parameters = allow_undeclared_parameters
[0.930s] 1:         self._parameter_overrides = {}
[0.930s] 1:         self._descriptors = {}
[0.930s] 1:     
[0.930s] 1:         namespace = namespace or ''
[0.930s] 1:         if not self._context.ok():
[0.930s] 1: >           raise NotInitializedException('cannot create node')
[0.930s] 1: E           rclpy.exceptions.NotInitializedException: rclpy.init() has not been called. msg:cannot create node
[0.931s] 1: 
[0.931s] 1: /opt/ros/jazzy/lib/python3.12/site-packages/rclpy/node.py:184: NotInitializedException
[0.931s] 1: ________________________________ test_obstacle _________________________________
[0.931s] 1: 
[0.931s] 1:     def test_obstacle():
[0.931s] 1:         rclpy.init
[0.931s] 1:         try :
[0.931s] 1: >           node=Obstacle()
[0.931s] 1: 
[0.931s] 1: ../../src/articubot_one/test/pytest/test_laserObstacle.py:33: 
[0.932s] 1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[0.932s] 1: ../../install/articubot_one/lib/python3.12/site-packages/articubot_one/obstacle_avoidance.py:15: in __init__
[0.932s] 1:     super().__init__("Laser_Obstacle_Avoidance")
[0.932s] 1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[0.932s] 1: 
[0.932s] 1: self = <articubot_one.obstacle_avoidance.Obstacle object at 0x7f6cc8d23c20>
[0.932s] 1: node_name = 'Laser_Obstacle_Avoidance'
[0.932s] 1: 
[0.932s] 1:     def __init__(
[0.932s] 1:         self,
[0.932s] 1:         node_name: str,
[0.932s] 1:         *,
[0.933s] 1:         context: Optional[Context] = None,
[0.933s] 1:         cli_args: Optional[List[str]] = None,
[0.933s] 1:         namespace: Optional[str] = None,
[0.933s] 1:         use_global_arguments: bool = True,
[0.933s] 1:         enable_rosout: bool = True,
[0.933s] 1:         start_parameter_services: bool = True,
[0.933s] 1:         parameter_overrides: Optional[List[Parameter]] = None,
[0.933s] 1:         allow_undeclared_parameters: bool = False,
[0.933s] 1:         automatically_declare_parameters_from_overrides: bool = False,
[0.933s] 1:         enable_logger_service: bool = False
[0.933s] 1:     ) -> None:
[0.933s] 1:         """
[0.934s] 1:         Create a Node.
[0.934s] 1:     
[0.934s] 1:         :param node_name: A name to give to this node. Validated by :func:`validate_node_name`.
[0.934s] 1:         :param context: The context to be associated with, or ``None`` for the default global
[0.934s] 1:             context.
[0.934s] 1:         :param cli_args: A list of strings of command line args to be used only by this node.
[0.934s] 1:             These arguments are used to extract remappings used by the node and other ROS specific
[0.934s] 1:             settings, as well as user defined non-ROS arguments.
[0.934s] 1:         :param namespace: The namespace to which relative topic and service names will be prefixed.
[0.934s] 1:             Validated by :func:`validate_namespace`.
[0.934s] 1:         :param use_global_arguments: ``False`` if the node should ignore process-wide command line
[0.934s] 1:             args.
[0.935s] 1:         :param enable_rosout: ``False`` if the node should ignore rosout logging.
[0.935s] 1:         :param start_parameter_services: ``False`` if the node should not create parameter
[0.935s] 1:             services.
[0.935s] 1:         :param parameter_overrides: A list of overrides for initial values for parameters declared
[0.935s] 1:             on the node.
[0.935s] 1:         :param allow_undeclared_parameters: True if undeclared parameters are allowed.
[0.935s] 1:             This flag affects the behavior of parameter-related operations.
[0.935s] 1:         :param automatically_declare_parameters_from_overrides: If True, the "parameter overrides"
[0.935s] 1:             will be used to implicitly declare parameters on the node during creation.
[0.935s] 1:         :param enable_logger_service: ``True`` if ROS2 services are created to allow external nodes
[0.935s] 1:             to get and set logger levels of this node. Otherwise, logger levels are only managed
[0.935s] 1:             locally. That is, logger levels cannot be changed remotely.
[0.936s] 1:         """
[0.936s] 1:         self.__handle = None
[0.936s] 1:         self._context = get_default_context() if context is None else context
[0.936s] 1:         self._parameters: dict = {}
[0.936s] 1:         self._publishers: List[Publisher] = []
[0.936s] 1:         self._subscriptions: List[Subscription] = []
[0.936s] 1:         self._clients: List[Client] = []
[0.936s] 1:         self._services: List[Service] = []
[0.936s] 1:         self._timers: List[Timer] = []
[0.936s] 1:         self._guards: List[GuardCondition] = []
[0.936s] 1:         self.__waitables: List[Waitable] = []
[0.936s] 1:         self._default_callback_group = MutuallyExclusiveCallbackGroup()
[0.937s] 1:         self._pre_set_parameters_callbacks: List[Callable[[List[Parameter]], List[Parameter]]] = []
[0.937s] 1:         self._on_set_parameters_callbacks: \
[0.937s] 1:             List[Callable[[List[Parameter]], SetParametersResult]] = []
[0.937s] 1:         self._post_set_parameters_callbacks: List[Callable[[List[Parameter]], None]] = []
[0.937s] 1:         self._rate_group = ReentrantCallbackGroup()
[0.937s] 1:         self._allow_undeclared_parameters = allow_undeclared_parameters
[0.937s] 1:         self._parameter_overrides = {}
[0.937s] 1:         self._descriptors = {}
[0.937s] 1:     
[0.937s] 1:         namespace = namespace or ''
[0.937s] 1:         if not self._context.ok():
[0.937s] 1: >           raise NotInitializedException('cannot create node')
[0.938s] 1: E           rclpy.exceptions.NotInitializedException: rclpy.init() has not been called. msg:cannot create node
[0.938s] 1: 
[0.938s] 1: /opt/ros/jazzy/lib/python3.12/site-packages/rclpy/node.py:184: NotInitializedException
[0.938s] 1: - generated xml file: /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml -
[0.938s] 1: =========================== short test summary info ============================
[0.938s] 1: FAILED ../../src/articubot_one/test/pytest/test_laserObstacle.py::test_node_creation
[0.938s] 1: FAILED ../../src/articubot_one/test/pytest/test_laserObstacle.py::test_obstacle
[0.938s] 1: ========================= 2 failed, 1 passed in 0.34s ==========================
[1.034s] 1: -- run_test.py: return code 1
[1.034s] 1: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml'
[1.048s] 1/6 Test #1: laser_obstacle_test ..............***Failed    1.00 sec
[1.049s] test 2
[1.049s]     Start 2: copyright
[1.049s] 
[1.049s] 2: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_copyright/copyright.txt" "--command" "/opt/ros/jazzy/bin/ament_copyright" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml"
[1.049s] 2: Working Directory: /home/jonatan/ros2_ws/src/articubot_one
[1.049s] 2: Test timeout computed to be: 200
[1.138s] 2: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':
[1.139s] 2:  - /opt/ros/jazzy/bin/ament_copyright --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml
[1.421s] 2: CONTRIBUTING.md: file not found
[1.422s] 2: LICENSE: file not found
[1.422s] 2: articubot_one/obstacle_avoidance.py: could not find copyright notice
[1.422s] 2: launch/ball_tracker.launch.py: could not find copyright notice
[1.422s] 2: launch/camera.launch.py: could not find copyright notice
[1.422s] 2: launch/joystick.launch.py: could not find copyright notice
[1.422s] 2: launch/launch_robot.launch.py: could not find copyright notice
[1.422s] 2: launch/launch_sim.launch.py: could not find copyright notice
[1.422s] 2: launch/online_async_launch.py: could not find copyright notice
[1.422s] 2: launch/rplidar.launch.py: could not find copyright notice
[1.422s] 2: launch/rsp.launch.py: could not find copyright notice
[1.423s] 2: launch/rviz_gazebo.launch.py: could not find copyright notice
[1.423s] 2: test/pytest/test_laserObstacle.py: could not find copyright notice
[1.423s] 2: 13 errors, checked 16 files
[1.437s] 2: -- run_test.py: return code 1
[1.437s] 2: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml'
[1.449s] 2/6 Test #2: copyright ........................***Failed    0.40 sec
[1.449s] test 3
[1.449s]     Start 3: flake8
[1.449s] 
[1.449s] 3: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_flake8/flake8.txt" "--command" "/opt/ros/jazzy/bin/ament_flake8" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml"
[1.449s] 3: Working Directory: /home/jonatan/ros2_ws/src/articubot_one
[1.449s] 3: Test timeout computed to be: 60
[1.526s] 3: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':
[1.527s] 3:  - /opt/ros/jazzy/bin/ament_flake8 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml
[1.944s] 3: from geometry_msgs.msg import Twist
[1.944s] 3: ^
[1.945s] 3: import math
[1.945s] 3: ^
[1.945s] 3: import math
[1.945s] 3: ^
[1.945s] 3: # i am writing down this piece of code with paramters 
[1.945s] 3:                                                      ^
[1.946s] 3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node 
[1.946s] 3:                                                                                                    ^
[1.946s] 3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node 
[1.946s] 3:                                                                                                               ^
[1.947s] 3:     def __init__(self) :
[1.947s] 3:                       ^
[1.947s] 3:         super().__init__("Laser_Obstacle_Avoidance")
[1.947s] 3:                          ^
[1.948s] 3:         
[1.948s] 3: ^
[1.948s] 3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance
[1.948s] 3:                                ^
[1.948s] 3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance
[1.949s] 3:                                                    ^
[1.949s] 3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance
[1.949s] 3:                                                                                                    ^
[1.949s] 3:         self.threshold=self.get_parameter("threshold_distance").value
[1.949s] 3:                       ^
[1.950s] 3:         self.threshold=self.get_parameter("threshold_distance").value
[1.950s] 3:                                           ^
[1.950s] 3:         
[1.950s] 3: ^
[1.950s] 3:         self.declare_parameter("laser_scan_topic","/scan")
[1.951s] 3:                                ^
[1.951s] 3:         self.declare_parameter("laser_scan_topic","/scan")
[1.951s] 3:                                                  ^
[1.951s] 3:         self.declare_parameter("laser_scan_topic","/scan")
[1.951s] 3:                                                   ^
[1.952s] 3:         self.laser_topic=self.get_parameter("laser_scan_topic").value
[1.952s] 3:                         ^
[1.952s] 3:         self.laser_topic=self.get_parameter("laser_scan_topic").value
[1.952s] 3:                                             ^
[1.953s] 3:         
[1.953s] 3: ^
[1.953s] 3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")
[1.954s] 3:                                ^
[1.954s] 3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")
[1.955s] 3:                                               ^
[1.955s] 3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")
[1.955s] 3:                                                ^
[1.955s] 3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value
[1.955s] 3:                       ^
[1.955s] 3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value
[1.956s] 3:                                           ^
[1.956s] 3:         self.frontal_detection_angle_rad = math.radians(self.get_parameter('frontal_detection_angle_deg').value)
[1.956s] 3:                                                                                                    ^
[1.956s] 3:         #create a publisher to the /cmd_vel
[1.956s] 3:         ^
[1.956s] 3:         self.cmd_vel_pub = self.create_publisher(Twist,self.cmd_topic, 10)
[1.956s] 3:                                                       ^
[1.956s] 3:     def laser_callback(self,msg):
[1.956s] 3:     ^
[1.956s] 3:     def laser_callback(self,msg):
[1.956s] 3:                            ^
[1.957s] 3:   
[1.957s] 3: ^
[1.957s] 3:         if not(scan_size) :
[1.957s] 3:               ^
[1.957s] 3:         if not(scan_size) :
[1.957s] 3:                          ^
[1.957s] 3:             #no laser data 
[1.957s] 3:             ^
[1.957s] 3:             #no laser data 
[1.957s] 3:                           ^
[1.957s] 3:             return 
[1.957s] 3:                   ^
[1.958s] 3:         # the lidar provides angles,angle step (common difference of the angle sequence), distances in meter
[1.958s] 3:                                                                                                    ^
[1.958s] 3:         
[1.958s] 3: ^
[1.958s] 3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance
[1.958s] 3:         ^
[1.958s] 3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance
[1.958s] 3:                                                                                                    ^
[1.958s] 3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance
[1.958s] 3:         ^
[1.959s] 3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance
[1.959s] 3:                                                                                                    ^
[1.960s] 3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle 
[1.960s] 3:                                                                                                    ^
[1.960s] 3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle 
[1.960s] 3:                                                                                                                      ^
[1.960s] 3:         # we are sweeping across all the angles with the increment 
[1.960s] 3:                                                                   ^
[1.965s] 3:         # while sweeping we compare  only the ranges with the ones in the defined angle 
[1.965s] 3:                                                                                        ^
[1.965s] 3:                  # If the range reading is valid (not inf or nan)
[1.966s] 3:                  ^
[1.966s] 3:                  # If the range reading is valid (not inf or nan)
[1.966s] 3:                  ^
[1.966s] 3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):
[1.966s] 3:                  ^
[1.966s] 3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):
[1.966s] 3:                  ^
[1.966s] 3:             
[1.966s] 3: ^
[1.966s] 3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])
[1.966s] 3:                      ^
[1.967s] 3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])
[1.967s] 3:                                                                                                    ^
[1.967s] 3:         #  To stop the robot from moving ahead when ever it meets an obstacle, it will just go back 
[1.967s] 3:                                                                                                    ^
[1.967s] 3:         if obstacle_detected :
[1.967s] 3:                             ^
[1.967s] 3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')
[1.967s] 3:            ^
[1.967s] 3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')
[1.967s] 3:                                                                                                    ^
[1.967s] 3:            twist.linear.x = 0.0
[1.967s] 3:            ^
[1.967s] 3:            twist.angular.z =0.0
[1.968s] 3:            ^
[1.968s] 3:            twist.angular.z =0.0
[1.968s] 3:                             ^
[1.968s] 3:            self.cmd_vel_pub.publish(twist)
[1.968s] 3:            ^
[1.968s] 3:            self.get_logger().info(f'No obstacle detected') 
[1.968s] 3:            ^
[1.968s] 3:            self.get_logger().info(f'No obstacle detected') 
[1.968s] 3:                                   ^
[1.968s] 3:            self.get_logger().info(f'No obstacle detected') 
[1.968s] 3:                                                           ^
[1.968s] 3: def main(args=None):
[1.968s] 3: ^
[1.969s] 3:         rclpy.spin(node) # Keep the node running and process callbacks
[1.969s] 3:                         ^
[1.969s] 3:         node.get_logger().info('Smart Obstacle Avoider Node stopped cleanly via KeyboardInterrupt.')
[1.969s] 3:                                                                                                    ^
[1.969s] 3: if __name__ == '__main__':
[1.969s] 3: ^
[1.969s] 3:     main()    
[1.969s] 3:           ^
[1.969s] 3: from ament_index_python.packages import get_package_share_directory
[1.969s] 3: ^
[1.969s] 3: from launch.actions import DeclareLaunchArgument
[1.969s] 3: ^
[1.970s] 3:     my_package_name='articubot_one'
[1.970s] 3:                    ^
[1.970s] 3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')
[1.970s] 3:                                                                                   ^
[1.970s] 3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')
[1.970s] 3:                                                                                            ^
[1.970s] 3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')
[1.970s] 3:                                                                                                    ^
[1.970s] 3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')
[1.970s] 3:                                                                                     ^
[1.970s] 3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')
[1.970s] 3:                                                                                              ^
[1.971s] 3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')
[1.971s] 3:                                                                                                    ^
[1.971s] 3:     params_path = PythonExpression(['"',tracker_params_sim, '" if "true" == "', sim_mode, '" else "', tracker_params_robot, '"'])
[1.971s] 3:                                        ^
[1.971s] 3:     params_path = PythonExpression(['"',tracker_params_sim, '" if "true" == "', sim_mode, '" else "', tracker_params_robot, '"'])
[1.971s] 3:                                                                                                    ^
[1.971s] 3:                     get_package_share_directory('ball_tracker'), 'launch', 'ball_tracker.launch.py')]),
[1.971s] 3:                                                                                                    ^
[1.971s] 3:                     launch_arguments={'params_file': params_path,
[1.971s] 3:                     ^
[1.971s] 3:                                     'image_topic': '/camera/image_raw',
[1.971s] 3:                                     ^
[1.971s] 3:                                     'cmd_vel_topic': '/cmd_vel_tracker',
[1.972s] 3:                                     ^
[1.972s] 3:                                     'enable_3d_tracker': 'true'}.items())
[1.972s] 3:                                     ^
[1.972s] 3: import os
[1.972s] 3: ^
[1.972s] 3: def generate_launch_description():
[1.972s] 3: ^
[1.972s] 3:     return LaunchDescription([
[1.972s] 3:     ^
[1.972s] 3:                 'image_size': [640,480],
[1.972s] 3:                                   ^
[1.972s] 3:     )
[1.973s] 3:     ^
[1.973s] 3: 
[1.973s] 3: ./articubot_one/obstacle_avoidance.py:5:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'
[1.973s] 3: 
[1.973s] 3: ./articubot_one/obstacle_avoidance.py:6:1: I100 Import statements are in the wrong order. 'import math' should be before 'from geometry_msgs.msg import Twist' and in a different group.
[1.973s] 3: 
[1.973s] 3: ./articubot_one/obstacle_avoidance.py:6:1: I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.
[1.973s] 3: 
[1.973s] 3: ./articubot_one/obstacle_avoidance.py:9:54: W291 trailing whitespace
[1.973s] 3: 
[1.973s] 3: ./articubot_one/obstacle_avoidance.py:10:100: E501 line too long (110 > 99 characters)
[1.973s] 3: 
[1.974s] 3: ./articubot_one/obstacle_avoidance.py:10:111: W291 trailing whitespace
[1.974s] 3: 
[1.974s] 3: ./articubot_one/obstacle_avoidance.py:14:23: E203 whitespace before ':'
[1.974s] 3: 
[1.974s] 3: ./articubot_one/obstacle_avoidance.py:15:26: Q000 Double quotes found but single quotes preferred
[1.974s] 3: 
[1.974s] 3: ./articubot_one/obstacle_avoidance.py:16:1: W293 blank line contains whitespace
[1.974s] 3: 
[1.974s] 3: ./articubot_one/obstacle_avoidance.py:17:32: Q000 Double quotes found but single quotes preferred
[1.974s] 3: 
[1.974s] 3: ./articubot_one/obstacle_avoidance.py:17:52: E231 missing whitespace after ','
[1.974s] 3: 
[1.975s] 3: ./articubot_one/obstacle_avoidance.py:17:100: E501 line too long (102 > 99 characters)
[1.975s] 3: 
[1.975s] 3: ./articubot_one/obstacle_avoidance.py:18:23: E225 missing whitespace around operator
[1.975s] 3: 
[1.975s] 3: ./articubot_one/obstacle_avoidance.py:18:43: Q000 Double quotes found but single quotes preferred
[1.975s] 3: 
[1.975s] 3: ./articubot_one/obstacle_avoidance.py:19:1: W293 blank line contains whitespace
[1.975s] 3: 
[1.975s] 3: ./articubot_one/obstacle_avoidance.py:20:32: Q000 Double quotes found but single quotes preferred
[1.975s] 3: 
[1.975s] 3: ./articubot_one/obstacle_avoidance.py:20:50: E231 missing whitespace after ','
[1.975s] 3: 
[1.976s] 3: ./articubot_one/obstacle_avoidance.py:20:51: Q000 Double quotes found but single quotes preferred
[1.976s] 3: 
[1.976s] 3: ./articubot_one/obstacle_avoidance.py:21:25: E225 missing whitespace around operator
[1.976s] 3: 
[1.976s] 3: ./articubot_one/obstacle_avoidance.py:21:45: Q000 Double quotes found but single quotes preferred
[1.976s] 3: 
[1.976s] 3: ./articubot_one/obstacle_avoidance.py:22:1: W293 blank line contains whitespace
[1.976s] 3: 
[1.976s] 3: ./articubot_one/obstacle_avoidance.py:23:32: Q000 Double quotes found but single quotes preferred
[1.976s] 3: 
[1.976s] 3: ./articubot_one/obstacle_avoidance.py:23:47: E231 missing whitespace after ','
[1.976s] 3: 
[1.977s] 3: ./articubot_one/obstacle_avoidance.py:23:48: Q000 Double quotes found but single quotes preferred
[1.977s] 3: 
[1.977s] 3: ./articubot_one/obstacle_avoidance.py:24:23: E225 missing whitespace around operator
[1.977s] 3: 
[1.977s] 3: ./articubot_one/obstacle_avoidance.py:24:43: Q000 Double quotes found but single quotes preferred
[1.977s] 3: 
[1.977s] 3: ./articubot_one/obstacle_avoidance.py:29:100: E501 line too long (112 > 99 characters)
[1.977s] 3: 
[1.977s] 3: ./articubot_one/obstacle_avoidance.py:38:9: E265 block comment should start with '# '
[1.977s] 3: 
[1.978s] 3: ./articubot_one/obstacle_avoidance.py:39:55: E231 missing whitespace after ','
[1.978s] 3: 
[1.978s] 3: ./articubot_one/obstacle_avoidance.py:43:5: E303 too many blank lines (2)
[1.978s] 3: 
[1.978s] 3: ./articubot_one/obstacle_avoidance.py:43:28: E231 missing whitespace after ','
[1.978s] 3: 
[1.978s] 3: ./articubot_one/obstacle_avoidance.py:47:1: W293 blank line contains whitespace
[1.978s] 3: 
[1.978s] 3: ./articubot_one/obstacle_avoidance.py:48:15: E275 missing whitespace after keyword
[1.978s] 3: 
[1.978s] 3: ./articubot_one/obstacle_avoidance.py:48:26: E203 whitespace before ':'
[1.978s] 3: 
[1.978s] 3: ./articubot_one/obstacle_avoidance.py:49:13: E265 block comment should start with '# '
[1.979s] 3: 
[1.979s] 3: ./articubot_one/obstacle_avoidance.py:49:27: W291 trailing whitespace
[1.979s] 3: 
[1.979s] 3: ./articubot_one/obstacle_avoidance.py:50:19: W291 trailing whitespace
[1.979s] 3: 
[1.979s] 3: ./articubot_one/obstacle_avoidance.py:51:100: E501 line too long (108 > 99 characters)
[1.979s] 3: 
[1.979s] 3: ./articubot_one/obstacle_avoidance.py:56:1: W293 blank line contains whitespace
[1.979s] 3: 
[1.979s] 3: ./articubot_one/obstacle_avoidance.py:60:9: E265 block comment should start with '# '
[1.979s] 3: 
[1.979s] 3: ./articubot_one/obstacle_avoidance.py:60:100: E501 line too long (148 > 99 characters)
[1.980s] 3: 
[1.980s] 3: ./articubot_one/obstacle_avoidance.py:61:9: E265 block comment should start with '# '
[1.980s] 3: 
[1.980s] 3: ./articubot_one/obstacle_avoidance.py:61:100: E501 line too long (106 > 99 characters)
[1.980s] 3: 
[1.980s] 3: ./articubot_one/obstacle_avoidance.py:62:100: E501 line too long (117 > 99 characters)
[1.980s] 3: 
[1.980s] 3: ./articubot_one/obstacle_avoidance.py:62:118: W291 trailing whitespace
[1.980s] 3: 
[1.980s] 3: ./articubot_one/obstacle_avoidance.py:64:67: W291 trailing whitespace
[1.980s] 3: 
[1.980s] 3: ./articubot_one/obstacle_avoidance.py:65:88: W291 trailing whitespace
[1.981s] 3: 
[1.981s] 3: ./articubot_one/obstacle_avoidance.py:75:18: E114 indentation is not a multiple of 4 (comment)
[1.981s] 3: 
[1.981s] 3: ./articubot_one/obstacle_avoidance.py:75:18: E117 over-indented (comment)
[1.981s] 3: 
[1.981s] 3: ./articubot_one/obstacle_avoidance.py:76:18: E111 indentation is not a multiple of 4
[1.981s] 3: 
[1.981s] 3: ./articubot_one/obstacle_avoidance.py:76:18: E117 over-indented
[1.981s] 3: 
[1.981s] 3: ./articubot_one/obstacle_avoidance.py:77:1: W293 blank line contains whitespace
[1.981s] 3: 
[1.981s] 3: ./articubot_one/obstacle_avoidance.py:78:22: E111 indentation is not a multiple of 4
[1.982s] 3: 
[1.982s] 3: ./articubot_one/obstacle_avoidance.py:78:100: E501 line too long (104 > 99 characters)
[1.982s] 3: 
[1.982s] 3: ./articubot_one/obstacle_avoidance.py:86:100: W291 trailing whitespace
[1.982s] 3: 
[1.982s] 3: ./articubot_one/obstacle_avoidance.py:87:29: E203 whitespace before ':'
[1.982s] 3: 
[1.982s] 3: ./articubot_one/obstacle_avoidance.py:88:12: E111 indentation is not a multiple of 4
[1.982s] 3: 
[1.982s] 3: ./articubot_one/obstacle_avoidance.py:88:100: E501 line too long (115 > 99 characters)
[1.982s] 3: 
[1.982s] 3: ./articubot_one/obstacle_avoidance.py:89:12: E111 indentation is not a multiple of 4
[1.983s] 3: 
[1.983s] 3: ./articubot_one/obstacle_avoidance.py:90:12: E111 indentation is not a multiple of 4
[1.983s] 3: 
[1.983s] 3: ./articubot_one/obstacle_avoidance.py:90:29: E225 missing whitespace around operator
[1.983s] 3: 
[1.983s] 3: ./articubot_one/obstacle_avoidance.py:91:12: E111 indentation is not a multiple of 4
[1.983s] 3: 
[1.983s] 3: ./articubot_one/obstacle_avoidance.py:93:12: E111 indentation is not a multiple of 4
[1.983s] 3: 
[1.983s] 3: ./articubot_one/obstacle_avoidance.py:93:35: F541 f-string is missing placeholders
[1.983s] 3: 
[1.983s] 3: ./articubot_one/obstacle_avoidance.py:93:59: W291 trailing whitespace
[1.984s] 3: 
[1.984s] 3: ./articubot_one/obstacle_avoidance.py:95:1: E302 expected 2 blank lines, found 1
[1.984s] 3: 
[1.984s] 3: ./articubot_one/obstacle_avoidance.py:99:25: E261 at least two spaces before inline comment
[1.984s] 3: 
[1.984s] 3: ./articubot_one/obstacle_avoidance.py:101:100: E501 line too long (100 > 99 characters)
[1.984s] 3: 
[1.984s] 3: ./articubot_one/obstacle_avoidance.py:116:1: E305 expected 2 blank lines after class or function definition, found 1
[1.984s] 3: 
[1.984s] 3: ./articubot_one/obstacle_avoidance.py:117:11: W291 trailing whitespace
[1.984s] 3: 
[1.984s] 3: ./launch/ball_tracker.launch.py:2:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.
[1.984s] 3: 
[1.985s] 3: ./launch/ball_tracker.launch.py:8:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import PythonExpression'
[1.985s] 3: 
[1.985s] 3: ./launch/ball_tracker.launch.py:13:20: E225 missing whitespace around operator
[1.985s] 3: 
[1.985s] 3: ./launch/ball_tracker.launch.py:17:83: E231 missing whitespace after ','
[1.985s] 3: 
[1.985s] 3: ./launch/ball_tracker.launch.py:17:92: E231 missing whitespace after ','
[1.985s] 3: 
[1.985s] 3: ./launch/ball_tracker.launch.py:17:100: E501 line too long (123 > 99 characters)
[1.985s] 3: 
[1.985s] 3: ./launch/ball_tracker.launch.py:18:85: E231 missing whitespace after ','
[1.985s] 3: 
[1.986s] 3: ./launch/ball_tracker.launch.py:18:94: E231 missing whitespace after ','
[1.986s] 3: 
[1.986s] 3: ./launch/ball_tracker.launch.py:18:100: E501 line too long (127 > 99 characters)
[1.986s] 3: 
[1.986s] 3: ./launch/ball_tracker.launch.py:20:40: E231 missing whitespace after ','
[1.986s] 3: 
[1.986s] 3: ./launch/ball_tracker.launch.py:20:100: E501 line too long (129 > 99 characters)
[1.986s] 3: 
[1.986s] 3: ./launch/ball_tracker.launch.py:24:100: E501 line too long (103 > 99 characters)
[1.986s] 3: 
[1.986s] 3: ./launch/ball_tracker.launch.py:25:21: E131 continuation line unaligned for hanging indent
[1.986s] 3: 
[1.987s] 3: ./launch/ball_tracker.launch.py:26:37: E128 continuation line under-indented for visual indent
[1.987s] 3: 
[1.987s] 3: ./launch/ball_tracker.launch.py:27:37: E128 continuation line under-indented for visual indent
[1.987s] 3: 
[1.987s] 3: ./launch/ball_tracker.launch.py:28:37: E128 continuation line under-indented for visual indent
[1.987s] 3: 
[1.987s] 3: ./launch/camera.launch.py:1:1: F401 'os' imported but unused
[1.987s] 3: 
[1.987s] 3: ./launch/camera.launch.py:6:1: E302 expected 2 blank lines, found 1
[1.987s] 3: 
[1.987s] 3: ./launch/camera.launch.py:10:5: E303 too many blank lines (3)
[1.987s] 3: 
[1.988s] 3: ./launch/camera.launch.py:18:35: E231 missing whitespace after ','
[1.988s] 3: 
[1.988s] 3: ./launch/camera.launch.py:22:5: E122 continuation line missing indentation or outdented
[1.988s] 3: 
[1.988s] 3: from launch.substitutions import LaunchConfiguration
[1.988s] 3: ^
[1.988s] 3: from launch.actions import DeclareLaunchArgument
[1.988s] 3: ^
[1.988s] 3: import os
[1.988s] 3: ^
[1.988s] 3: from ament_index_python.packages import get_package_share_directory
[1.988s] 3: ^
[1.988s] 3: def generate_launch_description():
[1.989s] 3: ^
[1.989s] 3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')
[1.989s] 3:                                                                           ^
[1.989s] 3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')
[1.989s] 3:                                                                                    ^
[1.989s] 3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')
[1.989s] 3:                                                                                                    ^
[1.989s] 3:             remappings=[('/cmd_vel','/cmd_vel_joy')]
[1.989s] 3:                                    ^
[1.989s] 3:             remappings=[('/cmd_vel_in','/diff_cont/cmd_vel_unstamped'),
[1.989s] 3:                                       ^
[1.989s] 3:                         ('/cmd_vel_out','/diff_cont/cmd_vel')]
[1.990s] 3:                                        ^
[1.990s] 3:     return LaunchDescription([
[1.990s] 3:     ^
[1.990s] 3:         twist_stamper       
[1.990s] 3:                      ^
[1.990s] 3:     ])      ^
[1.990s] 3: from launch.actions import RegisterEventHandler
[1.990s] 3: ^
[1.990s] 3: def generate_launch_description():
[1.990s] 3: ^
[1.990s] 3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled
[1.990s] 3:     ^
[1.991s] 3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled
[1.991s] 3:                                                                                                    ^
[1.991s] 3:     package_name='articubot_one' #<--- CHANGE ME
[1.991s] 3:                 ^
[1.991s] 3:     package_name='articubot_one' #<--- CHANGE ME
[1.991s] 3:                                 ^
[1.991s] 3:     package_name='articubot_one' #<--- CHANGE ME
[1.991s] 3:                                  ^
[1.991s] 3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'
[1.991s] 3:                                                              ^
[1.991s] 3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'
[1.991s] 3:                                                                       ^
[1.992s] 3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')
[1.992s] 3:     ^
[1.992s] 3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')
[1.992s] 3:                                                                              ^
[1.992s] 3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')
[1.992s] 3:                                                                                       ^
[1.992s] 3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')
[1.992s] 3:                                                                                                    ^
[1.992s] 3:             package="twist_mux",
[1.992s] 3:                     ^
[1.992s] 3:             executable="twist_mux",
[1.992s] 3:                        ^
[1.993s] 3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]
[1.993s] 3:                                        ^
[1.993s] 3:     
[1.993s] 3: ^
[1.993s] 3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])
[1.993s] 3:     ^
[1.993s] 3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])
[1.993s] 3:                                                                                                    ^
[1.993s] 3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')
[1.993s] 3:                                                                                    ^
[1.993s] 3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')
[1.993s] 3:                                                                                             ^
[1.994s] 3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')
[1.994s] 3:                                                                                                    ^
[1.994s] 3:         package="controller_manager",
[1.994s] 3:                 ^
[1.994s] 3:         executable="ros2_control_node",
[1.994s] 3:                    ^
[1.994s] 3:         package="controller_manager",
[1.994s] 3:                 ^
[1.994s] 3:         executable="spawner",
[1.994s] 3:                    ^
[1.994s] 3:         arguments=["diff_cont"],
[1.994s] 3:                    ^
[1.995s] 3:         package="controller_manager",
[1.995s] 3:                 ^
[1.995s] 3:         executable="spawner",
[1.995s] 3:                    ^
[1.995s] 3:         arguments=["joint_broad"],
[1.995s] 3:                    ^
[1.995s] 3:     # Code for delaying a node (I haven't tested how effective it is)
[1.995s] 3:     ^
[1.995s] 3:     # 
[1.995s] 3:      ^
[1.995s] 3:     # Launch them all!
[1.995s] 3:     ^
[1.996s] 3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument
[1.996s] 3: ^
[1.996s] 3: def generate_launch_description():
[1.996s] 3: ^
[1.996s] 3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled
[1.996s] 3:     ^
[1.996s] 3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled
[1.996s] 3:                                                                                                    ^
[1.996s] 3:     package_name='articubot_one' #<--- CHANGE ME
[1.996s] 3:                 ^
[1.996s] 3:     package_name='articubot_one' #<--- CHANGE ME
[1.996s] 3:                                 ^
[1.997s] 3:     package_name='articubot_one' #<--- CHANGE ME
[1.997s] 3:                                  ^
[1.997s] 3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'
[1.997s] 3:                                                              ^
[1.997s] 3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'
[1.997s] 3:                                                                       ^
[1.997s] 3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'
[1.997s] 3:                                                              ^
[1.997s] 3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'
[1.997s] 3:                                                                       ^
[1.997s] 3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')
[1.997s] 3:                                                                              ^
[1.998s] 3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')
[1.998s] 3:                                                                                       ^
[1.998s] 3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')
[1.998s] 3:                                                                                                    ^
[1.998s] 3:             package="twist_mux",
[1.998s] 3:                     ^
[1.998s] 3:             executable="twist_mux",
[1.998s] 3:                        ^
[1.998s] 3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]
[1.998s] 3:                                        ^
[1.998s] 3:     default_world = os.path.join(
[1.999s] 3:     ^
[1.999s] 3:         )    
[1.999s] 3:          ^
[1.999s] 3:     
[1.999s] 3: ^
[1.999s] 3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()
[1.999s] 3:                     ^
[1.999s] 3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()
[2.000s] 3:                                                                                                    ^
[2.000s] 3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.
[2.000s] 3:                                                                                                    ^
[2.000s] 3:     diff_drive_spawner = Node(
[2.000s] 3:     ^
[2.000s] 3:         package="controller_manager",
[2.000s] 3:                 ^
[2.000s] 3:         executable="spawner",
[2.000s] 3:                    ^
[2.001s] 3:         arguments=["diff_cont"],
[2.001s] 3:                    ^
[2.001s] 3:         package="controller_manager",
[2.001s] 3:                 ^
[2.001s] 3:         executable="spawner",
[2.001s] 3:                    ^
[2.002s] 3:         arguments=["joint_broad"],
[2.002s] 3:                    ^
[2.002s] 3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')
[2.002s] 3:     ^
[2.002s] 3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')
[2.002s] 3:                                                                           ^
[2.003s] 3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')
[2.003s] 3:                                                                                    ^
[2.003s] 3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')
[2.003s] 3:                                                                                                    ^
[2.003s] 3:         package="ros_gz_bridge",
[2.004s] 3:                 ^
[2.004s] 3:         executable="parameter_bridge",
[2.004s] 3:                    ^
[2.004s] 3:         package="ros_gz_image",
[2.004s] 3:                 ^
[2.004s] 3:         executable="image_bridge",
[2.004s] 3:                    ^
[2.005s] 3:         arguments=["/camera/image_raw"]
[2.005s] 3:                    ^
[2.005s] 3:     # Code for delaying a node (I haven't tested how effective it is)
[2.005s] 3:     ^
[2.005s] 3:     # 
[2.005s] 3:      ^
[2.006s] 3:     # Launch them all!
[2.006s] 3:     ^
[2.006s] 3: from ament_index_python.packages import get_package_share_directory
[2.006s] 3: ^
[2.006s] 3:     default_params_file = os.path.join(get_package_share_directory("articubot_one"),
[2.007s] 3:                                                                    ^
[2.007s] 3: import os
[2.007s] 3: ^
[2.008s] 3: ./launch/joystick.launch.py:3:1: I100 Import statements are in the wrong order. 'from launch.substitutions import LaunchConfiguration' should be before 'from launch_ros.actions import Node'
[2.008s] 3: 
[2.008s] 3: ./launch/joystick.launch.py:4:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration'
[2.008s] 3: 
[2.008s] 3: ./launch/joystick.launch.py:6:1: I100 Import statements are in the wrong order. 'import os' should be before 'from launch.actions import DeclareLaunchArgument' and in a different group.
[2.009s] 3: 
[2.009s] 3: ./launch/joystick.launch.py:7:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.
[2.009s] 3: 
[2.009s] 3: ./launch/joystick.launch.py:9:1: E302 expected 2 blank lines, found 1
[2.009s] 3: 
[2.009s] 3: ./launch/joystick.launch.py:12:75: E231 missing whitespace after ','
[2.010s] 3: 
[2.010s] 3: ./launch/joystick.launch.py:12:84: E231 missing whitespace after ','
[2.010s] 3: 
[2.010s] 3: ./launch/joystick.launch.py:12:100: E501 line too long (100 > 99 characters)
[2.010s] 3: 
[2.011s] 3: ./launch/joystick.launch.py:25:36: E231 missing whitespace after ','
[2.011s] 3: 
[2.011s] 3: ./launch/joystick.launch.py:32:39: E231 missing whitespace after ','
[2.011s] 3: 
[2.011s] 3: ./launch/joystick.launch.py:33:40: E231 missing whitespace after ','
[2.011s] 3: 
[2.012s] 3: ./launch/joystick.launch.py:37:5: E303 too many blank lines (2)
[2.012s] 3: 
[2.012s] 3: ./launch/joystick.launch.py:44:22: W291 trailing whitespace
[2.012s] 3: 
[2.012s] 3: ./launch/joystick.launch.py:45:7: W292 no newline at end of file
[2.013s] 3: 
[2.013s] 3: ./launch/launch_robot.launch.py:10:1: I100 Import statements are in the wrong order. 'from launch.actions import RegisterEventHandler' should be before 'from launch.substitutions import Command'
[2.013s] 3: 
[2.013s] 3: ./launch/launch_robot.launch.py:17:1: E303 too many blank lines (3)
[2.013s] 3: 
[2.014s] 3: ./launch/launch_robot.launch.py:20:5: E303 too many blank lines (2)
[2.014s] 3: 
[2.014s] 3: ./launch/launch_robot.launch.py:20:100: E501 line too long (110 > 99 characters)
[2.014s] 3: 
[2.014s] 3: ./launch/launch_robot.launch.py:23:17: E225 missing whitespace around operator
[2.015s] 3: 
[2.015s] 3: ./launch/launch_robot.launch.py:23:33: E261 at least two spaces before inline comment
[2.015s] 3: 
[2.015s] 3: ./launch/launch_robot.launch.py:23:34: E262 inline comment should start with '# '
[2.015s] 3: 
[2.016s] 3: ./launch/launch_robot.launch.py:27:62: E231 missing whitespace after ','
[2.016s] 3: 
[2.016s] 3: ./launch/launch_robot.launch.py:27:71: E231 missing whitespace after ','
[2.016s] 3: 
[2.016s] 3: ./launch/launch_robot.launch.py:38:5: E303 too many blank lines (2)
[2.017s] 3: 
[2.017s] 3: ./launch/launch_robot.launch.py:38:78: E231 missing whitespace after ','
[2.017s] 3: 
[2.017s] 3: ./launch/launch_robot.launch.py:38:87: E231 missing whitespace after ','
[2.017s] 3: 
[2.017s] 3: ./launch/launch_robot.launch.py:38:100: E501 line too long (104 > 99 characters)
[2.018s] 3: 
[2.018s] 3: ./launch/launch_robot.launch.py:40:21: Q000 Double quotes found but single quotes preferred
[2.018s] 3: 
[2.018s] 3: ./launch/launch_robot.launch.py:41:24: Q000 Double quotes found but single quotes preferred
[2.018s] 3: 
[2.019s] 3: ./launch/launch_robot.launch.py:43:40: E231 missing whitespace after ','
[2.019s] 3: 
[2.019s] 3: ./launch/launch_robot.launch.py:46:1: W293 blank line contains whitespace
[2.019s] 3: 
[2.019s] 3: ./launch/launch_robot.launch.py:49:5: E303 too many blank lines (4)
[2.019s] 3: 
[2.020s] 3: ./launch/launch_robot.launch.py:49:100: E501 line too long (104 > 99 characters)
[2.020s] 3: 
[2.020s] 3: ./launch/launch_robot.launch.py:51:84: E231 missing whitespace after ','
[2.020s] 3: 
[2.020s] 3: ./launch/launch_robot.launch.py:51:93: E231 missing whitespace after ','
[2.021s] 3: 
[2.021s] 3: ./launch/launch_robot.launch.py:51:100: E501 line too long (115 > 99 characters)
[2.021s] 3: 
[2.021s] 3: ./launch/launch_robot.launch.py:54:17: Q000 Double quotes found but single quotes preferred
[2.021s] 3: 
[2.022s] 3: ./launch/launch_robot.launch.py:55:20: Q000 Double quotes found but single quotes preferred
[2.022s] 3: 
[2.022s] 3: ./launch/launch_robot.launch.py:63:17: Q000 Double quotes found but single quotes preferred
[2.022s] 3: 
[2.022s] 3: ./launch/launch_robot.launch.py:64:20: Q000 Double quotes found but single quotes preferred
[2.023s] 3: 
[2.023s] 3: ./launch/launch_robot.launch.py:65:20: Q000 Double quotes found but single quotes preferred
[2.023s] 3: 
[2.023s] 3: ./launch/launch_robot.launch.py:76:17: Q000 Double quotes found but single quotes preferred
[2.023s] 3: 
[2.024s] 3: ./launch/launch_robot.launch.py:77:20: Q000 Double quotes found but single quotes preferred
[2.024s] 3: 
[2.024s] 3: ./launch/launch_robot.launch.py:78:20: Q000 Double quotes found but single quotes preferred
[2.024s] 3: 
[2.024s] 3: ./launch/launch_robot.launch.py:89:5: E303 too many blank lines (2)
[2.024s] 3: 
[2.025s] 3: ./launch/launch_robot.launch.py:90:6: W291 trailing whitespace
[2.025s] 3: 
[2.025s] 3: ./launch/launch_robot.launch.py:107:5: E303 too many blank lines (3)
[2.025s] 3: 
[2.026s] 3: ./launch/launch_sim.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription
[2.026s] 3: 
[2.026s] 3: ./launch/launch_sim.launch.py:15:1: E303 too many blank lines (3)
[2.026s] 3: 
[2.027s] 3: ./launch/launch_sim.launch.py:18:5: E303 too many blank lines (2)
[2.027s] 3: 
[2.027s] 3: ./launch/launch_sim.launch.py:18:100: E501 line too long (110 > 99 characters)
[2.027s] 3: 
[2.027s] 3: ./launch/launch_sim.launch.py:21:17: E225 missing whitespace around operator
[2.028s] 3: 
[2.028s] 3: ./launch/launch_sim.launch.py:21:33: E261 at least two spaces before inline comment
[2.028s] 3: 
[2.029s] 3: ./launch/launch_sim.launch.py:21:34: E262 inline comment should start with '# '
[2.029s] 3: 
[2.029s] 3: ./launch/launch_sim.launch.py:25:62: E231 missing whitespace after ','
[2.029s] 3: 
[2.029s] 3: ./launch/launch_sim.launch.py:25:71: E231 missing whitespace after ','
[2.030s] 3: 
[2.030s] 3: ./launch/launch_sim.launch.py:31:62: E231 missing whitespace after ','
[2.030s] 3: 
[2.030s] 3: ./launch/launch_sim.launch.py:31:71: E231 missing whitespace after ','
[2.030s] 3: 
[2.031s] 3: ./launch/launch_sim.launch.py:35:78: E231 missing whitespace after ','
[2.031s] 3: 
[2.031s] 3: ./launch/launch_sim.launch.py:35:87: E231 missing whitespace after ','
[2.031s] 3: 
[2.031s] 3: ./launch/launch_sim.launch.py:35:100: E501 line too long (104 > 99 characters)
[2.031s] 3: 
[2.032s] 3: ./launch/launch_sim.launch.py:37:21: Q000 Double quotes found but single quotes preferred
[2.032s] 3: 
[2.032s] 3: ./launch/launch_sim.launch.py:38:24: Q000 Double quotes found but single quotes preferred
[2.032s] 3: 
[2.032s] 3: ./launch/launch_sim.launch.py:40:40: E231 missing whitespace after ','
[2.033s] 3: 
[2.033s] 3: ./launch/launch_sim.launch.py:44:5: E303 too many blank lines (2)
[2.033s] 3: 
[2.033s] 3: ./launch/launch_sim.launch.py:48:10: W291 trailing whitespace
[2.033s] 3: 
[2.033s] 3: ./launch/launch_sim.launch.py:49:1: W293 blank line contains whitespace
[2.034s] 3: 
[2.034s] 3: ./launch/launch_sim.launch.py:62:21: E131 continuation line unaligned for hanging indent
[2.034s] 3: 
[2.034s] 3: ./launch/launch_sim.launch.py:62:100: E501 line too long (104 > 99 characters)
[2.034s] 3: 
[2.034s] 3: ./launch/launch_sim.launch.py:65:100: E501 line too long (126 > 99 characters)
[2.035s] 3: 
[2.035s] 3: ./launch/launch_sim.launch.py:73:5: E303 too many blank lines (2)
[2.035s] 3: 
[2.035s] 3: ./launch/launch_sim.launch.py:74:17: Q000 Double quotes found but single quotes preferred
[2.035s] 3: 
[2.035s] 3: ./launch/launch_sim.launch.py:75:20: Q000 Double quotes found but single quotes preferred
[2.035s] 3: 
[2.035s] 3: ./launch/launch_sim.launch.py:76:20: Q000 Double quotes found but single quotes preferred
[2.035s] 3: 
[2.036s] 3: ./launch/launch_sim.launch.py:80:17: Q000 Double quotes found but single quotes preferred
[2.036s] 3: 
[2.036s] 3: ./launch/launch_sim.launch.py:81:20: Q000 Double quotes found but single quotes preferred
[2.036s] 3: 
[2.036s] 3: ./launch/launch_sim.launch.py:82:20: Q000 Double quotes found but single quotes preferred
[2.036s] 3: 
[2.037s] 3: ./launch/launch_sim.launch.py:86:5: E303 too many blank lines (2)
[2.037s] 3: 
[2.037s] 3: ./launch/launch_sim.launch.py:86:75: E231 missing whitespace after ','
[2.037s] 3: 
[2.037s] 3: ./launch/launch_sim.launch.py:86:84: E231 missing whitespace after ','
[2.038s] 3: 
[2.038s] 3: ./launch/launch_sim.launch.py:86:100: E501 line too long (101 > 99 characters)
[2.038s] 3: 
[2.038s] 3: ./launch/launch_sim.launch.py:88:17: Q000 Double quotes found but single quotes preferred
[2.038s] 3: 
[2.039s] 3: ./launch/launch_sim.launch.py:89:20: Q000 Double quotes found but single quotes preferred
[2.039s] 3: 
[2.039s] 3: ./launch/launch_sim.launch.py:98:17: Q000 Double quotes found but single quotes preferred
[2.039s] 3: 
[2.039s] 3: ./launch/launch_sim.launch.py:99:20: Q000 Double quotes found but single quotes preferred
[2.039s] 3: 
[2.040s] 3: ./launch/launch_sim.launch.py:100:20: Q000 Double quotes found but single quotes preferred
[2.040s] 3: 
[2.040s] 3: ./launch/launch_sim.launch.py:105:5: E303 too many blank lines (3)
[2.040s] 3: 
[2.040s] 3: ./launch/launch_sim.launch.py:106:6: W291 trailing whitespace
[2.040s] 3: 
[2.041s] 3: ./launch/launch_sim.launch.py:123:5: E303 too many blank lines (3)
[2.041s] 3: 
[2.041s] 3: ./launch/online_async_launch.py:8:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'from launch_ros.actions import Node'
[2.041s] 3: 
[2.041s] 3: ./launch/online_async_launch.py:15:68: Q000 Double quotes found but single quotes preferred
[2.041s] 3: 
[2.041s] 3: ./launch/rplidar.launch.py:1:1: F401 'os' imported but unused
[2.041s] 3: 
[2.042s] 3: ./launch/rplidar.launch.py:2:1: I201 Missing newline between import groups. 'from launch import LaunchDescription' is identified as Third Party and 'import os' is identified as Stdlib.
[2.042s] 3: from launch import LaunchDescription
[2.042s] 3: ^
[2.042s] 3: def generate_launch_description():
[2.042s] 3: ^
[2.042s] 3:                 'serial_port': '/dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.3:1.0-port0',
[2.042s] 3:                                                                                                    ^
[2.042s] 3: from launch.substitutions import LaunchConfiguration, Command
[2.042s] 3: ^
[2.043s] 3: from launch.actions import DeclareLaunchArgument
[2.043s] 3: ^
[2.043s] 3: import xacro
[2.043s] 3: ^
[2.043s] 3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')
[2.044s] 3:                                       ^
[2.044s] 3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')
[2.044s] 3:                                                     ^
[2.044s] 3:     robot_description_config = Command(['xacro ', xacro_file, ' use_ros2_control:=', use_ros2_control, ' sim_mode:=', use_sim_time])
[2.044s] 3:                                                                                                    ^
[2.045s] 3:     
[2.045s] 3: ^
[2.045s] 3:     # Launch!
[2.045s] 3:     ^
[2.046s] 3: import xacro
[2.046s] 3: ^
[2.046s] 3: from ament_index_python.packages import get_package_share_directory
[2.046s] 3: ^
[2.046s] 3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument
[2.047s] 3: ^
[2.047s] 3: from launch.conditions import IfCondition, UnlessCondition
[2.047s] 3: ^
[2.047s] 3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled
[2.047s] 3:     ^
[2.047s] 3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled
[2.047s] 3:                                                                                                    ^
[2.047s] 3:     package_name='articubot_one' #<--- CHANGE ME
[2.048s] 3:                 ^
[2.048s] 3:     package_name='articubot_one' #<--- CHANGE ME
[2.048s] 3:                                 ^
[2.048s] 3:     package_name='articubot_one' #<--- CHANGE ME
[2.048s] 3:                                  ^
[2.048s] 3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'
[2.048s] 3:                                                              ^
[2.048s] 3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'
[2.048s] 3:                                                                       ^
[2.049s] 3:         )    
[2.049s] 3:          ^
[2.049s] 3:     
[2.049s] 3: ^
[2.049s] 3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()
[2.049s] 3:                     ^
[2.049s] 3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()
[2.049s] 3:                                                                                                    ^
[2.049s] 3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.
[2.050s] 3:                                                                                                    ^
[2.050s] 3:     '''
[2.050s] 3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')
[2.050s] 3:     ros_gz_bridge = Node(
[2.050s] 3:         package="ros_gz_bridge",
[2.050s] 3:         executable="parameter_bridge",
[2.050s] 3:         arguments=[
[2.050s] 3:             '--ros-args',
[2.050s] 3:             '-p',
[2.051s] 3:             f'config_file:={bridge_params}',
[2.051s] 3:         ]
[2.051s] 3:     )
[2.051s] 3:     '''
[2.051s] 3:     ^
[2.052s] 3:     '''
[2.052s] 3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')
[2.052s] 3:     ros_gz_bridge = Node(
[2.052s] 3:         package="ros_gz_bridge",
[2.052s] 3:         executable="parameter_bridge",
[2.053s] 3:         arguments=[
[2.053s] 3:             '--ros-args',
[2.053s] 3:             '-p',
[2.053s] 3:             f'config_file:={bridge_params}',
[2.053s] 3:         ]
[2.054s] 3:     )
[2.054s] 3:     '''
[2.054s] 3:     ^
[2.054s] 3:     '''
[2.054s] 3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')
[2.054s] 3:     ros_gz_bridge = Node(
[2.055s] 3:         package="ros_gz_bridge",
[2.055s] 3:         executable="parameter_bridge",
[2.055s] 3:         arguments=[
[2.055s] 3:             '--ros-args',
[2.055s] 3:             '-p',
[2.055s] 3:             f'config_file:={bridge_params}',
[2.055s] 3:         ]
[2.055s] 3:     )
[2.055s] 3:     '''
[2.055s] 3:        
[2.056s] 3:                                                                                            ^
[2.056s] 3:     package='ros_gz_bridge',
[2.056s] 3:     ^
[2.056s] 3:     executable='parameter_bridge',
[2.056s] 3:     ^
[2.056s] 3:     arguments=[
[2.056s] 3:     ^
[2.056s] 3:           '/odom@nav_msgs/msg/Odometry@gz.msgs.Odometry',
[2.056s] 3:           ^
[2.057s] 3:          '/scan@sensor_msgs/msg/LaserScan@gz.msgs.LaserScan',
[2.057s] 3:          ^
[2.057s] 3:     output='screen'
[2.057s] 3:     ^
[2.057s] 3: )
[2.057s] 3: ^
[2.057s] 3:         package="ros_gz_image",
[2.057s] 3:                 ^
[2.057s] 3:         executable="image_bridge",
[2.057s] 3:                    ^
[2.058s] 3:         arguments=["/camera/image_raw"]
[2.058s] 3:                    ^
[2.058s] 3:     #Adding rviz plugin
[2.058s] 3:     ^
[2.058s] 3:     share_dir=get_package_share_directory('articubot_one')
[2.058s] 3:              ^
[2.059s] 3:     
[2.059s] 3: ^
[2.059s] 3:         
[2.059s] 3: ^
[2.059s] 3:         
[2.060s] 3: ^
[2.060s] 3:         
[2.060s] 3: ^
[2.060s] 3: from sensor_msgs.msg import LaserScan
[2.060s] 3: ^
[2.061s] 3: from geometry_msgs.msg import Twist 
[2.061s] 3: ^
[2.061s] 3: from geometry_msgs.msg import Twist 
[2.061s] 3: ^
[2.061s] 3: from geometry_msgs.msg import Twist 
[2.061s] 3:                                    ^
[2.062s] 3: from articubot_one.obstacle_avoidance import Obstacle 
[2.062s] 3: ^
[2.062s] 3: from articubot_one.obstacle_avoidance import Obstacle 
[2.062s] 3:                                                      ^
[2.062s] 3: def test_node_creation():
[2.062s] 3: ^
[2.063s] 3:     try :
[2.063s] 3:        ^
[2.063s] 3:         node=Obstacle()
[2.063s] 3:             ^
[2.063s] 3:         assert node.get_name()=="Laser_Obstacle_Avoidance"
[2.063s] 3:                               ^
[2.063s] 3:         assert node.get_name()=="Laser_Obstacle_Avoidance"
[2.063s] 3:                                 ^
[2.063s] 3:         assert hasattr(node,'laser_sub')
[2.064s] 3:                            ^
[2.064s] 3:         # verify that the node is publishing to the correct topic by name 
[2.064s] 3:                                                                          ^
[2.064s] 3:         assert hasattr(node,'cmd_vel_pub')
[2.064s] 3:                            ^
[2.064s] 3:     finally :
[2.064s] 3:            ^
[2.064s] 3: def test_parameter_node():
[2.064s] 3: ^
[2.064s] 3:     try :
[2.065s] 3:        ^
[2.065s] 3:     finally :
[2.065s] 3:            ^
[2.065s] 3: def test_obstacle():
[2.065s] 3: ^
[2.065s] 3:     try :
[2.065s] 3:        ^
[2.065s] 3:         node=Obstacle()
[2.066s] 3:             ^
[2.066s] 3:         #get values of parameters
[2.066s] 3:         ^
[2.066s] 3:         threshold=node.get_parameter('threshold_distance').value
[2.066s] 3:                  ^
[2.066s] 3:         scan_topic=node.get_parameter("laser_scan_topic").value
[2.067s] 3:                   ^
[2.067s] 3:         scan_topic=node.get_parameter("laser_scan_topic").value
[2.067s] 3:                                       ^
[2.067s] 3:         cmd_topic=node.get_parameter("cmd_vel_topic").value
[2.067s] 3:                  ^
[2.067s] 3:         cmd_topic=node.get_parameter("cmd_vel_topic").value
[2.068s] 3:                                      ^
[2.068s] 3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value
[2.068s] 3:                           ^
[2.068s] 3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value
[2.068s] 3:                                               ^
[2.068s] 3:         # assert the values are correct as expected 
[2.069s] 3:                                                    ^
[2.069s] 3:         # 1- check if the parameters are of expected classes 
[2.069s] 3:                                                             ^
[2.069s] 3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"
[2.069s] 3:                                    ^
[2.070s] 3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"
[2.070s] 3:                                           ^
[2.070s] 3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"
[2.070s] 3:                                            ^
[2.070s] 3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"
[2.070s] 3:                                             ^
[2.071s] 3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"
[2.071s] 3:                                             ^
[2.071s] 3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"
[2.071s] 3:                                     ^
[2.071s] 3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"
[2.071s] 3:                                            ^
[2.072s] 3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"
[2.072s] 3:                                            ^
[2.072s] 3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"
[2.072s] 3:                                    ^
[2.072s] 3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"
[2.073s] 3:                                           ^
[2.073s] 3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"
[2.073s] 3:                                           ^
[2.073s] 3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'
[2.073s] 3:                                             ^
[2.074s] 3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'
[2.074s] 3:                                                    ^
[2.074s] 3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'
[2.074s] 3:                                                     ^
[2.074s] 3:         # 2- check if the values of the parameters are correct 
[2.075s] 3:                                                               ^
[2.075s] 3:         assert scan_topic== "scan"
[2.075s] 3:                          ^
[2.075s] 3: 
[2.075s] 3: ./launch/rplidar.launch.py:5:1: E302 expected 2 blank lines, found 1
[2.076s] 3: 
[2.076s] 3: ./launch/rplidar.launch.py:14:100: E501 line too long (113 > 99 characters)
[2.076s] 3: 
[2.076s] 3: ./launch/rsp.launch.py:6:1: I101 Imported names are in the wrong order. Should be Command, LaunchConfiguration
[2.076s] 3: 
[2.076s] 3: ./launch/rsp.launch.py:7:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration, Command'
[2.077s] 3: 
[2.077s] 3: ./launch/rsp.launch.py:10:1: F401 'xacro' imported but unused
[2.077s] 3: 
[2.077s] 3: ./launch/rsp.launch.py:21:39: E231 missing whitespace after ','
[2.077s] 3: 
[2.077s] 3: ./launch/rsp.launch.py:21:53: E231 missing whitespace after ','
[2.078s] 3: 
[2.078s] 3: ./launch/rsp.launch.py:23:100: E501 line too long (132 > 99 characters)
[2.078s] 3: 
[2.078s] 3: ./launch/rsp.launch.py:24:1: W293 blank line contains whitespace
[2.078s] 3: 
[2.078s] 3: ./launch/rsp.launch.py:35:5: E303 too many blank lines (2)
[2.078s] 3: 
[2.078s] 3: ./launch/rviz_gazebo.launch.py:2:1: I201 Missing newline between import groups. 'import xacro' is identified as Third Party and 'import os' is identified as Stdlib.
[2.078s] 3: 
[2.079s] 3: ./launch/rviz_gazebo.launch.py:3:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'import xacro'
[2.079s] 3: 
[2.079s] 3: ./launch/rviz_gazebo.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription
[2.079s] 3: 
[2.079s] 3: ./launch/rviz_gazebo.launch.py:12:1: I100 Import statements are in the wrong order. 'from launch.conditions import IfCondition, UnlessCondition' should be before 'from launch_ros.actions import Node'
[2.079s] 3: 
[2.079s] 3: ./launch/rviz_gazebo.launch.py:18:5: E303 too many blank lines (2)
[2.079s] 3: 
[2.079s] 3: ./launch/rviz_gazebo.launch.py:18:100: E501 line too long (110 > 99 characters)
[2.079s] 3: 
[2.080s] 3: ./launch/rviz_gazebo.launch.py:21:17: E225 missing whitespace around operator
[2.080s] 3: 
[2.080s] 3: ./launch/rviz_gazebo.launch.py:21:33: E261 at least two spaces before inline comment
[2.080s] 3: 
[2.080s] 3: ./launch/rviz_gazebo.launch.py:21:34: E262 inline comment should start with '# '
[2.080s] 3: 
[2.080s] 3: ./launch/rviz_gazebo.launch.py:25:62: E231 missing whitespace after ','
[2.081s] 3: 
[2.081s] 3: ./launch/rviz_gazebo.launch.py:25:71: E231 missing whitespace after ','
[2.081s] 3: 
[2.081s] 3: ./launch/rviz_gazebo.launch.py:33:10: W291 trailing whitespace
[2.081s] 3: 
[2.082s] 3: ./launch/rviz_gazebo.launch.py:34:1: W293 blank line contains whitespace
[2.082s] 3: 
[2.082s] 3: ./launch/rviz_gazebo.launch.py:47:21: E131 continuation line unaligned for hanging indent
[2.082s] 3: 
[2.082s] 3: ./launch/rviz_gazebo.launch.py:47:100: E501 line too long (104 > 99 characters)
[2.083s] 3: 
[2.083s] 3: ./launch/rviz_gazebo.launch.py:50:100: E501 line too long (126 > 99 characters)
[2.083s] 3: 
[2.083s] 3: ./launch/rviz_gazebo.launch.py:58:5: Q001 Single quote multiline found but double quotes preferred
[2.083s] 3: 
[2.084s] 3: ./launch/rviz_gazebo.launch.py:58:5: E303 too many blank lines (2)
[2.084s] 3: 
[2.084s] 3: ./launch/rviz_gazebo.launch.py:59:100: E501 line too long (101 > 99 characters)
[2.084s] 3: 
[2.084s] 3: ./launch/rviz_gazebo.launch.py:72:5: E122 continuation line missing indentation or outdented
[2.084s] 3: 
[2.085s] 3: ./launch/rviz_gazebo.launch.py:73:5: E122 continuation line missing indentation or outdented
[2.085s] 3: 
[2.085s] 3: ./launch/rviz_gazebo.launch.py:74:5: E122 continuation line missing indentation or outdented
[2.085s] 3: 
[2.085s] 3: ./launch/rviz_gazebo.launch.py:77:11: E131 continuation line unaligned for hanging indent
[2.085s] 3: 
[2.085s] 3: ./launch/rviz_gazebo.launch.py:78:10: E131 continuation line unaligned for hanging indent
[2.085s] 3: 
[2.085s] 3: ./launch/rviz_gazebo.launch.py:81:5: E122 continuation line missing indentation or outdented
[2.085s] 3: 
[2.086s] 3: ./launch/rviz_gazebo.launch.py:82:1: E122 continuation line missing indentation or outdented
[2.086s] 3: 
[2.086s] 3: ./launch/rviz_gazebo.launch.py:85:17: Q000 Double quotes found but single quotes preferred
[2.086s] 3: 
[2.086s] 3: ./launch/rviz_gazebo.launch.py:86:20: Q000 Double quotes found but single quotes preferred
[2.086s] 3: 
[2.086s] 3: ./launch/rviz_gazebo.launch.py:87:20: Q000 Double quotes found but single quotes preferred
[2.086s] 3: 
[2.086s] 3: ./launch/rviz_gazebo.launch.py:89:5: E265 block comment should start with '# '
[2.087s] 3: 
[2.087s] 3: ./launch/rviz_gazebo.launch.py:90:14: E225 missing whitespace around operator
[2.087s] 3: 
[2.087s] 3: ./launch/rviz_gazebo.launch.py:96:1: W293 blank line contains whitespace
[2.087s] 3: 
[2.087s] 3: ./launch/rviz_gazebo.launch.py:136:1: W293 blank line contains whitespace
[2.087s] 3: 
[2.087s] 3: ./launch/rviz_gazebo.launch.py:140:1: W293 blank line contains whitespace
[2.087s] 3: 
[2.087s] 3: ./launch/rviz_gazebo.launch.py:144:1: W293 blank line contains whitespace
[2.088s] 3: 
[2.088s] 3: ./test/pytest/test_laserObstacle.py:5:1: F401 'sensor_msgs.msg.LaserScan' imported but unused
[2.088s] 3: 
[2.088s] 3: ./test/pytest/test_laserObstacle.py:6:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'
[2.088s] 3: 
[2.088s] 3: ./test/pytest/test_laserObstacle.py:6:1: F401 'geometry_msgs.msg.Twist' imported but unused
[2.089s] 3: 
[2.089s] 3: ./test/pytest/test_laserObstacle.py:6:36: W291 trailing whitespace
[2.089s] 3: 
[2.089s] 3: ./test/pytest/test_laserObstacle.py:8:1: I100 Import statements are in the wrong order. 'from articubot_one.obstacle_avoidance import Obstacle' should be before 'from geometry_msgs.msg import Twist'
[2.089s] 3: 
[2.089s] 3: ./test/pytest/test_laserObstacle.py:8:54: W291 trailing whitespace
[2.090s] 3: 
[2.090s] 3: ./test/pytest/test_laserObstacle.py:10:1: E302 expected 2 blank lines, found 1
[2.090s] 3: 
[2.090s] 3: ./test/pytest/test_laserObstacle.py:12:8: E203 whitespace before ':'
[2.091s] 3: 
[2.091s] 3: ./test/pytest/test_laserObstacle.py:13:13: E225 missing whitespace around operator
[2.091s] 3: 
[2.091s] 3: ./test/pytest/test_laserObstacle.py:15:31: E225 missing whitespace around operator
[2.091s] 3: 
[2.091s] 3: ./test/pytest/test_laserObstacle.py:15:33: Q000 Double quotes found but single quotes preferred
[2.091s] 3: 
[2.091s] 3: ./test/pytest/test_laserObstacle.py:17:28: E231 missing whitespace after ','
[2.092s] 3: 
[2.092s] 3: ./test/pytest/test_laserObstacle.py:19:74: W291 trailing whitespace
[2.092s] 3: 
[2.092s] 3: ./test/pytest/test_laserObstacle.py:20:28: E231 missing whitespace after ','
[2.092s] 3: 
[2.092s] 3: ./test/pytest/test_laserObstacle.py:22:12: E203 whitespace before ':'
[2.092s] 3: 
[2.092s] 3: ./test/pytest/test_laserObstacle.py:24:1: E302 expected 2 blank lines, found 0
[2.092s] 3: 
[2.092s] 3: ./test/pytest/test_laserObstacle.py:26:8: E203 whitespace before ':'
[2.093s] 3: 
[2.093s] 3: ./test/pytest/test_laserObstacle.py:28:12: E203 whitespace before ':'
[2.093s] 3: 
[2.093s] 3: ./test/pytest/test_laserObstacle.py:30:1: E302 expected 2 blank lines, found 0
[2.093s] 3: 
[2.093s] 3: ./test/pytest/test_laserObstacle.py:32:8: E203 whitespace before ':'
[2.093s] 3: 
[2.093s] 3: ./test/pytest/test_laserObstacle.py:33:13: E225 missing whitespace around operator
[2.093s] 3: 
[2.093s] 3: ./test/pytest/test_laserObstacle.py:34:9: E265 block comment should start with '# '
[2.094s] 3: 
[2.094s] 3: ./test/pytest/test_laserObstacle.py:35:18: E225 missing whitespace around operator
[2.094s] 3: 
[2.094s] 3: ./test/pytest/test_laserObstacle.py:36:19: E225 missing whitespace around operator
[2.094s] 3: 
[2.094s] 3: ./test/pytest/test_laserObstacle.py:36:39: Q000 Double quotes found but single quotes preferred
[2.094s] 3: 
[2.094s] 3: ./test/pytest/test_laserObstacle.py:37:18: E225 missing whitespace around operator
[2.094s] 3: 
[2.094s] 3: ./test/pytest/test_laserObstacle.py:37:38: Q000 Double quotes found but single quotes preferred
[2.095s] 3: 
[2.095s] 3: ./test/pytest/test_laserObstacle.py:38:27: E225 missing whitespace around operator
[2.095s] 3: 
[2.095s] 3: ./test/pytest/test_laserObstacle.py:38:47: Q000 Double quotes found but single quotes preferred
[2.095s] 3: 
[2.095s] 3: ./test/pytest/test_laserObstacle.py:39:52: W291 trailing whitespace
[2.095s] 3: 
[2.096s] 3: ./test/pytest/test_laserObstacle.py:40:61: W291 trailing whitespace
[2.096s] 3: 
[2.096s] 3: ./test/pytest/test_laserObstacle.py:41:36: E231 missing whitespace after ','
[2.096s] 3: 
[2.096s] 3: ./test/pytest/test_laserObstacle.py:41:43: E203 whitespace before ','
[2.096s] 3: 
[2.097s] 3: ./test/pytest/test_laserObstacle.py:41:44: E231 missing whitespace after ','
[2.097s] 3: 
[2.097s] 3: ./test/pytest/test_laserObstacle.py:41:45: Q000 Double quotes found but single quotes preferred
[2.097s] 3: 
[2.097s] 3: ./test/pytest/test_laserObstacle.py:41:45: F541 f-string is missing placeholders
[2.097s] 3: 
[2.097s] 3: ./test/pytest/test_laserObstacle.py:42:37: E231 missing whitespace after ','
[2.098s] 3: 
[2.098s] 3: ./test/pytest/test_laserObstacle.py:42:44: Q000 Double quotes found but single quotes preferred
[2.098s] 3: 
[2.098s] 3: ./test/pytest/test_laserObstacle.py:42:44: F541 f-string is missing placeholders
[2.099s] 3: 
[2.099s] 3: ./test/pytest/test_laserObstacle.py:43:36: E231 missing whitespace after ','
[2.099s] 3: 
[2.099s] 3: ./test/pytest/test_laserObstacle.py:43:43: Q000 Double quotes found but single quotes preferred
[2.099s] 3: 
[2.099s] 3: ./test/pytest/test_laserObstacle.py:43:43: F541 f-string is missing placeholders
[2.099s] 3: 
[2.099s] 3: ./test/pytest/test_laserObstacle.py:44:45: E231 missing whitespace after ','
[2.099s] 3: 
[2.100s] 3: ./test/pytest/test_laserObstacle.py:44:52: E231 missing whitespace after ','
[2.100s] 3: 
[2.100s] 3: ./test/pytest/test_laserObstacle.py:44:53: F541 f-string is missing placeholders
[2.100s] 3: 
[2.100s] 3: ./test/pytest/test_laserObstacle.py:45:63: W291 trailing whitespace
[2.100s] 3: 
[2.100s] 3: ./test/pytest/test_laserObstacle.py:47:26: E225 missing whitespace around operator
[2.100s] 3: 
[2.100s] 3:         assert scan_topic== "scan"
[2.101s] 3:                             ^
[2.101s] 3:         assert cmd_topic == "cmd_vel"
[2.101s] 3:                             ^
[2.101s] 3:         assert front_sector_angle == 60.0 
[2.101s] 3:                                          ^
[2.101s] 3:     finally :
[2.101s] 3:            ^
[2.101s] 3: if __name__=='__main__' :
[2.101s] 3:            ^
[2.101s] 3: if __name__=='__main__' :
[2.102s] 3:                        ^
[2.102s] 3: 7     E111 indentation is not a multiple of 4
[2.102s] 3: 1     E114 indentation is not a multiple of 4 (comment)
[2.102s] 3: 2     E117 over-indented (comment)
[2.102s] 3: 6     E122 continuation line missing indentation or outdented
[2.102s] 3: 3     E128 continuation line under-indented for visual indent
[2.102s] 3: 5     E131 continuation line unaligned for hanging indent
[2.102s] 3: 11    E203 whitespace before ':'
[2.102s] 3: 18    E225 missing whitespace around operator
[2.103s] 3: 44    E231 missing whitespace after ','
[2.103s] 3: 4     E261 at least two spaces before inline comment
[2.103s] 3: 3     E262 inline comment should start with '# '
[2.103s] 3: 6     E265 block comment should start with '# '
[2.103s] 3: 1     E275 missing whitespace after keyword
[2.104s] 3: 7     E302 expected 2 blank lines, found 1
[2.104s] 3: 19    E303 too many blank lines (2)
[2.104s] 3: 1     E305 expected 2 blank lines after class or function definition, found 1
[2.104s] 3: 30    E501 line too long (110 > 99 characters)
[2.105s] 3: 5     F401 'os' imported but unused
[2.105s] 3: 5     F541 f-string is missing placeholders
[2.105s] 3: 13    I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'
[2.105s] 3: 3     I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription
[2.106s] 3: 5     I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.
[2.106s] 3: 45    Q000 Double quotes found but single quotes preferred
[2.106s] 3: 1     Q001 Single quote multiline found but double quotes preferred
[2.106s] 3: 22    W291 trailing whitespace
[2.106s] 3: 1     W292 no newline at end of file
[2.106s] 3: 14    W293 blank line contains whitespace
[2.106s] 3: ./test/pytest/test_laserObstacle.py:47:29: Q000 Double quotes found but single quotes preferred
[2.107s] 3: 
[2.107s] 3: ./test/pytest/test_laserObstacle.py:48:29: Q000 Double quotes found but single quotes preferred
[2.107s] 3: 
[2.107s] 3: ./test/pytest/test_laserObstacle.py:49:42: W291 trailing whitespace
[2.107s] 3: 
[2.107s] 3: ./test/pytest/test_laserObstacle.py:50:12: E203 whitespace before ':'
[2.107s] 3: 
[2.107s] 3: ./test/pytest/test_laserObstacle.py:54:12: E225 missing whitespace around operator
[2.107s] 3: 
[2.108s] 3: ./test/pytest/test_laserObstacle.py:54:24: E203 whitespace before ':'
[2.108s] 3: 
[2.108s] 3: 
[2.108s] 3: 15 files checked
[2.108s] 3: 282 errors
[2.108s] 3: 
[2.108s] 3: 'E'-type errors: 168
[2.108s] 3: 'F'-type errors: 10
[2.109s] 3: 'I'-type errors: 21
[2.109s] 3: 'Q'-type errors: 46
[2.109s] 3: 'W'-type errors: 37
[2.109s] 3: 
[2.109s] 3: Checked files:
[2.109s] 3: 
[2.109s] 3: * ./setup.py
[2.109s] 3: * ./test/pytest/test_laserObstacle.py
[2.109s] 3: * ./articubot_one/obstacle_avoidance.py
[2.110s] 3: * ./articubot_one/__init__.py
[2.110s] 3: * ./launch/joystick.launch.py
[2.111s] 3: * ./launch/online_async_launch.py
[2.111s] 3: * ./launch/ball_tracker.launch.py
[2.111s] 3: * ./launch/localization_launch.py
[2.111s] 3: * ./launch/rviz_gazebo.launch.py
[2.112s] 3: * ./launch/navigation_launch.py
[2.112s] 3: * ./launch/rsp.launch.py
[2.112s] 3: * ./launch/launch_robot.launch.py
[2.112s] 3: * ./launch/camera.launch.py
[2.112s] 3: * ./launch/rplidar.launch.py
[2.113s] 3: * ./launch/launch_sim.launch.py
[2.113s] 3: -- run_test.py: return code 1
[2.113s] 3: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml'
[2.113s] 3/6 Test #3: flake8 ...........................***Failed    0.58 sec
[2.113s] test 4
[2.114s]     Start 4: lint_cmake
[2.114s] 
[2.114s] 4: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/jazzy/bin/ament_lint_cmake" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml"
[2.114s] 4: Working Directory: /home/jonatan/ros2_ws/src/articubot_one
[2.114s] 4: Test timeout computed to be: 60
[2.133s] 4: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':
[2.133s] 4:  - /opt/ros/jazzy/bin/ament_lint_cmake --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml
[2.235s] 4: CMakeLists.txt:40: Line ends in whitespace [whitespace/eol]
[2.235s] 4: CMakeLists.txt:55: Line ends in whitespace [whitespace/eol]
[2.235s] 4: 
[2.235s] 4: 
[2.235s] 4: 2 errors
[2.251s] 4: -- run_test.py: return code 1
[2.251s] 4: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml'
[2.266s] 4/6 Test #4: lint_cmake .......................***Failed    0.24 sec
[2.266s] test 5
[2.266s]     Start 5: pep257
[2.267s] 
[2.267s] 5: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_pep257/pep257.txt" "--command" "/opt/ros/jazzy/bin/ament_pep257" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml"
[2.267s] 5: Working Directory: /home/jonatan/ros2_ws/src/articubot_one
[2.267s] 5: Test timeout computed to be: 60
[2.348s] 5: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':
[2.348s] 5:  - /opt/ros/jazzy/bin/ament_pep257 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml
[2.550s] 5: checking ./articubot_one/__init__.py
[2.550s] 5: checking ./articubot_one/obstacle_avoidance.py
[2.550s] 5: checking ./launch/ball_tracker.launch.py
[2.550s] 5: checking ./launch/camera.launch.py
[2.550s] 5: checking ./launch/joystick.launch.py
[2.550s] 5: checking ./launch/launch_robot.launch.py
[2.551s] 5: checking ./launch/launch_sim.launch.py
[2.551s] 5: checking ./launch/localization_launch.py
[2.551s] 5: checking ./launch/navigation_launch.py
[2.551s] 5: checking ./launch/online_async_launch.py
[2.551s] 5: checking ./launch/rplidar.launch.py
[2.551s] 5: checking ./launch/rsp.launch.py
[2.552s] 5: checking ./launch/rviz_gazebo.launch.py
[2.552s] 5: checking ./setup.py
[2.552s] 5: checking ./test/pytest/test_laserObstacle.py
[2.552s] 5: No problems found
[2.574s] 5: -- run_test.py: return code 0
[2.574s] 5: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml'
[2.588s] 5/6 Test #5: pep257 ...........................   Passed    0.32 sec
[2.588s] test 6
[2.588s]     Start 6: xmllint
[2.588s] 
[2.588s] 6: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_xmllint/xmllint.txt" "--command" "/opt/ros/jazzy/bin/ament_xmllint" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml"
[2.588s] 6: Working Directory: /home/jonatan/ros2_ws/src/articubot_one
[2.589s] 6: Test timeout computed to be: 60
[2.673s] 6: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':
[2.673s] 6:  - /opt/ros/jazzy/bin/ament_xmllint --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml
[5.980s] 6: File 'package.xml' is valid
[5.981s] 6: 
[5.982s] 6: No problems found
[6.044s] 6: -- run_test.py: return code 0
[6.045s] 6: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml'
[6.099s] 6/6 Test #6: xmllint ..........................   Passed    3.51 sec
[6.102s] 
[6.103s] 33% tests passed[0;0m, [0;31m4 tests failed[0;0m out of 6
[6.104s] 
[6.105s] Label Time Summary:
[6.106s] copyright     =   0.40 sec*proc (1 test)
[6.107s] flake8        =   0.58 sec*proc (1 test)
[6.108s] lint_cmake    =   0.24 sec*proc (1 test)
[6.108s] linter        =   5.05 sec*proc (5 tests)
[6.109s] pep257        =   0.32 sec*proc (1 test)
[6.110s] pytest        =   1.00 sec*proc (1 test)
[6.111s] xmllint       =   3.51 sec*proc (1 test)
[6.112s] 
[6.112s] Total Test time (real) =   6.05 sec
[6.113s] 
[6.113s] The following tests FAILED:
[6.114s] 	[0;31m  1 - laser_obstacle_test (Failed)[0;0m
[6.114s] 	[0;31m  2 - copyright (Failed)[0;0m
[6.114s] 	[0;31m  3 - flake8 (Failed)[0;0m
[6.115s] 	[0;31m  4 - lint_cmake (Failed)[0;0m
[6.129s] Errors while running CTest
[6.130s] Output from these tests are in: /home/jonatan/ros2_ws/build/articubot_one/Testing/Temporary/LastTest.log
[6.130s] Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.
[6.137s] Invoked command in '/home/jonatan/ros2_ws/build/articubot_one' returned '8': AMENT_PREFIX_PATH=/home/jonatan/ros2_ws/install/articubot_one:${AMENT_PREFIX_PATH} CMAKE_PREFIX_PATH=/home/jonatan/ros2_ws/install/articubot_one:${CMAKE_PREFIX_PATH} PS1=\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ PYTHONPATH=/home/jonatan/ros2_ws/install/articubot_one/lib/python3.12/site-packages:${PYTHONPATH} /usr/bin/ctest -C Release -D ExperimentalTest --no-compress-output -V --force-new-ctest-process
