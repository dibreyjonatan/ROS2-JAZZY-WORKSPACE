[0.000000] (-) TimerEvent: {}
[0.000499] (articubot_one) JobQueued: {'identifier': 'articubot_one', 'dependencies': OrderedDict({'articubot_one': '/home/jonatan/ros2_ws/install/articubot_one'})}
[0.001352] (articubot_one) JobStarted: {'identifier': 'articubot_one'}
[0.033159] (articubot_one) Command: {'cmd': ['/usr/bin/ctest', '-C', 'Release', '-D', 'ExperimentalTest', '--no-compress-output', '-V', '--force-new-ctest-process'], 'cwd': '/home/jonatan/ros2_ws/build/articubot_one', 'env': OrderedDict({'GJS_DEBUG_TOPICS': 'JS ERROR;JS LOG', 'XDG_ACTIVATION_TOKEN': '2ddf9c17-5cf4-48ad-bc40-f39f8ecbfeb7', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'jonatan', 'GZ_CONFIG_PATH': '/opt/ros/jazzy/opt/gz_sim_vendor/share/gz:/opt/ros/jazzy/opt/sdformat_vendor/share/gz:/opt/ros/jazzy/opt/gz_gui_vendor/share/gz:/opt/ros/jazzy/opt/gz_transport_vendor/share/gz:/opt/ros/jazzy/opt/gz_rendering_vendor/share/gz:/opt/ros/jazzy/opt/gz_plugin_vendor/share/gz:/opt/ros/jazzy/opt/gz_fuel_tools_vendor/share/gz:/opt/ros/jazzy/opt/gz_msgs_vendor/share/gz:/opt/ros/jazzy/opt/gz_common_vendor/share/gz', 'XDG_SESSION_TYPE': 'wayland', 'CLUTTER_DISABLE_MIPMAPPED_TEXT': '1', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/opt/ros/jazzy/opt/gz_sim_vendor/lib:/opt/ros/jazzy/opt/gz_sensors_vendor/lib:/opt/ros/jazzy/opt/gz_physics_vendor/lib:/opt/ros/jazzy/opt/sdformat_vendor/lib:/opt/ros/jazzy/opt/rviz_ogre_vendor/lib:/opt/ros/jazzy/lib/x86_64-linux-gnu:/opt/ros/jazzy/opt/gz_gui_vendor/lib:/opt/ros/jazzy/opt/gz_transport_vendor/lib:/opt/ros/jazzy/opt/gz_rendering_vendor/lib:/opt/ros/jazzy/opt/gz_plugin_vendor/lib:/opt/ros/jazzy/opt/gz_fuel_tools_vendor/lib:/opt/ros/jazzy/opt/gz_msgs_vendor/lib:/opt/ros/jazzy/opt/gz_common_vendor/lib:/opt/ros/jazzy/opt/gz_math_vendor/lib:/opt/ros/jazzy/opt/gz_utils_vendor/lib:/opt/ros/jazzy/opt/gz_tools_vendor/lib:/opt/ros/jazzy/opt/gz_ogre_next_vendor/lib:/opt/ros/jazzy/opt/gz_dartsim_vendor/lib:/opt/ros/jazzy/opt/gz_cmake_vendor/lib:/opt/ros/jazzy/lib', 'LESS': '-R', 'HOME': '/home/jonatan', 'OLDPWD': '/home/jonatan', 'DESKTOP_SESSION': 'ubuntu', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'ZSH': '/home/jonatan/.oh-my-zsh', 'GIO_LAUNCHED_DESKTOP_FILE': '/usr/share/applications/terminator.desktop', 'ROS_PYTHON_VERSION': '3', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'GTK_MODULES': 'gail:atk-bridge', 'PAGER': 'less', 'PS1': '\\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$', 'MANAGERPID': '2008', 'P9K_TTY': 'old', 'SYSTEMD_EXEC_PID': '2272', 'GSM_SKIP_SSH_AGENT_WORKAROUND': 'true', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'GIO_LAUNCHED_DESKTOP_FILE_PID': '3097', 'WAYLAND_DISPLAY': 'wayland-0', 'ROS_DISTRO': 'jazzy', 'LOGNAME': 'jonatan', '_P9K_SSH_TTY': '/dev/pts/2', 'JOURNAL_STREAM': '9:19463', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'MEMORY_PRESSURE_WATCH': '/sys/fs/cgroup/user.slice/user-1000.slice/user@1000.service/session.slice/org.gnome.Shell@wayland.service/memory.pressure', 'XDG_SESSION_CLASS': 'user', 'USERNAME': 'jonatan', 'TERM': 'xterm-256color', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'PATH': '/opt/ros/jazzy/opt/gz_msgs_vendor/bin:/opt/ros/jazzy/opt/gz_tools_vendor/bin:/opt/ros/jazzy/opt/gz_ogre_next_vendor/bin:/opt/ros/jazzy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin', 'SESSION_MANAGER': 'local/HP-EliteBook-x360-1030-G2:@/tmp/.ICE-unix/2219,unix/HP-EliteBook-x360-1030-G2:/tmp/.ICE-unix/2219', 'INVOCATION_ID': '1d5efdbd10c34d46a8570a6c200c5332', 'XDG_MENU_PREFIX': 'gnome-', 'GNOME_SETUP_DISPLAY': ':1', 'XDG_RUNTIME_DIR': '/run/user/1000', 'DISPLAY': ':0', 'LANG': 'en_US.UTF-8', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'XMODIFIERS': '@im=ibus', 'XDG_SESSION_DESKTOP': 'ubuntu', 'XAUTHORITY': '/run/user/1000/.mutter-Xwaylandauth.DBMW62', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:', 'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh', 'AMENT_PREFIX_PATH': '/home/jonatan/ros2_ws/install/articubot_one:/opt/ros/jazzy', 'SHELL': '/usr/bin/zsh', 'TERMINATOR_UUID': 'urn:uuid:0947d2af-0509-4362-9f98-b841aba16eb4', 'QT_ACCESSIBILITY': '1', 'GDMSESSION': 'ubuntu', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'IGN_GAZEBO_RESOURCE_PATH': '/opt/ros/jazzy/share', 'GJS_DEBUG_OUTPUT': 'stderr', 'P9K_SSH': '0', 'ROS_AUTOMATIC_DISCOVERY_RANGE': 'SUBNET', 'QT_IM_MODULE': 'ibus', 'PWD': '/home/jonatan/ros2_ws/build/articubot_one', 'LC_ALL': 'en_US.UTF-8', '_P9K_TTY': '/dev/pts/2', 'XDG_DATA_DIRS': '/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'PYTHONPATH': '/home/jonatan/ros2_ws/install/articubot_one/lib/python3.12/site-packages:/opt/ros/jazzy/lib/python3.12/site-packages', 'COLCON': '1', 'MEMORY_PRESSURE_WRITE': 'c29tZSAyMDAwMDAgMjAwMDAwMAA=', 'VTE_VERSION': '7600', 'CMAKE_PREFIX_PATH': '/home/jonatan/ros2_ws/install/articubot_one:/opt/ros/jazzy/opt/gz_sim_vendor:/opt/ros/jazzy/opt/gz_sensors_vendor:/opt/ros/jazzy/opt/gz_physics_vendor:/opt/ros/jazzy/opt/sdformat_vendor:/opt/ros/jazzy/opt/gz_gui_vendor:/opt/ros/jazzy/opt/gz_transport_vendor:/opt/ros/jazzy/opt/gz_rendering_vendor:/opt/ros/jazzy/opt/gz_plugin_vendor:/opt/ros/jazzy/opt/gz_fuel_tools_vendor:/opt/ros/jazzy/opt/gz_msgs_vendor:/opt/ros/jazzy/opt/gz_common_vendor:/opt/ros/jazzy/opt/gz_math_vendor:/opt/ros/jazzy/opt/gz_utils_vendor:/opt/ros/jazzy/opt/gz_tools_vendor:/opt/ros/jazzy/opt/gz_ogre_next_vendor:/opt/ros/jazzy/opt/gz_dartsim_vendor:/opt/ros/jazzy/opt/gz_cmake_vendor'}), 'shell': False}
[0.046223] (articubot_one) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.046593] (articubot_one) StdoutLine: {'line': b'Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.046824] (articubot_one) StdoutLine: {'line': b'   Site: HP-EliteBook-x360-1030-G2\n'}
[0.047023] (articubot_one) StdoutLine: {'line': b'   Build name: (empty)\n'}
[0.047294] (articubot_one) StdoutLine: {'line': b' Add coverage exclude regular expressions.\n'}
[0.047494] (articubot_one) StdoutLine: {'line': b'Create new tag: 20250518-1845 - Experimental\n'}
[0.047667] (articubot_one) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.047830] (articubot_one) StdoutLine: {'line': b'Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.048058] (articubot_one) StdoutLine: {'line': b'Test project /home/jonatan/ros2_ws/build/articubot_one\n'}
[0.048280] (articubot_one) StdoutLine: {'line': b'Constructing a list of tests\n'}
[0.048601] (articubot_one) StdoutLine: {'line': b'Done constructing a list of tests\n'}
[0.048810] (articubot_one) StdoutLine: {'line': b'Updating test list for fixtures\n'}
[0.048962] (articubot_one) StdoutLine: {'line': b'Added 0 tests to meet fixture requirements\n'}
[0.049050] (articubot_one) StdoutLine: {'line': b'Checking test dependency graph...\n'}
[0.049134] (articubot_one) StdoutLine: {'line': b'Checking test dependency graph end\n'}
[0.049215] (articubot_one) StdoutLine: {'line': b'test 1\n'}
[0.049296] (articubot_one) StdoutLine: {'line': b'    Start 1: laser_obstacle_test\n'}
[0.049377] (articubot_one) StdoutLine: {'line': b'\n'}
[0.049512] (articubot_one) StdoutLine: {'line': b'1: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test.txt" "--command" "/usr/bin/python3" "-u" "-m" "pytest" "/home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py" "-o" "cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache" "--junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--junit-prefix=articubot_one"\n'}
[0.049699] (articubot_one) StdoutLine: {'line': b'1: Working Directory: /home/jonatan/ros2_ws/build/articubot_one\n'}
[0.049863] (articubot_one) StdoutLine: {'line': b'1: Test timeout computed to be: 360\n'}
[0.099942] (-) TimerEvent: {}
[0.128390] (articubot_one) StdoutLine: {'line': b"1: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/build/articubot_one':\n"}
[0.128580] (articubot_one) StdoutLine: {'line': b'1:  - /usr/bin/python3 -u -m pytest /home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py -o cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache --junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml --junit-prefix=articubot_one\n'}
[0.200059] (-) TimerEvent: {}
[0.300326] (-) TimerEvent: {}
[0.400574] (-) TimerEvent: {}
[0.500860] (-) TimerEvent: {}
[0.582143] (articubot_one) StdoutLine: {'line': b'1: ============================= test session starts ==============================\n'}
[0.582320] (articubot_one) StdoutLine: {'line': b'1: platform linux -- Python 3.12.3, pytest-7.4.4, pluggy-1.4.0\n'}
[0.587183] (articubot_one) StdoutLine: {'line': b'1: cachedir: /home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache\n'}
[0.587338] (articubot_one) StdoutLine: {'line': b'1: rootdir: /home/jonatan/ros2_ws/src/articubot_one\n'}
[0.587451] (articubot_one) StdoutLine: {'line': b'1: plugins: launch-testing-3.4.4, ament-xmllint-0.17.2, ament-pep257-0.17.2, ament-copyright-0.17.2, ament-flake8-0.17.2, launch-testing-ros-0.26.7, ament-lint-0.17.2, cov-4.1.0, typeguard-4.1.5, colcon-core-0.19.0\n'}
[0.600975] (-) TimerEvent: {}
[0.701234] (-) TimerEvent: {}
[0.801504] (-) TimerEvent: {}
[0.817358] (articubot_one) StdoutLine: {'line': b'1: collected 2 items\n'}
[0.817989] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.901655] (-) TimerEvent: {}
[1.002137] (-) TimerEvent: {}
[1.102647] (-) TimerEvent: {}
[1.203095] (-) TimerEvent: {}
[1.303520] (-) TimerEvent: {}
[1.404174] (-) TimerEvent: {}
[1.505179] (-) TimerEvent: {}
[1.605817] (-) TimerEvent: {}
[1.706668] (-) TimerEvent: {}
[1.807547] (-) TimerEvent: {}
[1.908330] (-) TimerEvent: {}
[2.008986] (-) TimerEvent: {}
[2.109874] (-) TimerEvent: {}
[2.210543] (-) TimerEvent: {}
[2.311293] (-) TimerEvent: {}
[2.412226] (-) TimerEvent: {}
[2.513194] (-) TimerEvent: {}
[2.614131] (-) TimerEvent: {}
[2.715212] (-) TimerEvent: {}
[2.816172] (-) TimerEvent: {}
[2.917103] (-) TimerEvent: {}
[3.018092] (-) TimerEvent: {}
[3.119123] (-) TimerEvent: {}
[3.219786] (-) TimerEvent: {}
[3.320576] (-) TimerEvent: {}
[3.421221] (-) TimerEvent: {}
[3.521939] (-) TimerEvent: {}
[3.622644] (-) TimerEvent: {}
[3.723322] (-) TimerEvent: {}
[3.824215] (-) TimerEvent: {}
[3.925308] (-) TimerEvent: {}
[4.026129] (-) TimerEvent: {}
[4.127169] (-) TimerEvent: {}
[4.227935] (-) TimerEvent: {}
[4.328663] (-) TimerEvent: {}
[4.429535] (-) TimerEvent: {}
[4.530528] (-) TimerEvent: {}
[4.631506] (-) TimerEvent: {}
[4.732526] (-) TimerEvent: {}
[4.833402] (-) TimerEvent: {}
[4.934401] (-) TimerEvent: {}
[5.035412] (-) TimerEvent: {}
[5.136503] (-) TimerEvent: {}
[5.237524] (-) TimerEvent: {}
[5.284967] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py .F             [100%]\n'}
[5.285956] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.287976] (articubot_one) StdoutLine: {'line': b'1: =================================== FAILURES ===================================\n'}
[5.288842] (articubot_one) StdoutLine: {'line': b'1: ___________________________ test_obstacle_parameters ___________________________\n'}
[5.289530] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.290147] (articubot_one) StdoutLine: {'line': b'1: obstacle_node = (<articubot_one.obstacle_avoidance.Obstacle object at 0x7ccbfa36aff0>, <rclpy.executors.SingleThreadedExecutor object at 0x7ccbfb1db8c0>)\n'}
[5.290959] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.291617] (articubot_one) StdoutLine: {'line': b'1:     def test_obstacle_parameters(obstacle_node):\n'}
[5.292166] (articubot_one) StdoutLine: {'line': b'1:         """Test ROS parameters after the node has had a chance to spin."""\n'}
[5.292800] (articubot_one) StdoutLine: {'line': b'1:         node, executor = obstacle_node\n'}
[5.293878] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[5.294280] (articubot_one) StdoutLine: {'line': b'1:         # Now access parameters after the node has spun briefly\n'}
[5.294678] (articubot_one) StdoutLine: {'line': b'1:         # Note: Getting parameters this way works if they are declared\n'}
[5.294999] (articubot_one) StdoutLine: {'line': b'1:         # and have default values, or if they are set externally\n'}
[5.295292] (articubot_one) StdoutLine: {'line': b'1:         # AND the node has spun to receive them.\n'}
[5.295669] (articubot_one) StdoutLine: {'line': b'1:         try:\n'}
[5.295984] (articubot_one) StdoutLine: {'line': b'1:             # Use the correct ROS 2 way to get parameter values\n'}
[5.296278] (articubot_one) StdoutLine: {'line': b"1:             threshold = node.get_parameter('threshold_distance').value\n"}
[5.296619] (articubot_one) StdoutLine: {'line': b"1:             scan_topic = node.get_parameter('laser_scan_topic').value\n"}
[5.296929] (articubot_one) StdoutLine: {'line': b"1:             cmd_topic = node.get_parameter('cmd_vel_topic').value\n"}
[5.297223] (articubot_one) StdoutLine: {'line': b"1:             front_sector_angle = node.get_parameter('frontal_detection_angle_deg').value\n"}
[5.297659] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[5.297980] (articubot_one) StdoutLine: {'line': b'1:             # assert the values are correct as expected\n'}
[5.298275] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(threshold, float), f"expect the threshold to be a float"\n'}
[5.298643] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(scan_topic, str), f"expect the scan topic to be a string"\n'}
[5.299008] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"\n'}
[5.299301] (articubot_one) StdoutLine: {'line': b"1:             assert isinstance(front_sector_angle, float), f'expect the angle of sector to be a float'\n"}
[5.299663] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[5.299967] (articubot_one) StdoutLine: {'line': b'1:             # 2- check if the values of the parameters are correct\n'}
[5.300279] (articubot_one) StdoutLine: {'line': b"1:             # These values should match what's set in your launch file or node defaults\n"}
[5.300649] (articubot_one) StdoutLine: {'line': b'1:             assert threshold == 0.5\n'}
[5.300960] (articubot_one) StdoutLine: {'line': b'1: >           assert scan_topic == "scan"\n'}
[5.301249] (articubot_one) StdoutLine: {'line': b"1: E           AssertionError: assert '/scan' == 'scan'\n"}
[5.301601] (articubot_one) StdoutLine: {'line': b'1: E             - scan\n'}
[5.301910] (articubot_one) StdoutLine: {'line': b'1: E             + /scan\n'}
[5.302202] (articubot_one) StdoutLine: {'line': b'1: E             ? +\n'}
[5.302549] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.302871] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py:84: AssertionError\n'}
[5.303167] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.303484] (articubot_one) StdoutLine: {'line': b'1: During handling of the above exception, another exception occurred:\n'}
[5.303807] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.304094] (articubot_one) StdoutLine: {'line': b'1: obstacle_node = (<articubot_one.obstacle_avoidance.Obstacle object at 0x7ccbfa36aff0>, <rclpy.executors.SingleThreadedExecutor object at 0x7ccbfb1db8c0>)\n'}
[5.304382] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.304739] (articubot_one) StdoutLine: {'line': b'1:     def test_obstacle_parameters(obstacle_node):\n'}
[5.305038] (articubot_one) StdoutLine: {'line': b'1:         """Test ROS parameters after the node has had a chance to spin."""\n'}
[5.305329] (articubot_one) StdoutLine: {'line': b'1:         node, executor = obstacle_node\n'}
[5.305675] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[5.305978] (articubot_one) StdoutLine: {'line': b'1:         # Now access parameters after the node has spun briefly\n'}
[5.306266] (articubot_one) StdoutLine: {'line': b'1:         # Note: Getting parameters this way works if they are declared\n'}
[5.306634] (articubot_one) StdoutLine: {'line': b'1:         # and have default values, or if they are set externally\n'}
[5.306944] (articubot_one) StdoutLine: {'line': b'1:         # AND the node has spun to receive them.\n'}
[5.307232] (articubot_one) StdoutLine: {'line': b'1:         try:\n'}
[5.307566] (articubot_one) StdoutLine: {'line': b'1:             # Use the correct ROS 2 way to get parameter values\n'}
[5.307879] (articubot_one) StdoutLine: {'line': b"1:             threshold = node.get_parameter('threshold_distance').value\n"}
[5.308169] (articubot_one) StdoutLine: {'line': b"1:             scan_topic = node.get_parameter('laser_scan_topic').value\n"}
[5.308502] (articubot_one) StdoutLine: {'line': b"1:             cmd_topic = node.get_parameter('cmd_vel_topic').value\n"}
[5.308833] (articubot_one) StdoutLine: {'line': b"1:             front_sector_angle = node.get_parameter('frontal_detection_angle_deg').value\n"}
[5.309125] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[5.309409] (articubot_one) StdoutLine: {'line': b'1:             # assert the values are correct as expected\n'}
[5.309765] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(threshold, float), f"expect the threshold to be a float"\n'}
[5.310058] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(scan_topic, str), f"expect the scan topic to be a string"\n'}
[5.310347] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"\n'}
[5.310717] (articubot_one) StdoutLine: {'line': b"1:             assert isinstance(front_sector_angle, float), f'expect the angle of sector to be a float'\n"}
[5.311106] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[5.311416] (articubot_one) StdoutLine: {'line': b'1:             # 2- check if the values of the parameters are correct\n'}
[5.311768] (articubot_one) StdoutLine: {'line': b"1:             # These values should match what's set in your launch file or node defaults\n"}
[5.312092] (articubot_one) StdoutLine: {'line': b'1:             assert threshold == 0.5\n'}
[5.312380] (articubot_one) StdoutLine: {'line': b'1:             assert scan_topic == "scan"\n'}
[5.312755] (articubot_one) StdoutLine: {'line': b'1:             assert cmd_topic == "cmd_vel"\n'}
[5.313060] (articubot_one) StdoutLine: {'line': b'1:             assert front_sector_angle == 60.0\n'}
[5.313348] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[5.313680] (articubot_one) StdoutLine: {'line': b'1:         except rclpy.exceptions.ParameterNotDeclaredException as e:\n'}
[5.313998] (articubot_one) StdoutLine: {'line': b'1:             pytest.fail(f"Parameter not declared: {e}")\n'}
[5.314288] (articubot_one) StdoutLine: {'line': b'1:         except Exception as e:\n'}
[5.314661] (articubot_one) StdoutLine: {'line': b'1: >           pytest.fail(f"Error getting parameter: {e}")\n'}
[5.314969] (articubot_one) StdoutLine: {'line': b"1: E           Failed: Error getting parameter: assert '/scan' == 'scan'\n"}
[5.315257] (articubot_one) StdoutLine: {'line': b'1: E             - scan\n'}
[5.315585] (articubot_one) StdoutLine: {'line': b'1: E             + /scan\n'}
[5.315893] (articubot_one) StdoutLine: {'line': b'1: E             ? +\n'}
[5.316183] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.316518] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py:91: Failed\n'}
[5.316854] (articubot_one) StdoutLine: {'line': b'1: ---------------------------- Captured stderr setup -----------------------------\n'}
[5.317145] (articubot_one) StdoutLine: {'line': b'1: [INFO] [1747593945.866131941] [Laser_Obstacle_Avoidance]: Subscribing to laser scan on: /scan\n'}
[5.317452] (articubot_one) StdoutLine: {'line': b'1: [INFO] [1747593945.869740491] [Laser_Obstacle_Avoidance]: Publishing velocity commands on: /cmd_vel\n'}
[5.317791] (articubot_one) StdoutLine: {'line': b'1: - generated xml file: /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml -\n'}
[5.318085] (articubot_one) StdoutLine: {'line': b'1: =========================== short test summary info ============================\n'}
[5.318375] (articubot_one) StdoutLine: {'line': b'1: FAILED ../../src/articubot_one/test/pytest/test_laserObstacle.py::test_obstacle_parameters\n'}
[5.318756] (articubot_one) StdoutLine: {'line': b'1: ========================= 1 failed, 1 passed in 4.71s ==========================\n'}
[5.337748] (-) TimerEvent: {}
[5.438342] (-) TimerEvent: {}
[5.538819] (-) TimerEvent: {}
[5.573386] (articubot_one) StdoutLine: {'line': b'1: -- run_test.py: return code 1\n'}
[5.574560] (articubot_one) StdoutLine: {'line': b"1: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml'\n"}
[5.610754] (articubot_one) StdoutLine: {'line': b'1/6 Test #1: laser_obstacle_test ..............***Failed    5.56 sec\n'}
[5.612388] (articubot_one) StdoutLine: {'line': b'test 2\n'}
[5.613261] (articubot_one) StdoutLine: {'line': b'    Start 2: copyright\n'}
[5.614108] (articubot_one) StdoutLine: {'line': b'\n'}
[5.614922] (articubot_one) StdoutLine: {'line': b'2: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_copyright/copyright.txt" "--command" "/opt/ros/jazzy/bin/ament_copyright" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml"\n'}
[5.615852] (articubot_one) StdoutLine: {'line': b'2: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[5.616688] (articubot_one) StdoutLine: {'line': b'2: Test timeout computed to be: 200\n'}
[5.639016] (-) TimerEvent: {}
[5.739673] (-) TimerEvent: {}
[5.773851] (articubot_one) StdoutLine: {'line': b"2: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[5.774083] (articubot_one) StdoutLine: {'line': b'2:  - /opt/ros/jazzy/bin/ament_copyright --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml\n'}
[5.839786] (-) TimerEvent: {}
[5.940103] (-) TimerEvent: {}
[6.040366] (-) TimerEvent: {}
[6.053067] (articubot_one) StdoutLine: {'line': b'2: CONTRIBUTING.md: file not found\n'}
[6.053409] (articubot_one) StdoutLine: {'line': b'2: LICENSE: file not found\n'}
[6.053624] (articubot_one) StdoutLine: {'line': b'2: articubot_one/obstacle_avoidance.py: could not find copyright notice\n'}
[6.053834] (articubot_one) StdoutLine: {'line': b'2: launch/ball_tracker.launch.py: could not find copyright notice\n'}
[6.054053] (articubot_one) StdoutLine: {'line': b'2: launch/camera.launch.py: could not find copyright notice\n'}
[6.054233] (articubot_one) StdoutLine: {'line': b'2: launch/joystick.launch.py: could not find copyright notice\n'}
[6.054374] (articubot_one) StdoutLine: {'line': b'2: launch/launch_robot.launch.py: could not find copyright notice\n'}
[6.054625] (articubot_one) StdoutLine: {'line': b'2: launch/launch_sim.launch.py: could not find copyright notice\n'}
[6.054844] (articubot_one) StdoutLine: {'line': b'2: launch/online_async_launch.py: could not find copyright notice\n'}
[6.055048] (articubot_one) StdoutLine: {'line': b'2: launch/rplidar.launch.py: could not find copyright notice\n'}
[6.055255] (articubot_one) StdoutLine: {'line': b'2: launch/rsp.launch.py: could not find copyright notice\n'}
[6.055397] (articubot_one) StdoutLine: {'line': b'2: launch/rviz_gazebo.launch.py: could not find copyright notice\n'}
[6.055565] (articubot_one) StdoutLine: {'line': b'2: test/pytest/test_laserObstacle.py: could not find copyright notice\n'}
[6.055708] (articubot_one) StdoutLine: {'line': b'2: 13 errors, checked 16 files\n'}
[6.070555] (articubot_one) StdoutLine: {'line': b'2: -- run_test.py: return code 1\n'}
[6.070822] (articubot_one) StdoutLine: {'line': b"2: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml'\n"}
[6.081748] (articubot_one) StdoutLine: {'line': b'2/6 Test #2: copyright ........................***Failed    0.47 sec\n'}
[6.082035] (articubot_one) StdoutLine: {'line': b'test 3\n'}
[6.082130] (articubot_one) StdoutLine: {'line': b'    Start 3: flake8\n'}
[6.082269] (articubot_one) StdoutLine: {'line': b'\n'}
[6.082413] (articubot_one) StdoutLine: {'line': b'3: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_flake8/flake8.txt" "--command" "/opt/ros/jazzy/bin/ament_flake8" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml"\n'}
[6.082533] (articubot_one) StdoutLine: {'line': b'3: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[6.082627] (articubot_one) StdoutLine: {'line': b'3: Test timeout computed to be: 60\n'}
[6.140489] (-) TimerEvent: {}
[6.161004] (articubot_one) StdoutLine: {'line': b"3: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[6.161186] (articubot_one) StdoutLine: {'line': b'3:  - /opt/ros/jazzy/bin/ament_flake8 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml\n'}
[6.240586] (-) TimerEvent: {}
[6.340865] (-) TimerEvent: {}
[6.441121] (-) TimerEvent: {}
[6.542486] (-) TimerEvent: {}
[6.581684] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist\n'}
[6.582399] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.582635] (articubot_one) StdoutLine: {'line': b'3: import math\n'}
[6.582822] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.582997] (articubot_one) StdoutLine: {'line': b'3: import math\n'}
[6.583176] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.583369] (articubot_one) StdoutLine: {'line': b'3: # i am writing down this piece of code with paramters \n'}
[6.583632] (articubot_one) StdoutLine: {'line': b'3:                                                      ^\n'}
[6.584090] (articubot_one) StdoutLine: {'line': b'3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node \n'}
[6.584253] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.584413] (articubot_one) StdoutLine: {'line': b'3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node \n'}
[6.586009] (articubot_one) StdoutLine: {'line': b'3:                                                                                                               ^\n'}
[6.586211] (articubot_one) StdoutLine: {'line': b'3:     def __init__(self) :\n'}
[6.586402] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[6.586590] (articubot_one) StdoutLine: {'line': b'3:         super().__init__("Laser_Obstacle_Avoidance")\n'}
[6.586784] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[6.586945] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.587103] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.589593] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[6.589754] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[6.589912] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[6.590091] (articubot_one) StdoutLine: {'line': b'3:                                                    ^\n'}
[6.590264] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[6.590446] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.590929] (articubot_one) StdoutLine: {'line': b'3:         self.threshold=self.get_parameter("threshold_distance").value\n'}
[6.591104] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[6.591257] (articubot_one) StdoutLine: {'line': b'3:         self.threshold=self.get_parameter("threshold_distance").value\n'}
[6.591407] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[6.591602] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.591753] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.591900] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[6.592062] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[6.592232] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[6.592406] (articubot_one) StdoutLine: {'line': b'3:                                                  ^\n'}
[6.593039] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[6.593199] (articubot_one) StdoutLine: {'line': b'3:                                                   ^\n'}
[6.593364] (articubot_one) StdoutLine: {'line': b'3:         self.laser_topic=self.get_parameter("laser_scan_topic").value\n'}
[6.593569] (articubot_one) StdoutLine: {'line': b'3:                         ^\n'}
[6.593795] (articubot_one) StdoutLine: {'line': b'3:         self.laser_topic=self.get_parameter("laser_scan_topic").value\n'}
[6.593971] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[6.594148] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.594348] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.597086] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[6.597314] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[6.597556] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[6.597751] (articubot_one) StdoutLine: {'line': b'3:                                               ^\n'}
[6.597941] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[6.598132] (articubot_one) StdoutLine: {'line': b'3:                                                ^\n'}
[6.616474] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value\n'}
[6.617337] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[6.617938] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value\n'}
[6.618137] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[6.618317] (articubot_one) StdoutLine: {'line': b"3:         self.frontal_detection_angle_rad = math.radians(self.get_parameter('frontal_detection_angle_deg').value)\n"}
[6.618512] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.618692] (articubot_one) StdoutLine: {'line': b'3:         #create a publisher to the /cmd_vel\n'}
[6.618863] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[6.619033] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_vel_pub = self.create_publisher(Twist,self.cmd_topic, 10)\n'}
[6.619204] (articubot_one) StdoutLine: {'line': b'3:                                                       ^\n'}
[6.619381] (articubot_one) StdoutLine: {'line': b'3:     def laser_callback(self,msg):\n'}
[6.619565] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.619721] (articubot_one) StdoutLine: {'line': b'3:     def laser_callback(self,msg):\n'}
[6.619883] (articubot_one) StdoutLine: {'line': b'3:                            ^\n'}
[6.620055] (articubot_one) StdoutLine: {'line': b'3:   \n'}
[6.620226] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.620414] (articubot_one) StdoutLine: {'line': b'3:         if not(scan_size) :\n'}
[6.620623] (articubot_one) StdoutLine: {'line': b'3:               ^\n'}
[6.620804] (articubot_one) StdoutLine: {'line': b'3:         if not(scan_size) :\n'}
[6.621012] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[6.621210] (articubot_one) StdoutLine: {'line': b'3:             #no laser data \n'}
[6.621404] (articubot_one) StdoutLine: {'line': b'3:             ^\n'}
[6.621640] (articubot_one) StdoutLine: {'line': b'3:             #no laser data \n'}
[6.621838] (articubot_one) StdoutLine: {'line': b'3:                           ^\n'}
[6.622042] (articubot_one) StdoutLine: {'line': b'3:             return \n'}
[6.622235] (articubot_one) StdoutLine: {'line': b'3:                   ^\n'}
[6.622446] (articubot_one) StdoutLine: {'line': b'3:         # the lidar provides angles,angle step (common difference of the angle sequence), distances in meter\n'}
[6.622661] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.622855] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.623049] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.623256] (articubot_one) StdoutLine: {'line': b'3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance\n'}
[6.623475] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[6.623679] (articubot_one) StdoutLine: {'line': b'3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance\n'}
[6.623860] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.624041] (articubot_one) StdoutLine: {'line': b"3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance\n"}
[6.624242] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[6.624435] (articubot_one) StdoutLine: {'line': b"3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance\n"}
[6.624634] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.624815] (articubot_one) StdoutLine: {'line': b'3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle \n'}
[6.625000] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.625173] (articubot_one) StdoutLine: {'line': b'3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle \n'}
[6.625348] (articubot_one) StdoutLine: {'line': b'3:                                                                                                                      ^\n'}
[6.625553] (articubot_one) StdoutLine: {'line': b'3:         # we are sweeping across all the angles with the increment \n'}
[6.625745] (articubot_one) StdoutLine: {'line': b'3:                                                                   ^\n'}
[6.625932] (articubot_one) StdoutLine: {'line': b'3:         # while sweeping we compare  only the ranges with the ones in the defined angle \n'}
[6.626136] (articubot_one) StdoutLine: {'line': b'3:                                                                                        ^\n'}
[6.626331] (articubot_one) StdoutLine: {'line': b'3:                  # If the range reading is valid (not inf or nan)\n'}
[6.626565] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.626780] (articubot_one) StdoutLine: {'line': b'3:                  # If the range reading is valid (not inf or nan)\n'}
[6.626972] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.627159] (articubot_one) StdoutLine: {'line': b'3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):\n'}
[6.627349] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.627551] (articubot_one) StdoutLine: {'line': b'3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):\n'}
[6.627716] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.627869] (articubot_one) StdoutLine: {'line': b'3:             \n'}
[6.628033] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.628216] (articubot_one) StdoutLine: {'line': b'3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])\n'}
[6.628443] (articubot_one) StdoutLine: {'line': b'3:                      ^\n'}
[6.628661] (articubot_one) StdoutLine: {'line': b'3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])\n'}
[6.628867] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.629066] (articubot_one) StdoutLine: {'line': b'3:         #  To stop the robot from moving ahead when ever it meets an obstacle, it will just go back \n'}
[6.629254] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.629477] (articubot_one) StdoutLine: {'line': b'3:         if obstacle_detected :\n'}
[6.629679] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.629875] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')\n"}
[6.630073] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.630258] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')\n"}
[6.630484] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.630676] (articubot_one) StdoutLine: {'line': b'3:            twist.linear.x = 0.0\n'}
[6.630854] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.631024] (articubot_one) StdoutLine: {'line': b'3:            twist.angular.z =0.0\n'}
[6.631211] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.631390] (articubot_one) StdoutLine: {'line': b'3:            twist.angular.z =0.0\n'}
[6.631602] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.631772] (articubot_one) StdoutLine: {'line': b'3:            self.cmd_vel_pub.publish(twist)\n'}
[6.631945] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.632121] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[6.632297] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.632493] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[6.632684] (articubot_one) StdoutLine: {'line': b'3:                                   ^\n'}
[6.632862] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[6.633040] (articubot_one) StdoutLine: {'line': b'3:                                                           ^\n'}
[6.633215] (articubot_one) StdoutLine: {'line': b'3: def main(args=None):\n'}
[6.633386] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.633585] (articubot_one) StdoutLine: {'line': b'3:         rclpy.spin(node) # Keep the node running and process callbacks\n'}
[6.633763] (articubot_one) StdoutLine: {'line': b'3:                         ^\n'}
[6.633933] (articubot_one) StdoutLine: {'line': b"3:         node.get_logger().info('Smart Obstacle Avoider Node stopped cleanly via KeyboardInterrupt.')\n"}
[6.634109] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.634278] (articubot_one) StdoutLine: {'line': b"3: if __name__ == '__main__':\n"}
[6.634445] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.634620] (articubot_one) StdoutLine: {'line': b'3:     main()    \n'}
[6.634798] (articubot_one) StdoutLine: {'line': b'3:           ^\n'}
[6.634975] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.635144] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.635312] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[6.635501] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.635679] (articubot_one) StdoutLine: {'line': b"3:     my_package_name='articubot_one'\n"}
[6.635843] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.636019] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[6.636189] (articubot_one) StdoutLine: {'line': b'3:                                                                                   ^\n'}
[6.636369] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[6.636572] (articubot_one) StdoutLine: {'line': b'3:                                                                                            ^\n'}
[6.636758] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[6.636940] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.637117] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[6.637309] (articubot_one) StdoutLine: {'line': b'3:                                                                                     ^\n'}
[6.637498] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[6.637683] (articubot_one) StdoutLine: {'line': b'3:                                                                                              ^\n'}
[6.637861] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[6.638044] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.638229] (articubot_one) StdoutLine: {'line': b'3:     params_path = PythonExpression([\'"\',tracker_params_sim, \'" if "true" == "\', sim_mode, \'" else "\', tracker_params_robot, \'"\'])\n'}
[6.638437] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.638647] (articubot_one) StdoutLine: {'line': b'3:     params_path = PythonExpression([\'"\',tracker_params_sim, \'" if "true" == "\', sim_mode, \'" else "\', tracker_params_robot, \'"\'])\n'}
[6.638846] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.639035] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory('ball_tracker'), 'launch', 'ball_tracker.launch.py')]),\n"}
[6.639226] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.639431] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'params_file': params_path,\n"}
[6.639655] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.639846] (articubot_one) StdoutLine: {'line': b"3:                                     'image_topic': '/camera/image_raw',\n"}
[6.640039] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.640230] (articubot_one) StdoutLine: {'line': b"3:                                     'cmd_vel_topic': '/cmd_vel_tracker',\n"}
[6.640431] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.640638] (articubot_one) StdoutLine: {'line': b"3:                                     'enable_3d_tracker': 'true'}.items())\n"}
[6.640827] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.641013] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[6.641200] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.641386] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.641589] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.641775] (articubot_one) StdoutLine: {'line': b'3:     return LaunchDescription([\n'}
[6.641972] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.642173] (articubot_one) StdoutLine: {'line': b"3:                 'image_size': [640,480],\n"}
[6.642372] (articubot_one) StdoutLine: {'line': b'3:                                   ^\n'}
[6.642579] (-) TimerEvent: {}
[6.642728] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.642904] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.643057] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.643223] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:5:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[6.643429] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.643616] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:6:1: I100 Import statements are in the wrong order. 'import math' should be before 'from geometry_msgs.msg import Twist' and in a different group.\n"}
[6.643818] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.643997] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:6:1: I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.\n"}
[6.644178] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.644352] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:9:54: W291 trailing whitespace\n'}
[6.644554] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.644742] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:10:100: E501 line too long (110 > 99 characters)\n'}
[6.644923] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.645107] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:10:111: W291 trailing whitespace\n'}
[6.645288] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.645498] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:14:23: E203 whitespace before ':'\n"}
[6.645694] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.645878] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:15:26: Q000 Double quotes found but single quotes preferred\n'}
[6.646057] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.646249] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:16:1: W293 blank line contains whitespace\n'}
[6.646459] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.646673] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:17:32: Q000 Double quotes found but single quotes preferred\n'}
[6.646868] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.647143] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:17:52: E231 missing whitespace after ','\n"}
[6.647357] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.647584] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:17:100: E501 line too long (102 > 99 characters)\n'}
[6.647770] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.647952] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:18:23: E225 missing whitespace around operator\n'}
[6.648165] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.648339] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:18:43: Q000 Double quotes found but single quotes preferred\n'}
[6.648547] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.648727] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:19:1: W293 blank line contains whitespace\n'}
[6.648950] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.649183] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:20:32: Q000 Double quotes found but single quotes preferred\n'}
[6.649413] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.649668] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:20:50: E231 missing whitespace after ','\n"}
[6.649902] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.650131] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:20:51: Q000 Double quotes found but single quotes preferred\n'}
[6.650363] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.650613] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:21:25: E225 missing whitespace around operator\n'}
[6.650857] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.651092] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:21:45: Q000 Double quotes found but single quotes preferred\n'}
[6.651329] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.651583] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:22:1: W293 blank line contains whitespace\n'}
[6.651824] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.652058] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:23:32: Q000 Double quotes found but single quotes preferred\n'}
[6.652309] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.652561] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:23:47: E231 missing whitespace after ','\n"}
[6.652762] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.652884] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:23:48: Q000 Double quotes found but single quotes preferred\n'}
[6.652996] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.653184] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:24:23: E225 missing whitespace around operator\n'}
[6.653366] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.653528] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:24:43: Q000 Double quotes found but single quotes preferred\n'}
[6.653644] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.653754] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:29:100: E501 line too long (112 > 99 characters)\n'}
[6.653863] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.653971] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:38:9: E265 block comment should start with '# '\n"}
[6.654079] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.654187] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:39:55: E231 missing whitespace after ','\n"}
[6.654296] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.654405] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:43:5: E303 too many blank lines (2)\n'}
[6.654536] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.654647] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:43:28: E231 missing whitespace after ','\n"}
[6.654754] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.654859] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:47:1: W293 blank line contains whitespace\n'}
[6.654965] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.655071] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:48:15: E275 missing whitespace after keyword\n'}
[6.655177] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.655284] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:48:26: E203 whitespace before ':'\n"}
[6.655539] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.655702] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:49:13: E265 block comment should start with '# '\n"}
[6.655830] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.655935] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:49:27: W291 trailing whitespace\n'}
[6.656037] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.656135] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:50:19: W291 trailing whitespace\n'}
[6.656233] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.656331] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:51:100: E501 line too long (108 > 99 characters)\n'}
[6.656444] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.656557] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:56:1: W293 blank line contains whitespace\n'}
[6.656656] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.656755] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:60:9: E265 block comment should start with '# '\n"}
[6.656852] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.656949] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:60:100: E501 line too long (148 > 99 characters)\n'}
[6.657046] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.657144] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:61:9: E265 block comment should start with '# '\n"}
[6.657241] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.657339] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:61:100: E501 line too long (106 > 99 characters)\n'}
[6.657474] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.657582] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:62:100: E501 line too long (117 > 99 characters)\n'}
[6.657681] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.657779] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:62:118: W291 trailing whitespace\n'}
[6.657876] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.657972] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:64:67: W291 trailing whitespace\n'}
[6.658068] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.658165] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:65:88: W291 trailing whitespace\n'}
[6.658262] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.658358] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:75:18: E114 indentation is not a multiple of 4 (comment)\n'}
[6.658472] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.658578] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:75:18: E117 over-indented (comment)\n'}
[6.658676] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.658772] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:76:18: E111 indentation is not a multiple of 4\n'}
[6.658867] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.658963] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:76:18: E117 over-indented\n'}
[6.659058] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.659154] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:77:1: W293 blank line contains whitespace\n'}
[6.659249] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.659344] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:78:22: E111 indentation is not a multiple of 4\n'}
[6.659463] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.659570] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:78:100: E501 line too long (104 > 99 characters)\n'}
[6.659666] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.659761] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:86:100: W291 trailing whitespace\n'}
[6.659857] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.659951] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:87:29: E203 whitespace before ':'\n"}
[6.660048] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.660144] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:88:12: E111 indentation is not a multiple of 4\n'}
[6.660240] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.660336] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:88:100: E501 line too long (115 > 99 characters)\n'}
[6.660453] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.660564] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:89:12: E111 indentation is not a multiple of 4\n'}
[6.660661] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.660756] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:90:12: E111 indentation is not a multiple of 4\n'}
[6.660851] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.660948] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:90:29: E225 missing whitespace around operator\n'}
[6.661045] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.661141] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:91:12: E111 indentation is not a multiple of 4\n'}
[6.661238] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.661334] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:12: E111 indentation is not a multiple of 4\n'}
[6.661449] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.661560] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:35: F541 f-string is missing placeholders\n'}
[6.661669] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.661765] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:59: W291 trailing whitespace\n'}
[6.661864] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.661960] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:95:1: E302 expected 2 blank lines, found 1\n'}
[6.662058] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.662154] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:99:25: E261 at least two spaces before inline comment\n'}
[6.662250] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.662345] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:101:100: E501 line too long (100 > 99 characters)\n'}
[6.662454] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.662558] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:116:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[6.662656] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.662753] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:117:11: W291 trailing whitespace\n'}
[6.662851] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.662948] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:2:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.663056] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.663181] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:8:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import PythonExpression'\n"}
[6.663283] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.663379] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:13:20: E225 missing whitespace around operator\n'}
[6.663492] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.663594] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:17:83: E231 missing whitespace after ','\n"}
[6.663692] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.663790] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:17:92: E231 missing whitespace after ','\n"}
[6.663888] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.663985] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:17:100: E501 line too long (123 > 99 characters)\n'}
[6.664082] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.664178] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:18:85: E231 missing whitespace after ','\n"}
[6.664276] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.664372] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:18:94: E231 missing whitespace after ','\n"}
[6.664503] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.664606] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:18:100: E501 line too long (127 > 99 characters)\n'}
[6.664705] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.664802] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:20:40: E231 missing whitespace after ','\n"}
[6.664899] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.664994] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:20:100: E501 line too long (129 > 99 characters)\n'}
[6.665090] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.665186] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:24:100: E501 line too long (103 > 99 characters)\n'}
[6.665282] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.665379] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:25:21: E131 continuation line unaligned for hanging indent\n'}
[6.665524] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.665627] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:26:37: E128 continuation line under-indented for visual indent\n'}
[6.665726] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.665855] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:27:37: E128 continuation line under-indented for visual indent\n'}
[6.665958] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.666055] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:28:37: E128 continuation line under-indented for visual indent\n'}
[6.666152] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.666247] (articubot_one) StdoutLine: {'line': b"3: ./launch/camera.launch.py:1:1: F401 'os' imported but unused\n"}
[6.666345] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.666462] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:6:1: E302 expected 2 blank lines, found 1\n'}
[6.666571] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.666669] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:10:5: E303 too many blank lines (3)\n'}
[6.666766] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.666863] (articubot_one) StdoutLine: {'line': b"3: ./launch/camera.launch.py:18:35: E231 missing whitespace after ','\n"}
[6.666960] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.667058] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:22:5: E122 continuation line missing indentation or outdented\n'}
[6.667155] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.667251] (articubot_one) StdoutLine: {'line': b'3: from launch.substitutions import LaunchConfiguration\n'}
[6.667348] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.667469] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[6.667585] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.667684] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[6.667783] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.667880] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.667976] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.668071] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.668168] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.668265] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[6.668364] (articubot_one) StdoutLine: {'line': b'3:                                                                           ^\n'}
[6.668481] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[6.668585] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[6.668684] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[6.668781] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.668877] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel','/cmd_vel_joy')]\n"}
[6.668974] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[6.669070] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_in','/diff_cont/cmd_vel_unstamped'),\n"}
[6.669169] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[6.669266] (articubot_one) StdoutLine: {'line': b"3:                         ('/cmd_vel_out','/diff_cont/cmd_vel')]\n"}
[6.669362] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.669477] (articubot_one) StdoutLine: {'line': b'3:     return LaunchDescription([\n'}
[6.669584] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.669696] (articubot_one) StdoutLine: {'line': b'3:         twist_stamper       \n'}
[6.669792] (articubot_one) StdoutLine: {'line': b'3:                      ^\n'}
[6.669890] (articubot_one) StdoutLine: {'line': b'3:     ])      ^\n'}
[6.669990] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import RegisterEventHandler\n'}
[6.670089] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.670187] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.670286] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.670381] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.670497] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.670597] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.670701] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.670799] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.670896] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.670994] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.671091] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[6.671187] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.671283] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[6.671379] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.671493] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.671592] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.671689] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.671785] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.671881] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.671977] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.672074] (articubot_one) StdoutLine: {'line': b'3:                                                                              ^\n'}
[6.672170] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.672266] (articubot_one) StdoutLine: {'line': b'3:                                                                                       ^\n'}
[6.672364] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.672476] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.672591] (articubot_one) StdoutLine: {'line': b'3:             package="twist_mux",\n'}
[6.672690] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.672786] (articubot_one) StdoutLine: {'line': b'3:             executable="twist_mux",\n'}
[6.672883] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[6.672979] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]\n"}
[6.673078] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.673174] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.673269] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.673363] (articubot_one) StdoutLine: {'line': b"3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])\n"}
[6.673482] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.673584] (articubot_one) StdoutLine: {'line': b"3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])\n"}
[6.673682] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.673779] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[6.673876] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[6.673972] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[6.674068] (articubot_one) StdoutLine: {'line': b'3:                                                                                             ^\n'}
[6.674165] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[6.674389] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.674655] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.674901] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.675163] (articubot_one) StdoutLine: {'line': b'3:         executable="ros2_control_node",\n'}
[6.675411] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.675831] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.675948] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.676050] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.676150] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.676247] (articubot_one) StdoutLine: {'line': b'3:         arguments=["diff_cont"],\n'}
[6.676344] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.676465] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.676572] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.676668] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.676765] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.676861] (articubot_one) StdoutLine: {'line': b'3:         arguments=["joint_broad"],\n'}
[6.676958] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.677054] (articubot_one) StdoutLine: {'line': b"3:     # Code for delaying a node (I haven't tested how effective it is)\n"}
[6.677153] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.677248] (articubot_one) StdoutLine: {'line': b'3:     # \n'}
[6.677344] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[6.677455] (articubot_one) StdoutLine: {'line': b'3:     # Launch them all!\n'}
[6.677600] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.677701] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument\n'}
[6.677800] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.677898] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.677995] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.678093] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.678201] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.678298] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.678395] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.678517] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.678619] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.678716] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.678814] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[6.678910] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.679006] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[6.679103] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.679200] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.679297] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.679395] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.679534] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'\n"}
[6.679638] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.679792] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'\n"}
[6.679964] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.680149] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.680339] (articubot_one) StdoutLine: {'line': b'3:                                                                              ^\n'}
[6.680547] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.680656] (articubot_one) StdoutLine: {'line': b'3:                                                                                       ^\n'}
[6.680756] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.680855] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.680995] (articubot_one) StdoutLine: {'line': b'3:             package="twist_mux",\n'}
[6.681157] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.681347] (articubot_one) StdoutLine: {'line': b'3:             executable="twist_mux",\n'}
[6.681516] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[6.681620] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]\n"}
[6.681808] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.681987] (articubot_one) StdoutLine: {'line': b'3:     default_world = os.path.join(\n'}
[6.682169] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.682360] (articubot_one) StdoutLine: {'line': b'3:         )    \n'}
[6.682592] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[6.682789] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.682975] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.683145] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.683330] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.683559] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.683783] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.683990] (articubot_one) StdoutLine: {'line': b"3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.\n"}
[6.684187] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.684365] (articubot_one) StdoutLine: {'line': b'3:     diff_drive_spawner = Node(\n'}
[6.684579] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.684762] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.684952] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.685145] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.685333] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.685547] (articubot_one) StdoutLine: {'line': b'3:         arguments=["diff_cont"],\n'}
[6.685739] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.685933] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.686116] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.686298] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.686511] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.686728] (articubot_one) StdoutLine: {'line': b'3:         arguments=["joint_broad"],\n'}
[6.686930] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.687131] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.687330] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.687540] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.687747] (articubot_one) StdoutLine: {'line': b'3:                                                                           ^\n'}
[6.687926] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.688103] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[6.688295] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.688503] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.688699] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.688883] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.689063] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.689245] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.689445] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_image",\n'}
[6.689665] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.689864] (articubot_one) StdoutLine: {'line': b'3:         executable="image_bridge",\n'}
[6.690045] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.690224] (articubot_one) StdoutLine: {'line': b'3:         arguments=["/camera/image_raw"]\n'}
[6.690408] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.690639] (articubot_one) StdoutLine: {'line': b"3:     # Code for delaying a node (I haven't tested how effective it is)\n"}
[6.690838] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.691037] (articubot_one) StdoutLine: {'line': b'3:     # \n'}
[6.691238] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[6.691438] (articubot_one) StdoutLine: {'line': b'3:     # Launch them all!\n'}
[6.691653] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.691866] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.692072] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.692263] (articubot_one) StdoutLine: {'line': b'3:     default_params_file = os.path.join(get_package_share_directory("articubot_one"),\n'}
[6.692463] (articubot_one) StdoutLine: {'line': b'3:                                                                    ^\n'}
[6.692663] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[6.692841] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.693020] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:3:1: I100 Import statements are in the wrong order. 'from launch.substitutions import LaunchConfiguration' should be before 'from launch_ros.actions import Node'\n"}
[6.693213] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.693397] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:4:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration'\n"}
[6.693620] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.693798] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:6:1: I100 Import statements are in the wrong order. 'import os' should be before 'from launch.actions import DeclareLaunchArgument' and in a different group.\n"}
[6.693991] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.694188] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:7:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.694391] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.694620] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:9:1: E302 expected 2 blank lines, found 1\n'}
[6.694740] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.694841] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:12:75: E231 missing whitespace after ','\n"}
[6.694941] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.695038] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:12:84: E231 missing whitespace after ','\n"}
[6.695135] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.695231] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:12:100: E501 line too long (100 > 99 characters)\n'}
[6.695327] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.695440] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:25:36: E231 missing whitespace after ','\n"}
[6.695562] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.695661] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:32:39: E231 missing whitespace after ','\n"}
[6.695758] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.695853] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:33:40: E231 missing whitespace after ','\n"}
[6.695950] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.696046] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:37:5: E303 too many blank lines (2)\n'}
[6.696143] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.696239] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:44:22: W291 trailing whitespace\n'}
[6.696338] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.696445] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:45:7: W292 no newline at end of file\n'}
[6.696555] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.696652] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:10:1: I100 Import statements are in the wrong order. 'from launch.actions import RegisterEventHandler' should be before 'from launch.substitutions import Command'\n"}
[6.696776] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.696871] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:17:1: E303 too many blank lines (3)\n'}
[6.696975] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.697070] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:20:5: E303 too many blank lines (2)\n'}
[6.697166] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.697262] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:20:100: E501 line too long (110 > 99 characters)\n'}
[6.697360] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.697472] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:23:17: E225 missing whitespace around operator\n'}
[6.697574] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.697670] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:23:33: E261 at least two spaces before inline comment\n'}
[6.697767] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.697862] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:23:34: E262 inline comment should start with '# '\n"}
[6.697957] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.698053] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:27:62: E231 missing whitespace after ','\n"}
[6.698149] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.698245] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:27:71: E231 missing whitespace after ','\n"}
[6.698340] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.698447] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:38:5: E303 too many blank lines (2)\n'}
[6.698560] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.698656] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:38:78: E231 missing whitespace after ','\n"}
[6.698752] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.698847] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:38:87: E231 missing whitespace after ','\n"}
[6.698942] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.699037] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:38:100: E501 line too long (104 > 99 characters)\n'}
[6.699133] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.699229] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:40:21: Q000 Double quotes found but single quotes preferred\n'}
[6.699325] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.699429] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:41:24: Q000 Double quotes found but single quotes preferred\n'}
[6.699538] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.699635] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:43:40: E231 missing whitespace after ','\n"}
[6.699732] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.699827] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:46:1: W293 blank line contains whitespace\n'}
[6.699923] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.700018] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:49:5: E303 too many blank lines (4)\n'}
[6.700115] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.700211] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:49:100: E501 line too long (104 > 99 characters)\n'}
[6.700307] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.700402] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:51:84: E231 missing whitespace after ','\n"}
[6.700515] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.700614] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:51:93: E231 missing whitespace after ','\n"}
[6.700710] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.700805] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:51:100: E501 line too long (115 > 99 characters)\n'}
[6.700903] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.700999] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:54:17: Q000 Double quotes found but single quotes preferred\n'}
[6.701096] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.701200] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:55:20: Q000 Double quotes found but single quotes preferred\n'}
[6.701296] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.701391] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:63:17: Q000 Double quotes found but single quotes preferred\n'}
[6.701505] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.701603] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:64:20: Q000 Double quotes found but single quotes preferred\n'}
[6.701699] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.701795] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:65:20: Q000 Double quotes found but single quotes preferred\n'}
[6.701892] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.701988] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:76:17: Q000 Double quotes found but single quotes preferred\n'}
[6.702083] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.702180] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:77:20: Q000 Double quotes found but single quotes preferred\n'}
[6.702276] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.702372] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:78:20: Q000 Double quotes found but single quotes preferred\n'}
[6.702483] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.702583] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:89:5: E303 too many blank lines (2)\n'}
[6.702680] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.702776] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:90:6: W291 trailing whitespace\n'}
[6.702872] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.702968] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:107:5: E303 too many blank lines (3)\n'}
[6.703065] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.703160] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[6.703257] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.703352] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:15:1: E303 too many blank lines (3)\n'}
[6.703457] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.703561] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:18:5: E303 too many blank lines (2)\n'}
[6.703658] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.703755] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:18:100: E501 line too long (110 > 99 characters)\n'}
[6.703851] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.703946] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:21:17: E225 missing whitespace around operator\n'}
[6.704042] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.704137] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:21:33: E261 at least two spaces before inline comment\n'}
[6.704236] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.704330] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:21:34: E262 inline comment should start with '# '\n"}
[6.704438] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.704545] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:25:62: E231 missing whitespace after ','\n"}
[6.704643] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.704739] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:25:71: E231 missing whitespace after ','\n"}
[6.704835] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.704961] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:31:62: E231 missing whitespace after ','\n"}
[6.705056] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.705150] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:31:71: E231 missing whitespace after ','\n"}
[6.705253] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.705348] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:35:78: E231 missing whitespace after ','\n"}
[6.705453] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.705556] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:35:87: E231 missing whitespace after ','\n"}
[6.705654] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.705749] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:35:100: E501 line too long (104 > 99 characters)\n'}
[6.705857] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.705953] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:37:21: Q000 Double quotes found but single quotes preferred\n'}
[6.706050] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.706145] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:38:24: Q000 Double quotes found but single quotes preferred\n'}
[6.706247] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.706344] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:40:40: E231 missing whitespace after ','\n"}
[6.706451] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.706557] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:44:5: E303 too many blank lines (2)\n'}
[6.706654] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.706750] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:48:10: W291 trailing whitespace\n'}
[6.706847] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.706941] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:49:1: W293 blank line contains whitespace\n'}
[6.707036] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.707131] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:62:21: E131 continuation line unaligned for hanging indent\n'}
[6.707227] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.707323] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:62:100: E501 line too long (104 > 99 characters)\n'}
[6.707427] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.707534] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:65:100: E501 line too long (126 > 99 characters)\n'}
[6.707632] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.707728] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:73:5: E303 too many blank lines (2)\n'}
[6.707824] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.707919] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:74:17: Q000 Double quotes found but single quotes preferred\n'}
[6.708014] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.708109] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:75:20: Q000 Double quotes found but single quotes preferred\n'}
[6.708206] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.708303] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:76:20: Q000 Double quotes found but single quotes preferred\n'}
[6.708400] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.708512] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:80:17: Q000 Double quotes found but single quotes preferred\n'}
[6.708613] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.708708] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:81:20: Q000 Double quotes found but single quotes preferred\n'}
[6.708804] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.708898] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:82:20: Q000 Double quotes found but single quotes preferred\n'}
[6.708994] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.709088] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:86:5: E303 too many blank lines (2)\n'}
[6.709186] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.709282] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:86:75: E231 missing whitespace after ','\n"}
[6.709378] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.709498] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:86:84: E231 missing whitespace after ','\n"}
[6.709597] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.709693] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:86:100: E501 line too long (101 > 99 characters)\n'}
[6.709788] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.709884] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:88:17: Q000 Double quotes found but single quotes preferred\n'}
[6.709980] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.710075] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:89:20: Q000 Double quotes found but single quotes preferred\n'}
[6.710170] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.710265] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:98:17: Q000 Double quotes found but single quotes preferred\n'}
[6.710361] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.710471] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:99:20: Q000 Double quotes found but single quotes preferred\n'}
[6.710573] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.710668] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:100:20: Q000 Double quotes found but single quotes preferred\n'}
[6.710764] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.710859] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:105:5: E303 too many blank lines (3)\n'}
[6.710955] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.711052] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:106:6: W291 trailing whitespace\n'}
[6.711148] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.711242] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:123:5: E303 too many blank lines (3)\n'}
[6.711339] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.711442] (articubot_one) StdoutLine: {'line': b"3: ./launch/online_async_launch.py:8:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'from launch_ros.actions import Node'\n"}
[6.711552] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.711647] (articubot_one) StdoutLine: {'line': b'3: ./launch/online_async_launch.py:15:68: Q000 Double quotes found but single quotes preferred\n'}
[6.711742] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.711837] (articubot_one) StdoutLine: {'line': b"3: ./launch/rplidar.launch.py:1:1: F401 'os' imported but unused\n"}
[6.711934] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.712030] (articubot_one) StdoutLine: {'line': b"3: ./launch/rplidar.launch.py:2:1: I201 Missing newline between import groups. 'from launch import LaunchDescription' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.712129] (articubot_one) StdoutLine: {'line': b'3: from launch import LaunchDescription\n'}
[6.712225] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.712321] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.712415] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.712527] (articubot_one) StdoutLine: {'line': b"3:                 'serial_port': '/dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.3:1.0-port0',\n"}
[6.712625] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.712722] (articubot_one) StdoutLine: {'line': b'3: from launch.substitutions import LaunchConfiguration, Command\n'}
[6.712818] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.712914] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[6.713009] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.713104] (articubot_one) StdoutLine: {'line': b'3: import xacro\n'}
[6.713201] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.713298] (articubot_one) StdoutLine: {'line': b"3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')\n"}
[6.713405] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[6.713523] (articubot_one) StdoutLine: {'line': b"3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')\n"}
[6.713624] (articubot_one) StdoutLine: {'line': b'3:                                                     ^\n'}
[6.713722] (articubot_one) StdoutLine: {'line': b"3:     robot_description_config = Command(['xacro ', xacro_file, ' use_ros2_control:=', use_ros2_control, ' sim_mode:=', use_sim_time])\n"}
[6.713820] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.713918] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.714013] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.714108] (articubot_one) StdoutLine: {'line': b'3:     # Launch!\n'}
[6.714204] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.714301] (articubot_one) StdoutLine: {'line': b'3: import xacro\n'}
[6.714397] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.714510] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.714621] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.714719] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument\n'}
[6.714817] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.714914] (articubot_one) StdoutLine: {'line': b'3: from launch.conditions import IfCondition, UnlessCondition\n'}
[6.715010] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.715106] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.715202] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.715297] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.715394] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.715509] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.715610] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.715708] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.715804] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[6.715908] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.716004] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[6.716099] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.716195] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.716291] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.716388] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.716503] (articubot_one) StdoutLine: {'line': b'3:         )    \n'}
[6.716603] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[6.716698] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.716795] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.716891] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.716986] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.717083] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.717178] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.717284] (articubot_one) StdoutLine: {'line': b"3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.\n"}
[6.717383] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.717497] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.717598] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.717696] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[6.717793] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.717888] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.717984] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[6.718078] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[6.718207] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[6.718306] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[6.718403] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[6.718515] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.718615] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.718710] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.718804] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.718898] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.718994] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[6.719090] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.719186] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.719283] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[6.719377] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[6.719488] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[6.719590] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[6.719686] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[6.719781] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.719876] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.719973] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.720070] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.720167] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.720264] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[6.720361] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.720470] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.720572] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[6.720668] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[6.720764] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[6.720861] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[6.720958] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[6.721054] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.721150] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.721245] (articubot_one) StdoutLine: {'line': b'3:        \n'}
[6.721340] (articubot_one) StdoutLine: {'line': b'3:                                                                                            ^\n'}
[6.721455] (articubot_one) StdoutLine: {'line': b"3:     package='ros_gz_bridge',\n"}
[6.721560] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.721656] (articubot_one) StdoutLine: {'line': b"3:     executable='parameter_bridge',\n"}
[6.721752] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.721855] (articubot_one) StdoutLine: {'line': b'3:     arguments=[\n'}
[6.721953] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.722050] (articubot_one) StdoutLine: {'line': b"3:           '/odom@nav_msgs/msg/Odometry@gz.msgs.Odometry',\n"}
[6.722147] (articubot_one) StdoutLine: {'line': b'3:           ^\n'}
[6.722243] (articubot_one) StdoutLine: {'line': b"3:          '/scan@sensor_msgs/msg/LaserScan@gz.msgs.LaserScan',\n"}
[6.722338] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[6.722441] (articubot_one) StdoutLine: {'line': b"3:     output='screen'\n"}
[6.722547] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.722642] (articubot_one) StdoutLine: {'line': b'3: )\n'}
[6.722737] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.722833] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_image",\n'}
[6.722929] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.723025] (articubot_one) StdoutLine: {'line': b'3:         executable="image_bridge",\n'}
[6.723122] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.723217] (articubot_one) StdoutLine: {'line': b'3:         arguments=["/camera/image_raw"]\n'}
[6.723311] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.723406] (articubot_one) StdoutLine: {'line': b'3:     #Adding rviz plugin\n'}
[6.723517] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.723619] (articubot_one) StdoutLine: {'line': b"3:     share_dir=get_package_share_directory('articubot_one')\n"}
[6.723717] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.723814] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.723910] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.724005] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.724100] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.724196] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.724290] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.724385] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.724497] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.724598] (articubot_one) StdoutLine: {'line': b'3: import time \n'}
[6.724696] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.724793] (articubot_one) StdoutLine: {'line': b'3: import time \n'}
[6.724889] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.725015] (articubot_one) StdoutLine: {'line': b'3: import time \n'}
[6.725120] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.725241] (articubot_one) StdoutLine: {'line': b'3: from rclpy.executors import SingleThreadedExecutor\n'}
[6.725342] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.725453] (articubot_one) StdoutLine: {'line': b'3: from sensor_msgs.msg import LaserScan\n'}
[6.725562] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.725660] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[6.725758] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.725855] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[6.725954] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.726050] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[6.726146] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[6.726243] (articubot_one) StdoutLine: {'line': b'3: from articubot_one.obstacle_avoidance import Obstacle \n'}
[6.726341] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.726447] (articubot_one) StdoutLine: {'line': b'3: from articubot_one.obstacle_avoidance import Obstacle \n'}
[6.726569] (articubot_one) StdoutLine: {'line': b'3:                                                      ^\n'}
[6.726666] (articubot_one) StdoutLine: {'line': b"3: @pytest.fixture(scope='module')\n"}
[6.726763] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.726858] (articubot_one) StdoutLine: {'line': b'3: @pytest.fixture\n'}
[6.726953] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.727048] (articubot_one) StdoutLine: {'line': b'3:              executor.spin_once(0.1) # Spin briefly to process events\n'}
[6.727152] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.727250] (articubot_one) StdoutLine: {'line': b'3:              executor.spin_once(0.1) # Spin briefly to process events\n'}
[6.727347] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.727456] (articubot_one) StdoutLine: {'line': b'3:              executor.spin_once(0.1) # Spin briefly to process events\n'}
[6.727561] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.727659] (articubot_one) StdoutLine: {'line': b'3:         yield node, executor # Yield the node and executor\n'}
[6.727755] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.727850] (articubot_one) StdoutLine: {'line': b'3:              executor.shutdown()\n'}
[6.727978] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.728074] (articubot_one) StdoutLine: {'line': b'3:              executor.shutdown()\n'}
[6.728169] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.728266] (articubot_one) StdoutLine: {'line': b'3:     assert node.get_name() == "Laser_Obstacle_Avoidance"\n'}
[6.728364] (articubot_one) StdoutLine: {'line': b'3:                               ^\n'}
[6.728474] (articubot_one) StdoutLine: {'line': b"3:     assert node.laser_sub.topic_name == '/scan' # Often includes the leading slash in ROS 2\n"}
[6.728579] (articubot_one) StdoutLine: {'line': b'3:                                                ^\n'}
[6.728677] (articubot_one) StdoutLine: {'line': b"3:     assert node.cmd_vel_pub.topic_name == '/cmd_vel' # Often includes the leading slash\n"}
[6.728775] (articubot_one) StdoutLine: {'line': b'3:                                                     ^\n'}
[6.728874] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold, float), f"expect the threshold to be a float"\n'}
[6.728973] (articubot_one) StdoutLine: {'line': b'3:                                              ^\n'}
[6.729070] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold, float), f"expect the threshold to be a float"\n'}
[6.729168] (articubot_one) StdoutLine: {'line': b'3:                                              ^\n'}
[6.729265] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic, str), f"expect the scan topic to be a string"\n'}
[6.729363] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[6.729474] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic, str), f"expect the scan topic to be a string"\n'}
[6.729577] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[6.729673] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"\n'}
[6.729769] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[6.729865] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"\n'}
[6.729963] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[6.730061] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle, float), f'expect the angle of sector to be a float'\n"}
[6.730160] (articubot_one) StdoutLine: {'line': b'3:                                                       ^\n'}
[6.730258] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic == "scan"\n'}
[6.730356] (articubot_one) StdoutLine: {'line': b'3:                              ^\n'}
[6.730469] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.730576] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.730672] (articubot_one) StdoutLine: {'line': b'3:         pytest.fail(f"Parameter not declared: {e}")\n'}
[6.730768] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.730877] (articubot_one) StdoutLine: {'line': b'3:         pytest.fail(f"Error getting parameter: {e}")\n'}
[6.730977] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.731075] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.731175] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.731272] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.731368] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.731481] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.731583] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.731681] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.731779] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.731878] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.731975] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.732072] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.732169] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.732265] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.732361] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.732472] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.732576] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.732675] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.732775] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.732873] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.732971] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.733069] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.733167] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.733265] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.733361] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.733472] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.733577] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.733681] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.733780] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.733879] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.733977] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.734075] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.734172] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.734269] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.734368] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.734481] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.734587] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.734686] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.734783] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.734895] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.734993] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.735096] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.735194] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.735293] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.735391] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.735506] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.735608] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.735705] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.735803] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.735900] (articubot_one) StdoutLine: {'line': b"3: '''    ^\n"}
[6.735996] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.736091] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.736188] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.736286] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.736384] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.736499] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.736600] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.736698] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.736796] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.736893] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.736991] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.737090] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.737189] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.737288] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.737385] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.737499] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.737600] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.737698] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.737793] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.737888] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.737985] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.738083] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.738180] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.738276] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.738373] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.738482] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.738585] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.738683] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.738779] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.738878] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.738984] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.739083] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.739181] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.739279] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.739377] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.739497] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.739597] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.739693] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.739790] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.739888] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.739986] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.740083] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.740180] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.740276] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.740372] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.740482] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.740586] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.740684] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.740782] (articubot_one) StdoutLine: {'line': b"3: '''    ^\n"}
[6.740878] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.740974] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.741071] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.741166] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.741262] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.741358] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.741469] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.741576] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.741674] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.741772] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.741870] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.741969] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.742068] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.742164] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.742260] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.742356] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.742465] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.742571] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.742666] (-) TimerEvent: {}
[6.742779] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.742964] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.743134] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.743295] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.743575] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.743757] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.743987] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.744221] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.744388] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.744591] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.744771] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.744944] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.745118] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.745323] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.745510] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.745624] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.745726] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.745826] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.745925] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.746023] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.746120] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.746217] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.746313] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.746410] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.746552] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.746654] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.746754] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.746851] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.746949] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.747068] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.747196] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.747297] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.747396] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.747522] (articubot_one) StdoutLine: {'line': b'3:          \n'}
[6.747638] (articubot_one) StdoutLine: {'line': b'3:                   ^\n'}
[6.747762] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.747957] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.748195] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.748751] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.749079] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.749325] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.749584] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.749836] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.750074] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.750308] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.750570] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.750831] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.751079] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.751319] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.751588] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.751833] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.752069] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.752303] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.752558] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.752801] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.753034] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.753269] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.753762] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.754035] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.754273] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.754526] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.754773] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.754908] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.755012] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.755114] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.755215] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.755315] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.755414] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.755548] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.755648] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.755747] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.755846] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.755945] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.756044] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.756143] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.756242] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.756339] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.756455] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.756567] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.756666] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.756762] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.756859] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.756956] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.757054] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.757151] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.757248] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.757344] (articubot_one) StdoutLine: {'line': b'3:       ^\n'}
[6.757475] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.757583] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.757681] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.757778] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.757876] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.757973] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.758071] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.758168] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.758266] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.758362] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.758479] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.758584] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.758682] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.758790] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.758888] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.758986] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.759082] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.759179] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.759275] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.759370] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.759502] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.759609] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.759708] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.759806] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.759905] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.760002] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.760098] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.760194] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.760291] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.760386] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.760542] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.760647] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.760746] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.760845] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.760943] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.761043] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.761140] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.761237] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.761334] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.761462] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.761578] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.761678] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.761789] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.761888] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.761984] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.762080] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.762176] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.762273] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.762369] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.762483] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.762587] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.762684] (articubot_one) StdoutLine: {'line': b'3:          \n'}
[6.762781] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[6.762878] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.762974] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.763069] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.763166] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.763264] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.763363] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.763484] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.763588] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.763686] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.763782] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.763879] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.763975] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.764156] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.764448] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.764565] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.764667] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.764765] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.764863] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.764961] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.765059] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.765158] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.765255] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.765354] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.765476] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.765584] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.765683] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.765780] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.765877] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.765975] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.766072] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.766169] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.766267] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.766363] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.766475] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.766578] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.766675] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.766774] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.766871] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.766968] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.767064] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.767160] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.767256] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.767353] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.767464] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.767569] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.767665] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.767762] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.767858] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.767966] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.768063] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.768159] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.768254] (articubot_one) StdoutLine: {'line': b'3:          \n'}
[6.768349] (articubot_one) StdoutLine: {'line': b'3:        ^\n'}
[6.768457] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.768562] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.768660] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.768757] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.768853] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.768950] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.769048] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.769145] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.769242] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.769339] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.769460] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.769572] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.769670] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.769767] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.769863] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.769957] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.770053] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.770148] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.770245] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.770339] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.770445] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.770553] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.770651] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.770749] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.770846] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.770942] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.771039] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.771142] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.771241] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.771339] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.771450] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.771559] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.771662] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.771761] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.771859] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.771958] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.772057] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.772155] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.772262] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.772359] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.772598] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.772710] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.772823] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.772923] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.773021] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.773119] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.773216] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.773314] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.773411] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.773541] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.773642] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.773739] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.773836] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.773932] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.774030] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.774161] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.774356] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.774592] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.774806] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.775014] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.775223] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.775443] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.775667] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.775877] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.776086] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.776293] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.776571] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.776752] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.776925] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.777096] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.777267] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.777451] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.777635] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.777807] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.777978] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.778149] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.778321] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.778515] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.778693] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.778865] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.779037] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.779209] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.779381] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.779526] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.779644] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.779745] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.779845] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.779943] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.780040] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.780138] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.780235] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.780333] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.780449] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.780563] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.780662] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.780760] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.780857] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.780954] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.781051] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.781147] (articubot_one) StdoutLine: {'line': b"3: '''       ^\n"}
[6.781244] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.781342] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.781454] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.781563] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.781664] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.781760] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.781858] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.781954] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.782060] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.782159] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.782257] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.782356] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.782485] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.782595] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.782693] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.782792] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.782889] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.782988] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.783087] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.783183] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.783281] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.783378] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.783504] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.783607] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.783703] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.783799] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.783895] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.783993] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.784100] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.784198] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.784297] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.784395] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.784509] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.784610] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.784707] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.784804] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.784901] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.785030] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.785128] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.785224] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.785321] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.785425] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.785533] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.785631] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.785727] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.785824] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.785922] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.786031] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.786130] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.786226] (articubot_one) StdoutLine: {'line': b'3:    ^\n'}
[6.786323] (articubot_one) StdoutLine: {'line': b'3: 9     E111 indentation is not a multiple of 4\n'}
[6.786428] (articubot_one) StdoutLine: {'line': b'3: 1     E114 indentation is not a multiple of 4 (comment)\n'}
[6.786547] (articubot_one) StdoutLine: {'line': b'3: 4     E117 over-indented (comment)\n'}
[6.786647] (articubot_one) StdoutLine: {'line': b'3: 6     E122 continuation line missing indentation or outdented\n'}
[6.786745] (articubot_one) StdoutLine: {'line': b'3: 3     E128 continuation line under-indented for visual indent\n'}
[6.786843] (articubot_one) StdoutLine: {'line': b'3: 5     E131 continuation line unaligned for hanging indent\n'}
[6.786941] (articubot_one) StdoutLine: {'line': b"3: 3     E203 whitespace before ':'\n"}
[6.787040] (articubot_one) StdoutLine: {'line': b'3: 9     E225 missing whitespace around operator\n'}
[6.787137] (articubot_one) StdoutLine: {'line': b"3: 36    E231 missing whitespace after ','\n"}
[6.787233] (articubot_one) StdoutLine: {'line': b'3: 8     E261 at least two spaces before inline comment\n'}
[6.787330] (articubot_one) StdoutLine: {'line': b"3: 3     E262 inline comment should start with '# '\n"}
[6.787444] (articubot_one) StdoutLine: {'line': b"3: 5     E265 block comment should start with '# '\n"}
[6.787555] (articubot_one) StdoutLine: {'line': b'3: 1     E275 missing whitespace after keyword\n'}
[6.787654] (articubot_one) StdoutLine: {'line': b'3: 6     E302 expected 2 blank lines, found 1\n'}
[6.787752] (articubot_one) StdoutLine: {'line': b'3: 20    E303 too many blank lines (2)\n'}
[6.787850] (articubot_one) StdoutLine: {'line': b'3: 1     E305 expected 2 blank lines after class or function definition, found 1\n'}
[6.787950] (articubot_one) StdoutLine: {'line': b'3: 30    E501 line too long (110 > 99 characters)\n'}
[6.788047] (articubot_one) StdoutLine: {'line': b"3: 5     F401 'os' imported but unused\n"}
[6.788152] (articubot_one) StdoutLine: {'line': b'3: 5     F541 f-string is missing placeholders\n'}
[6.788249] (articubot_one) StdoutLine: {'line': b"3: 14    I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[6.788348] (articubot_one) StdoutLine: {'line': b'3: 3     I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[6.788458] (articubot_one) StdoutLine: {'line': b"3: 7     I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.\n"}
[6.788567] (articubot_one) StdoutLine: {'line': b'3: 44    Q000 Double quotes found but single quotes preferred\n'}
[6.788666] (articubot_one) StdoutLine: {'line': b'3: 2     Q001 Single quote multiline found but double quotes preferred\n'}
[6.788763] (articubot_one) StdoutLine: {'line': b'3: 24    W291 trailing whitespace\n'}
[6.788861] (articubot_one) StdoutLine: {'line': b'3: 2     W292 no newline at end of file\n'}
[6.788958] (articubot_one) StdoutLine: {'line': b'3: 14    W293 blank line contains whitespace\n'}
[6.789056] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.789151] (articubot_one) StdoutLine: {'line': b'3: ./launch/rplidar.launch.py:5:1: E302 expected 2 blank lines, found 1\n'}
[6.789252] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.789348] (articubot_one) StdoutLine: {'line': b'3: ./launch/rplidar.launch.py:14:100: E501 line too long (113 > 99 characters)\n'}
[6.789457] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.789563] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:6:1: I101 Imported names are in the wrong order. Should be Command, LaunchConfiguration\n'}
[6.789661] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.789759] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:7:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration, Command'\n"}
[6.789859] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.789955] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:10:1: F401 'xacro' imported but unused\n"}
[6.790052] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.790148] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:21:39: E231 missing whitespace after ','\n"}
[6.790244] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.790340] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:21:53: E231 missing whitespace after ','\n"}
[6.790461] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.790571] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:23:100: E501 line too long (132 > 99 characters)\n'}
[6.790670] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.790766] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:24:1: W293 blank line contains whitespace\n'}
[6.790863] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.790959] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:35:5: E303 too many blank lines (2)\n'}
[6.791055] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.791151] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:2:1: I201 Missing newline between import groups. 'import xacro' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.791249] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.791345] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:3:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'import xacro'\n"}
[6.791471] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.791581] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[6.791682] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.791788] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:12:1: I100 Import statements are in the wrong order. 'from launch.conditions import IfCondition, UnlessCondition' should be before 'from launch_ros.actions import Node'\n"}
[6.791889] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.791986] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:18:5: E303 too many blank lines (2)\n'}
[6.792091] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.792174] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:18:100: E501 line too long (110 > 99 characters)\n'}
[6.792259] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.792342] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:21:17: E225 missing whitespace around operator\n'}
[6.792434] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.792527] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:21:33: E261 at least two spaces before inline comment\n'}
[6.792611] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.792694] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:21:34: E262 inline comment should start with '# '\n"}
[6.792776] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.792859] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:25:62: E231 missing whitespace after ','\n"}
[6.792942] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.793025] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:25:71: E231 missing whitespace after ','\n"}
[6.793109] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.793192] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:33:10: W291 trailing whitespace\n'}
[6.793275] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.793357] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:34:1: W293 blank line contains whitespace\n'}
[6.793449] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.793538] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:47:21: E131 continuation line unaligned for hanging indent\n'}
[6.793632] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.793714] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:47:100: E501 line too long (104 > 99 characters)\n'}
[6.793798] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.793879] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:50:100: E501 line too long (126 > 99 characters)\n'}
[6.793962] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.794045] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:58:5: Q001 Single quote multiline found but double quotes preferred\n'}
[6.794127] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.794209] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:58:5: E303 too many blank lines (2)\n'}
[6.794291] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.794372] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:59:100: E501 line too long (101 > 99 characters)\n'}
[6.794480] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.794569] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:72:5: E122 continuation line missing indentation or outdented\n'}
[6.794652] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.794733] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:73:5: E122 continuation line missing indentation or outdented\n'}
[6.794816] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.794898] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:74:5: E122 continuation line missing indentation or outdented\n'}
[6.794981] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.795062] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:77:11: E131 continuation line unaligned for hanging indent\n'}
[6.795144] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.795226] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:78:10: E131 continuation line unaligned for hanging indent\n'}
[6.795315] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.795398] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:81:5: E122 continuation line missing indentation or outdented\n'}
[6.795511] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.795598] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:82:1: E122 continuation line missing indentation or outdented\n'}
[6.795686] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.795769] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:85:17: Q000 Double quotes found but single quotes preferred\n'}
[6.795852] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.795933] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:86:20: Q000 Double quotes found but single quotes preferred\n'}
[6.796017] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.796099] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:87:20: Q000 Double quotes found but single quotes preferred\n'}
[6.796182] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.796265] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:89:5: E265 block comment should start with '# '\n"}
[6.796349] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.796441] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:90:14: E225 missing whitespace around operator\n'}
[6.796535] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.796617] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:96:1: W293 blank line contains whitespace\n'}
[6.796699] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.796781] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:136:1: W293 blank line contains whitespace\n'}
[6.796864] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.796946] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:140:1: W293 blank line contains whitespace\n'}
[6.797028] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.797110] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:144:1: W293 blank line contains whitespace\n'}
[6.797193] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.797274] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:5:1: I100 Import statements are in the wrong order. 'import time' should be before 'import rclpy' and in a different group.\n"}
[6.797357] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.797450] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:5:1: I201 Missing newline between import groups. 'import time' is identified as Stdlib and 'import rclpy' is identified as Third Party.\n"}
[6.797543] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.797626] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:5:12: W291 trailing whitespace\n'}
[6.797710] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.797792] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:6:1: I201 Missing newline between import groups. 'from rclpy.executors import SingleThreadedExecutor' is identified as Third Party and 'import time' is identified as Stdlib.\n"}
[6.797878] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.797960] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:7:1: F401 'sensor_msgs.msg.LaserScan' imported but unused\n"}
[6.798043] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.798123] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:8:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[6.798206] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.798288] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:8:1: F401 'geometry_msgs.msg.Twist' imported but unused\n"}
[6.798371] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.798497] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:8:36: W291 trailing whitespace\n'}
[6.798588] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.798672] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:10:1: I100 Import statements are in the wrong order. 'from articubot_one.obstacle_avoidance import Obstacle' should be before 'from geometry_msgs.msg import Twist'\n"}
[6.798758] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.798841] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:10:54: W291 trailing whitespace\n'}
[6.798925] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.799007] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:12:1: E302 expected 2 blank lines, found 1\n'}
[6.799091] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.799174] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:19:1: E302 expected 2 blank lines, found 1\n'}
[6.799257] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.799340] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:14: E111 indentation is not a multiple of 4\n'}
[6.799437] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.799536] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:14: E117 over-indented\n'}
[6.799620] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.799702] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:37: E261 at least two spaces before inline comment\n'}
[6.799785] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.799868] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:39:29: E261 at least two spaces before inline comment\n'}
[6.799952] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.800035] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:46:14: E111 indentation is not a multiple of 4\n'}
[6.800119] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.800201] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:46:14: E117 over-indented\n'}
[6.800284] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.800366] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:52:31: Q000 Double quotes found but single quotes preferred\n'}
[6.800473] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.800561] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:55:48: E261 at least two spaces before inline comment\n'}
[6.800646] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.800730] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:57:53: E261 at least two spaces before inline comment\n'}
[6.800814] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.800898] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:76:46: Q000 Double quotes found but single quotes preferred\n'}
[6.800982] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.801076] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:76:46: F541 f-string is missing placeholders\n'}
[6.801154] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.801230] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:77:45: Q000 Double quotes found but single quotes preferred\n'}
[6.801311] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.801388] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:77:45: F541 f-string is missing placeholders\n'}
[6.801479] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.801560] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:78:44: Q000 Double quotes found but single quotes preferred\n'}
[6.801639] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.801716] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:78:44: F541 f-string is missing placeholders\n'}
[6.801794] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.801871] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:79:55: F541 f-string is missing placeholders\n'}
[6.801953] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.802030] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:84:30: Q000 Double quotes found but single quotes preferred\n'}
[6.802107] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.802184] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:85:29: Q000 Double quotes found but single quotes preferred\n'}
[6.802261] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.802338] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:89:21: Q000 Double quotes found but single quotes preferred\n'}
[6.802415] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.802518] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:91:21: Q000 Double quotes found but single quotes preferred\n'}
[6.802597] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.802674] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:96:1: Q001 Single quote multiline found but double quotes preferred\n'}
[6.802751] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.802828] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:96:1: E303 too many blank lines (4)\n'}
[6.802904] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.802981] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:106:74: W291 trailing whitespace\n'}
[6.803059] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.803137] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:126:52: W291 trailing whitespace\n'}
[6.803215] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.803292] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:127:61: W291 trailing whitespace\n'}
[6.803368] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.803466] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:132:63: W291 trailing whitespace\n'}
[6.803551] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.803629] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:136:42: W291 trailing whitespace\n'}
[6.803706] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.803783] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:144:4: W291 trailing whitespace\n'}
[6.803861] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.803937] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:144:8: W292 no newline at end of file\n'}
[6.804014] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.804091] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.804167] (articubot_one) StdoutLine: {'line': b'3: 15 files checked\n'}
[6.804243] (articubot_one) StdoutLine: {'line': b'3: 270 errors\n'}
[6.804319] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.804396] (articubot_one) StdoutLine: {'line': b"3: 'E'-type errors: 150\n"}
[6.804501] (articubot_one) StdoutLine: {'line': b"3: 'F'-type errors: 10\n"}
[6.804583] (articubot_one) StdoutLine: {'line': b"3: 'I'-type errors: 24\n"}
[6.804661] (articubot_one) StdoutLine: {'line': b"3: 'Q'-type errors: 46\n"}
[6.804739] (articubot_one) StdoutLine: {'line': b"3: 'W'-type errors: 40\n"}
[6.804815] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.804892] (articubot_one) StdoutLine: {'line': b'3: Checked files:\n'}
[6.804969] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.805046] (articubot_one) StdoutLine: {'line': b'3: * ./setup.py\n'}
[6.805125] (articubot_one) StdoutLine: {'line': b'3: * ./test/pytest/test_laserObstacle.py\n'}
[6.805204] (articubot_one) StdoutLine: {'line': b'3: * ./articubot_one/obstacle_avoidance.py\n'}
[6.805283] (articubot_one) StdoutLine: {'line': b'3: * ./articubot_one/__init__.py\n'}
[6.805361] (articubot_one) StdoutLine: {'line': b'3: * ./launch/joystick.launch.py\n'}
[6.805451] (articubot_one) StdoutLine: {'line': b'3: * ./launch/online_async_launch.py\n'}
[6.805536] (articubot_one) StdoutLine: {'line': b'3: * ./launch/ball_tracker.launch.py\n'}
[6.805624] (articubot_one) StdoutLine: {'line': b'3: * ./launch/localization_launch.py\n'}
[6.805701] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rviz_gazebo.launch.py\n'}
[6.805779] (articubot_one) StdoutLine: {'line': b'3: * ./launch/navigation_launch.py\n'}
[6.805857] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rsp.launch.py\n'}
[6.805936] (articubot_one) StdoutLine: {'line': b'3: * ./launch/launch_robot.launch.py\n'}
[6.806028] (articubot_one) StdoutLine: {'line': b'3: * ./launch/camera.launch.py\n'}
[6.806149] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rplidar.launch.py\n'}
[6.806243] (articubot_one) StdoutLine: {'line': b'3: * ./launch/launch_sim.launch.py\n'}
[6.806323] (articubot_one) StdoutLine: {'line': b'3: -- run_test.py: return code 1\n'}
[6.806403] (articubot_one) StdoutLine: {'line': b"3: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml'\n"}
[6.806500] (articubot_one) StdoutLine: {'line': b'3/6 Test #3: flake8 ...........................***Failed    0.59 sec\n'}
[6.806583] (articubot_one) StdoutLine: {'line': b'test 4\n'}
[6.806663] (articubot_one) StdoutLine: {'line': b'    Start 4: lint_cmake\n'}
[6.806743] (articubot_one) StdoutLine: {'line': b'\n'}
[6.806825] (articubot_one) StdoutLine: {'line': b'4: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/jazzy/bin/ament_lint_cmake" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml"\n'}
[6.806912] (articubot_one) StdoutLine: {'line': b'4: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[6.806993] (articubot_one) StdoutLine: {'line': b'4: Test timeout computed to be: 60\n'}
[6.807073] (articubot_one) StdoutLine: {'line': b"4: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[6.807152] (articubot_one) StdoutLine: {'line': b'4:  - /opt/ros/jazzy/bin/ament_lint_cmake --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml\n'}
[6.842794] (-) TimerEvent: {}
[6.877045] (articubot_one) StdoutLine: {'line': b'4: CMakeLists.txt:40: Line ends in whitespace [whitespace/eol]\n'}
[6.877235] (articubot_one) StdoutLine: {'line': b'4: CMakeLists.txt:55: Line ends in whitespace [whitespace/eol]\n'}
[6.877343] (articubot_one) StdoutLine: {'line': b'4: \n'}
[6.877468] (articubot_one) StdoutLine: {'line': b'4: \n'}
[6.877572] (articubot_one) StdoutLine: {'line': b'4: 2 errors\n'}
[6.892142] (articubot_one) StdoutLine: {'line': b'4: -- run_test.py: return code 1\n'}
[6.892448] (articubot_one) StdoutLine: {'line': b"4: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml'\n"}
[6.903579] (articubot_one) StdoutLine: {'line': b'4/6 Test #4: lint_cmake .......................***Failed    0.23 sec\n'}
[6.903868] (articubot_one) StdoutLine: {'line': b'test 5\n'}
[6.903964] (articubot_one) StdoutLine: {'line': b'    Start 5: pep257\n'}
[6.904068] (articubot_one) StdoutLine: {'line': b'\n'}
[6.904155] (articubot_one) StdoutLine: {'line': b'5: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_pep257/pep257.txt" "--command" "/opt/ros/jazzy/bin/ament_pep257" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml"\n'}
[6.904252] (articubot_one) StdoutLine: {'line': b'5: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[6.904345] (articubot_one) StdoutLine: {'line': b'5: Test timeout computed to be: 60\n'}
[6.942918] (-) TimerEvent: {}
[6.980290] (articubot_one) StdoutLine: {'line': b"5: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[6.980530] (articubot_one) StdoutLine: {'line': b'5:  - /opt/ros/jazzy/bin/ament_pep257 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml\n'}
[7.043035] (-) TimerEvent: {}
[7.143304] (-) TimerEvent: {}
[7.170408] (articubot_one) StdoutLine: {'line': b'5: checking ./articubot_one/__init__.py\n'}
[7.170671] (articubot_one) StdoutLine: {'line': b'5: checking ./articubot_one/obstacle_avoidance.py\n'}
[7.170829] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/ball_tracker.launch.py\n'}
[7.170971] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/camera.launch.py\n'}
[7.171107] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/joystick.launch.py\n'}
[7.171267] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/launch_robot.launch.py\n'}
[7.171403] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/launch_sim.launch.py\n'}
[7.171588] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/localization_launch.py\n'}
[7.171730] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/navigation_launch.py\n'}
[7.171869] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/online_async_launch.py\n'}
[7.172004] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rplidar.launch.py\n'}
[7.172140] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rsp.launch.py\n'}
[7.172277] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rviz_gazebo.launch.py\n'}
[7.172411] (articubot_one) StdoutLine: {'line': b'5: checking ./setup.py\n'}
[7.172602] (articubot_one) StdoutLine: {'line': b'5: checking ./test/pytest/test_laserObstacle.py\n'}
[7.172740] (articubot_one) StdoutLine: {'line': b'5: No problems found\n'}
[7.194117] (articubot_one) StdoutLine: {'line': b'5: -- run_test.py: return code 0\n'}
[7.194354] (articubot_one) StdoutLine: {'line': b"5: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml'\n"}
[7.206793] (articubot_one) StdoutLine: {'line': b'5/6 Test #5: pep257 ...........................   Passed    0.30 sec\n'}
[7.207181] (articubot_one) StdoutLine: {'line': b'test 6\n'}
[7.207392] (articubot_one) StdoutLine: {'line': b'    Start 6: xmllint\n'}
[7.207552] (articubot_one) StdoutLine: {'line': b'\n'}
[7.207646] (articubot_one) StdoutLine: {'line': b'6: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_xmllint/xmllint.txt" "--command" "/opt/ros/jazzy/bin/ament_xmllint" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml"\n'}
[7.207739] (articubot_one) StdoutLine: {'line': b'6: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[7.207823] (articubot_one) StdoutLine: {'line': b'6: Test timeout computed to be: 60\n'}
[7.243440] (-) TimerEvent: {}
[7.284772] (articubot_one) StdoutLine: {'line': b"6: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[7.285034] (articubot_one) StdoutLine: {'line': b'6:  - /opt/ros/jazzy/bin/ament_xmllint --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml\n'}
[7.343551] (-) TimerEvent: {}
[7.443868] (-) TimerEvent: {}
[7.544558] (-) TimerEvent: {}
[7.645318] (-) TimerEvent: {}
[7.746393] (-) TimerEvent: {}
[7.847132] (-) TimerEvent: {}
[7.947839] (-) TimerEvent: {}
[8.048626] (-) TimerEvent: {}
[8.149697] (-) TimerEvent: {}
[8.250475] (-) TimerEvent: {}
[8.351158] (-) TimerEvent: {}
[8.451941] (-) TimerEvent: {}
[8.552564] (-) TimerEvent: {}
[8.653192] (-) TimerEvent: {}
[8.754304] (-) TimerEvent: {}
[8.855053] (-) TimerEvent: {}
[8.956252] (-) TimerEvent: {}
[9.056971] (-) TimerEvent: {}
[9.157623] (-) TimerEvent: {}
[9.258368] (-) TimerEvent: {}
[9.359571] (-) TimerEvent: {}
[9.460305] (-) TimerEvent: {}
[9.561407] (-) TimerEvent: {}
[9.662238] (-) TimerEvent: {}
[9.763031] (-) TimerEvent: {}
[9.863996] (-) TimerEvent: {}
[9.964763] (-) TimerEvent: {}
[10.065871] (-) TimerEvent: {}
[10.166897] (-) TimerEvent: {}
[10.267645] (-) TimerEvent: {}
[10.368369] (-) TimerEvent: {}
[10.469096] (-) TimerEvent: {}
[10.569794] (-) TimerEvent: {}
[10.670578] (-) TimerEvent: {}
[10.771352] (-) TimerEvent: {}
[10.872125] (-) TimerEvent: {}
[10.973180] (-) TimerEvent: {}
[11.073921] (-) TimerEvent: {}
[11.174853] (-) TimerEvent: {}
[11.275598] (-) TimerEvent: {}
[11.376636] (-) TimerEvent: {}
[11.477640] (-) TimerEvent: {}
[11.578448] (-) TimerEvent: {}
[11.679137] (-) TimerEvent: {}
[11.780245] (-) TimerEvent: {}
[11.881029] (-) TimerEvent: {}
[11.982213] (-) TimerEvent: {}
[12.083381] (-) TimerEvent: {}
[12.184463] (-) TimerEvent: {}
[12.285518] (-) TimerEvent: {}
[12.386525] (-) TimerEvent: {}
[12.487493] (-) TimerEvent: {}
[12.588546] (-) TimerEvent: {}
[12.689575] (-) TimerEvent: {}
[12.790594] (-) TimerEvent: {}
[12.891627] (-) TimerEvent: {}
[12.992555] (-) TimerEvent: {}
[13.093369] (-) TimerEvent: {}
[13.194178] (-) TimerEvent: {}
[13.295125] (-) TimerEvent: {}
[13.396245] (-) TimerEvent: {}
[13.497399] (-) TimerEvent: {}
[13.598349] (-) TimerEvent: {}
[13.699159] (-) TimerEvent: {}
[13.799995] (-) TimerEvent: {}
[13.900762] (-) TimerEvent: {}
[14.001568] (-) TimerEvent: {}
[14.102498] (-) TimerEvent: {}
[14.203234] (-) TimerEvent: {}
[14.304016] (-) TimerEvent: {}
[14.404749] (-) TimerEvent: {}
[14.505508] (-) TimerEvent: {}
[14.606220] (-) TimerEvent: {}
[14.707143] (-) TimerEvent: {}
[14.807903] (-) TimerEvent: {}
[14.908695] (-) TimerEvent: {}
[15.009468] (-) TimerEvent: {}
[15.110305] (-) TimerEvent: {}
[15.211308] (-) TimerEvent: {}
[15.312329] (-) TimerEvent: {}
[15.413369] (-) TimerEvent: {}
[15.502741] (articubot_one) StdoutLine: {'line': b"6: File 'package.xml' is valid\n"}
[15.503625] (articubot_one) StdoutLine: {'line': b'6: \n'}
[15.504053] (articubot_one) StdoutLine: {'line': b'6: No problems found\n'}
[15.513629] (-) TimerEvent: {}
[15.565195] (articubot_one) StdoutLine: {'line': b'6: -- run_test.py: return code 0\n'}
[15.566016] (articubot_one) StdoutLine: {'line': b"6: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml'\n"}
[15.606092] (articubot_one) StdoutLine: {'line': b'6/6 Test #6: xmllint ..........................   Passed    8.40 sec\n'}
[15.608128] (articubot_one) StdoutLine: {'line': b'\n'}
[15.608967] (articubot_one) StdoutLine: {'line': b'33% tests passed\x1b[0;0m, \x1b[0;31m4 tests failed\x1b[0;0m out of 6\n'}
[15.610768] (articubot_one) StdoutLine: {'line': b'\n'}
[15.611527] (articubot_one) StdoutLine: {'line': b'Label Time Summary:\n'}
[15.611957] (articubot_one) StdoutLine: {'line': b'copyright     =   0.47 sec*proc (1 test)\n'}
[15.612308] (articubot_one) StdoutLine: {'line': b'flake8        =   0.59 sec*proc (1 test)\n'}
[15.612681] (articubot_one) StdoutLine: {'line': b'lint_cmake    =   0.23 sec*proc (1 test)\n'}
[15.612995] (articubot_one) StdoutLine: {'line': b'linter        =   9.99 sec*proc (5 tests)\n'}
[15.613290] (articubot_one) StdoutLine: {'line': b'pep257        =   0.30 sec*proc (1 test)\n'}
[15.613659] (-) TimerEvent: {}
[15.614010] (articubot_one) StdoutLine: {'line': b'pytest        =   5.56 sec*proc (1 test)\n'}
[15.614605] (articubot_one) StdoutLine: {'line': b'xmllint       =   8.40 sec*proc (1 test)\n'}
[15.614945] (articubot_one) StdoutLine: {'line': b'\n'}
[15.615252] (articubot_one) StdoutLine: {'line': b'Total Test time (real) =  15.56 sec\n'}
[15.615722] (articubot_one) StdoutLine: {'line': b'\n'}
[15.616290] (articubot_one) StdoutLine: {'line': b'The following tests FAILED:\n'}
[15.616879] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  1 - laser_obstacle_test (Failed)\x1b[0;0m\n'}
[15.617559] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  2 - copyright (Failed)\x1b[0;0m\n'}
[15.618269] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  3 - flake8 (Failed)\x1b[0;0m\n'}
[15.618921] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  4 - lint_cmake (Failed)\x1b[0;0m\n'}
[15.631151] (articubot_one) StderrLine: {'line': b'Errors while running CTest\n'}
[15.632183] (articubot_one) StderrLine: {'line': b'Output from these tests are in: /home/jonatan/ros2_ws/build/articubot_one/Testing/Temporary/LastTest.log\n'}
[15.632650] (articubot_one) StderrLine: {'line': b'Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.\n'}
[15.638965] (articubot_one) CommandEnded: {'returncode': 8}
[15.640885] (articubot_one) TestFailure: {'identifier': 'articubot_one'}
[15.641053] (articubot_one) JobEnded: {'identifier': 'articubot_one', 'rc': 0}
[15.644562] (-) EventReactorShutdown: {}
