[0.000000] (-) TimerEvent: {}
[0.001104] (articubot_one) JobQueued: {'identifier': 'articubot_one', 'dependencies': OrderedDict({'articubot_one': '/home/jonatan/ros2_ws/install/articubot_one'})}
[0.001195] (articubot_one) JobStarted: {'identifier': 'articubot_one'}
[0.033828] (articubot_one) Command: {'cmd': ['/usr/bin/ctest', '-C', 'Release', '-D', 'ExperimentalTest', '--no-compress-output', '-V', '--force-new-ctest-process'], 'cwd': '/home/jonatan/ros2_ws/build/articubot_one', 'env': OrderedDict({'GJS_DEBUG_TOPICS': 'JS ERROR;JS LOG', 'XDG_ACTIVATION_TOKEN': '2ddf9c17-5cf4-48ad-bc40-f39f8ecbfeb7', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'jonatan', 'GZ_CONFIG_PATH': '/opt/ros/jazzy/opt/gz_sim_vendor/share/gz:/opt/ros/jazzy/opt/sdformat_vendor/share/gz:/opt/ros/jazzy/opt/gz_gui_vendor/share/gz:/opt/ros/jazzy/opt/gz_transport_vendor/share/gz:/opt/ros/jazzy/opt/gz_rendering_vendor/share/gz:/opt/ros/jazzy/opt/gz_plugin_vendor/share/gz:/opt/ros/jazzy/opt/gz_fuel_tools_vendor/share/gz:/opt/ros/jazzy/opt/gz_msgs_vendor/share/gz:/opt/ros/jazzy/opt/gz_common_vendor/share/gz', 'XDG_SESSION_TYPE': 'wayland', 'CLUTTER_DISABLE_MIPMAPPED_TEXT': '1', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/opt/ros/jazzy/opt/gz_sim_vendor/lib:/opt/ros/jazzy/opt/gz_sensors_vendor/lib:/opt/ros/jazzy/opt/gz_physics_vendor/lib:/opt/ros/jazzy/opt/sdformat_vendor/lib:/opt/ros/jazzy/opt/rviz_ogre_vendor/lib:/opt/ros/jazzy/lib/x86_64-linux-gnu:/opt/ros/jazzy/opt/gz_gui_vendor/lib:/opt/ros/jazzy/opt/gz_transport_vendor/lib:/opt/ros/jazzy/opt/gz_rendering_vendor/lib:/opt/ros/jazzy/opt/gz_plugin_vendor/lib:/opt/ros/jazzy/opt/gz_fuel_tools_vendor/lib:/opt/ros/jazzy/opt/gz_msgs_vendor/lib:/opt/ros/jazzy/opt/gz_common_vendor/lib:/opt/ros/jazzy/opt/gz_math_vendor/lib:/opt/ros/jazzy/opt/gz_utils_vendor/lib:/opt/ros/jazzy/opt/gz_tools_vendor/lib:/opt/ros/jazzy/opt/gz_ogre_next_vendor/lib:/opt/ros/jazzy/opt/gz_dartsim_vendor/lib:/opt/ros/jazzy/opt/gz_cmake_vendor/lib:/opt/ros/jazzy/lib', 'LESS': '-R', 'HOME': '/home/jonatan', 'OLDPWD': '/home/jonatan', 'DESKTOP_SESSION': 'ubuntu', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'ZSH': '/home/jonatan/.oh-my-zsh', 'GIO_LAUNCHED_DESKTOP_FILE': '/usr/share/applications/terminator.desktop', 'ROS_PYTHON_VERSION': '3', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'GTK_MODULES': 'gail:atk-bridge', 'PAGER': 'less', 'PS1': '\\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$', 'MANAGERPID': '2008', 'P9K_TTY': 'old', 'SYSTEMD_EXEC_PID': '2272', 'GSM_SKIP_SSH_AGENT_WORKAROUND': 'true', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'GIO_LAUNCHED_DESKTOP_FILE_PID': '3097', 'WAYLAND_DISPLAY': 'wayland-0', 'ROS_DISTRO': 'jazzy', 'LOGNAME': 'jonatan', '_P9K_SSH_TTY': '/dev/pts/2', 'JOURNAL_STREAM': '9:19463', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'MEMORY_PRESSURE_WATCH': '/sys/fs/cgroup/user.slice/user-1000.slice/user@1000.service/session.slice/org.gnome.Shell@wayland.service/memory.pressure', 'XDG_SESSION_CLASS': 'user', 'USERNAME': 'jonatan', 'TERM': 'xterm-256color', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'PATH': '/opt/ros/jazzy/opt/gz_msgs_vendor/bin:/opt/ros/jazzy/opt/gz_tools_vendor/bin:/opt/ros/jazzy/opt/gz_ogre_next_vendor/bin:/opt/ros/jazzy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin', 'SESSION_MANAGER': 'local/HP-EliteBook-x360-1030-G2:@/tmp/.ICE-unix/2219,unix/HP-EliteBook-x360-1030-G2:/tmp/.ICE-unix/2219', 'INVOCATION_ID': '1d5efdbd10c34d46a8570a6c200c5332', 'XDG_MENU_PREFIX': 'gnome-', 'GNOME_SETUP_DISPLAY': ':1', 'XDG_RUNTIME_DIR': '/run/user/1000', 'DISPLAY': ':0', 'LANG': 'en_US.UTF-8', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'XMODIFIERS': '@im=ibus', 'XDG_SESSION_DESKTOP': 'ubuntu', 'XAUTHORITY': '/run/user/1000/.mutter-Xwaylandauth.DBMW62', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:', 'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh', 'AMENT_PREFIX_PATH': '/home/jonatan/ros2_ws/install/articubot_one:/opt/ros/jazzy', 'SHELL': '/usr/bin/zsh', 'TERMINATOR_UUID': 'urn:uuid:0947d2af-0509-4362-9f98-b841aba16eb4', 'QT_ACCESSIBILITY': '1', 'GDMSESSION': 'ubuntu', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'IGN_GAZEBO_RESOURCE_PATH': '/opt/ros/jazzy/share', 'GJS_DEBUG_OUTPUT': 'stderr', 'P9K_SSH': '0', 'ROS_AUTOMATIC_DISCOVERY_RANGE': 'SUBNET', 'QT_IM_MODULE': 'ibus', 'PWD': '/home/jonatan/ros2_ws/build/articubot_one', 'LC_ALL': 'en_US.UTF-8', '_P9K_TTY': '/dev/pts/2', 'XDG_DATA_DIRS': '/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'PYTHONPATH': '/home/jonatan/ros2_ws/install/articubot_one/lib/python3.12/site-packages:/opt/ros/jazzy/lib/python3.12/site-packages', 'COLCON': '1', 'MEMORY_PRESSURE_WRITE': 'c29tZSAyMDAwMDAgMjAwMDAwMAA=', 'VTE_VERSION': '7600', 'CMAKE_PREFIX_PATH': '/home/jonatan/ros2_ws/install/articubot_one:/opt/ros/jazzy/opt/gz_sim_vendor:/opt/ros/jazzy/opt/gz_sensors_vendor:/opt/ros/jazzy/opt/gz_physics_vendor:/opt/ros/jazzy/opt/sdformat_vendor:/opt/ros/jazzy/opt/gz_gui_vendor:/opt/ros/jazzy/opt/gz_transport_vendor:/opt/ros/jazzy/opt/gz_rendering_vendor:/opt/ros/jazzy/opt/gz_plugin_vendor:/opt/ros/jazzy/opt/gz_fuel_tools_vendor:/opt/ros/jazzy/opt/gz_msgs_vendor:/opt/ros/jazzy/opt/gz_common_vendor:/opt/ros/jazzy/opt/gz_math_vendor:/opt/ros/jazzy/opt/gz_utils_vendor:/opt/ros/jazzy/opt/gz_tools_vendor:/opt/ros/jazzy/opt/gz_ogre_next_vendor:/opt/ros/jazzy/opt/gz_dartsim_vendor:/opt/ros/jazzy/opt/gz_cmake_vendor'}), 'shell': False}
[0.047276] (articubot_one) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.047740] (articubot_one) StdoutLine: {'line': b'Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.048038] (articubot_one) StdoutLine: {'line': b'   Site: HP-EliteBook-x360-1030-G2\n'}
[0.048253] (articubot_one) StdoutLine: {'line': b'   Build name: (empty)\n'}
[0.048511] (articubot_one) StdoutLine: {'line': b' Add coverage exclude regular expressions.\n'}
[0.048711] (articubot_one) StdoutLine: {'line': b'Create new tag: 20250518-1846 - Experimental\n'}
[0.048890] (articubot_one) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.049079] (articubot_one) StdoutLine: {'line': b'Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.049460] (articubot_one) StdoutLine: {'line': b'Test project /home/jonatan/ros2_ws/build/articubot_one\n'}
[0.049710] (articubot_one) StdoutLine: {'line': b'Constructing a list of tests\n'}
[0.049919] (articubot_one) StdoutLine: {'line': b'Done constructing a list of tests\n'}
[0.050072] (articubot_one) StdoutLine: {'line': b'Updating test list for fixtures\n'}
[0.050243] (articubot_one) StdoutLine: {'line': b'Added 0 tests to meet fixture requirements\n'}
[0.050512] (articubot_one) StdoutLine: {'line': b'Checking test dependency graph...\n'}
[0.050708] (articubot_one) StdoutLine: {'line': b'Checking test dependency graph end\n'}
[0.050870] (articubot_one) StdoutLine: {'line': b'test 1\n'}
[0.051070] (articubot_one) StdoutLine: {'line': b'    Start 1: laser_obstacle_test\n'}
[0.051253] (articubot_one) StdoutLine: {'line': b'\n'}
[0.051469] (articubot_one) StdoutLine: {'line': b'1: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test.txt" "--command" "/usr/bin/python3" "-u" "-m" "pytest" "/home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py" "-o" "cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache" "--junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--junit-prefix=articubot_one"\n'}
[0.051734] (articubot_one) StdoutLine: {'line': b'1: Working Directory: /home/jonatan/ros2_ws/build/articubot_one\n'}
[0.051952] (articubot_one) StdoutLine: {'line': b'1: Test timeout computed to be: 360\n'}
[0.099691] (-) TimerEvent: {}
[0.142236] (articubot_one) StdoutLine: {'line': b"1: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/build/articubot_one':\n"}
[0.142593] (articubot_one) StdoutLine: {'line': b'1:  - /usr/bin/python3 -u -m pytest /home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py -o cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache --junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml --junit-prefix=articubot_one\n'}
[0.199773] (-) TimerEvent: {}
[0.300043] (-) TimerEvent: {}
[0.400322] (-) TimerEvent: {}
[0.500606] (-) TimerEvent: {}
[0.584745] (articubot_one) StdoutLine: {'line': b'1: ============================= test session starts ==============================\n'}
[0.584959] (articubot_one) StdoutLine: {'line': b'1: platform linux -- Python 3.12.3, pytest-7.4.4, pluggy-1.4.0\n'}
[0.591001] (articubot_one) StdoutLine: {'line': b'1: cachedir: /home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache\n'}
[0.591400] (articubot_one) StdoutLine: {'line': b'1: rootdir: /home/jonatan/ros2_ws/src/articubot_one\n'}
[0.591638] (articubot_one) StdoutLine: {'line': b'1: plugins: launch-testing-3.4.4, ament-xmllint-0.17.2, ament-pep257-0.17.2, ament-copyright-0.17.2, ament-flake8-0.17.2, launch-testing-ros-0.26.7, ament-lint-0.17.2, cov-4.1.0, typeguard-4.1.5, colcon-core-0.19.0\n'}
[0.600698] (-) TimerEvent: {}
[0.700965] (-) TimerEvent: {}
[0.801250] (-) TimerEvent: {}
[0.820205] (articubot_one) StdoutLine: {'line': b'1: collected 2 items\n'}
[0.820809] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.901353] (-) TimerEvent: {}
[1.001690] (-) TimerEvent: {}
[1.102372] (-) TimerEvent: {}
[1.202868] (-) TimerEvent: {}
[1.303393] (-) TimerEvent: {}
[1.403906] (-) TimerEvent: {}
[1.504793] (-) TimerEvent: {}
[1.605809] (-) TimerEvent: {}
[1.706393] (-) TimerEvent: {}
[1.807394] (-) TimerEvent: {}
[1.908034] (-) TimerEvent: {}
[2.008899] (-) TimerEvent: {}
[2.109398] (-) TimerEvent: {}
[2.210335] (-) TimerEvent: {}
[2.311292] (-) TimerEvent: {}
[2.411926] (-) TimerEvent: {}
[2.512681] (-) TimerEvent: {}
[2.613674] (-) TimerEvent: {}
[2.714684] (-) TimerEvent: {}
[2.815712] (-) TimerEvent: {}
[2.916713] (-) TimerEvent: {}
[3.017585] (-) TimerEvent: {}
[3.118147] (-) TimerEvent: {}
[3.218919] (-) TimerEvent: {}
[3.319800] (-) TimerEvent: {}
[3.420663] (-) TimerEvent: {}
[3.521592] (-) TimerEvent: {}
[3.622513] (-) TimerEvent: {}
[3.723217] (-) TimerEvent: {}
[3.823896] (-) TimerEvent: {}
[3.924753] (-) TimerEvent: {}
[4.025686] (-) TimerEvent: {}
[4.126671] (-) TimerEvent: {}
[4.227660] (-) TimerEvent: {}
[4.328596] (-) TimerEvent: {}
[4.429302] (-) TimerEvent: {}
[4.530348] (-) TimerEvent: {}
[4.631375] (-) TimerEvent: {}
[4.732401] (-) TimerEvent: {}
[4.833457] (-) TimerEvent: {}
[4.934487] (-) TimerEvent: {}
[5.035141] (-) TimerEvent: {}
[5.058815] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py .F             [100%]\n'}
[5.060325] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.062321] (articubot_one) StdoutLine: {'line': b'1: =================================== FAILURES ===================================\n'}
[5.063179] (articubot_one) StdoutLine: {'line': b'1: ___________________________ test_obstacle_parameters ___________________________\n'}
[5.066378] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.067396] (articubot_one) StdoutLine: {'line': b'1: obstacle_node = (<articubot_one.obstacle_avoidance.Obstacle object at 0x7de710587ce0>, <rclpy.executors.SingleThreadedExecutor object at 0x7de712355670>)\n'}
[5.069134] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.070404] (articubot_one) StdoutLine: {'line': b'1:     def test_obstacle_parameters(obstacle_node):\n'}
[5.071904] (articubot_one) StdoutLine: {'line': b'1:         """Test ROS parameters after the node has had a chance to spin."""\n'}
[5.072775] (articubot_one) StdoutLine: {'line': b'1:         node, executor = obstacle_node\n'}
[5.073612] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[5.074339] (articubot_one) StdoutLine: {'line': b'1:         # Now access parameters after the node has spun briefly\n'}
[5.075066] (articubot_one) StdoutLine: {'line': b'1:         # Note: Getting parameters this way works if they are declared\n'}
[5.075782] (articubot_one) StdoutLine: {'line': b'1:         # and have default values, or if they are set externally\n'}
[5.076647] (articubot_one) StdoutLine: {'line': b'1:         # AND the node has spun to receive them.\n'}
[5.077849] (articubot_one) StdoutLine: {'line': b'1:         try:\n'}
[5.078648] (articubot_one) StdoutLine: {'line': b'1:             # Use the correct ROS 2 way to get parameter values\n'}
[5.079366] (articubot_one) StdoutLine: {'line': b"1:             threshold = node.get_parameter('threshold_distance').value\n"}
[5.080654] (articubot_one) StdoutLine: {'line': b"1:             scan_topic = node.get_parameter('laser_scan_topic').value\n"}
[5.081524] (articubot_one) StdoutLine: {'line': b"1:             cmd_topic = node.get_parameter('cmd_vel_topic').value\n"}
[5.083009] (articubot_one) StdoutLine: {'line': b"1:             front_sector_angle = node.get_parameter('frontal_detection_angle_deg').value\n"}
[5.083742] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[5.084661] (articubot_one) StdoutLine: {'line': b'1:             # assert the values are correct as expected\n'}
[5.085331] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(threshold, float), f"expect the threshold to be a float"\n'}
[5.086056] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(scan_topic, str), f"expect the scan topic to be a string"\n'}
[5.086645] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"\n'}
[5.087147] (articubot_one) StdoutLine: {'line': b"1:             assert isinstance(front_sector_angle, float), f'expect the angle of sector to be a float'\n"}
[5.087719] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[5.088215] (articubot_one) StdoutLine: {'line': b'1:             # 2- check if the values of the parameters are correct\n'}
[5.088736] (articubot_one) StdoutLine: {'line': b"1:             # These values should match what's set in your launch file or node defaults\n"}
[5.089215] (articubot_one) StdoutLine: {'line': b'1:             assert threshold == 0.5\n'}
[5.089718] (articubot_one) StdoutLine: {'line': b'1: >           assert scan_topic == "scan"\n'}
[5.090254] (articubot_one) StdoutLine: {'line': b"1: E           AssertionError: assert '/scan' == 'scan'\n"}
[5.091041] (articubot_one) StdoutLine: {'line': b'1: E             - scan\n'}
[5.091984] (articubot_one) StdoutLine: {'line': b'1: E             + /scan\n'}
[5.093294] (articubot_one) StdoutLine: {'line': b'1: E             ? +\n'}
[5.094096] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.094729] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py:84: AssertionError\n'}
[5.095326] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.095863] (articubot_one) StdoutLine: {'line': b'1: During handling of the above exception, another exception occurred:\n'}
[5.096442] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.097114] (articubot_one) StdoutLine: {'line': b'1: obstacle_node = (<articubot_one.obstacle_avoidance.Obstacle object at 0x7de710587ce0>, <rclpy.executors.SingleThreadedExecutor object at 0x7de712355670>)\n'}
[5.097883] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.098874] (articubot_one) StdoutLine: {'line': b'1:     def test_obstacle_parameters(obstacle_node):\n'}
[5.099852] (articubot_one) StdoutLine: {'line': b'1:         """Test ROS parameters after the node has had a chance to spin."""\n'}
[5.100291] (articubot_one) StdoutLine: {'line': b'1:         node, executor = obstacle_node\n'}
[5.101010] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[5.101482] (articubot_one) StdoutLine: {'line': b'1:         # Now access parameters after the node has spun briefly\n'}
[5.102228] (articubot_one) StdoutLine: {'line': b'1:         # Note: Getting parameters this way works if they are declared\n'}
[5.102658] (articubot_one) StdoutLine: {'line': b'1:         # and have default values, or if they are set externally\n'}
[5.103064] (articubot_one) StdoutLine: {'line': b'1:         # AND the node has spun to receive them.\n'}
[5.103455] (articubot_one) StdoutLine: {'line': b'1:         try:\n'}
[5.103932] (articubot_one) StdoutLine: {'line': b'1:             # Use the correct ROS 2 way to get parameter values\n'}
[5.104313] (articubot_one) StdoutLine: {'line': b"1:             threshold = node.get_parameter('threshold_distance').value\n"}
[5.104752] (articubot_one) StdoutLine: {'line': b"1:             scan_topic = node.get_parameter('laser_scan_topic').value\n"}
[5.105153] (articubot_one) StdoutLine: {'line': b"1:             cmd_topic = node.get_parameter('cmd_vel_topic').value\n"}
[5.105534] (articubot_one) StdoutLine: {'line': b"1:             front_sector_angle = node.get_parameter('frontal_detection_angle_deg').value\n"}
[5.105960] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[5.106361] (articubot_one) StdoutLine: {'line': b'1:             # assert the values are correct as expected\n'}
[5.107133] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(threshold, float), f"expect the threshold to be a float"\n'}
[5.107957] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(scan_topic, str), f"expect the scan topic to be a string"\n'}
[5.108780] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"\n'}
[5.109602] (articubot_one) StdoutLine: {'line': b"1:             assert isinstance(front_sector_angle, float), f'expect the angle of sector to be a float'\n"}
[5.110370] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[5.111092] (articubot_one) StdoutLine: {'line': b'1:             # 2- check if the values of the parameters are correct\n'}
[5.111780] (articubot_one) StdoutLine: {'line': b"1:             # These values should match what's set in your launch file or node defaults\n"}
[5.112424] (articubot_one) StdoutLine: {'line': b'1:             assert threshold == 0.5\n'}
[5.113250] (articubot_one) StdoutLine: {'line': b'1:             assert scan_topic == "scan"\n'}
[5.114228] (articubot_one) StdoutLine: {'line': b'1:             assert cmd_topic == "cmd_vel"\n'}
[5.115093] (articubot_one) StdoutLine: {'line': b'1:             assert front_sector_angle == 60.0\n'}
[5.115760] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[5.116180] (articubot_one) StdoutLine: {'line': b'1:         except rclpy.exceptions.ParameterNotDeclaredException as e:\n'}
[5.116617] (articubot_one) StdoutLine: {'line': b'1:             pytest.fail(f"Parameter not declared: {e}")\n'}
[5.117140] (articubot_one) StdoutLine: {'line': b'1:         except Exception as e:\n'}
[5.117886] (articubot_one) StdoutLine: {'line': b'1: >           pytest.fail(f"Error getting parameter: {e}")\n'}
[5.118359] (articubot_one) StdoutLine: {'line': b"1: E           Failed: Error getting parameter: assert '/scan' == 'scan'\n"}
[5.118824] (articubot_one) StdoutLine: {'line': b'1: E             - scan\n'}
[5.119236] (articubot_one) StdoutLine: {'line': b'1: E             + /scan\n'}
[5.119817] (articubot_one) StdoutLine: {'line': b'1: E             ? +\n'}
[5.120204] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.120598] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py:91: Failed\n'}
[5.120993] (articubot_one) StdoutLine: {'line': b'1: ---------------------------- Captured stderr setup -----------------------------\n'}
[5.121355] (articubot_one) StdoutLine: {'line': b'1: [INFO] [1747594012.149823760] [Laser_Obstacle_Avoidance]: Subscribing to laser scan on: /scan\n'}
[5.121770] (articubot_one) StdoutLine: {'line': b'1: [INFO] [1747594012.152357158] [Laser_Obstacle_Avoidance]: Publishing velocity commands on: /cmd_vel\n'}
[5.122148] (articubot_one) StdoutLine: {'line': b'1: - generated xml file: /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml -\n'}
[5.122569] (articubot_one) StdoutLine: {'line': b'1: =========================== short test summary info ============================\n'}
[5.123320] (articubot_one) StdoutLine: {'line': b'1: FAILED ../../src/articubot_one/test/pytest/test_laserObstacle.py::test_obstacle_parameters\n'}
[5.124141] (articubot_one) StdoutLine: {'line': b'1: ========================= 1 failed, 1 passed in 4.48s ==========================\n'}
[5.135352] (-) TimerEvent: {}
[5.236130] (-) TimerEvent: {}
[5.336838] (-) TimerEvent: {}
[5.385628] (articubot_one) StdoutLine: {'line': b'1: -- run_test.py: return code 1\n'}
[5.386875] (articubot_one) StdoutLine: {'line': b"1: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml'\n"}
[5.435424] (articubot_one) StdoutLine: {'line': b'1/6 Test #1: laser_obstacle_test ..............***Failed    5.39 sec\n'}
[5.437027] (-) TimerEvent: {}
[5.437600] (articubot_one) StdoutLine: {'line': b'test 2\n'}
[5.438471] (articubot_one) StdoutLine: {'line': b'    Start 2: copyright\n'}
[5.439064] (articubot_one) StdoutLine: {'line': b'\n'}
[5.440040] (articubot_one) StdoutLine: {'line': b'2: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_copyright/copyright.txt" "--command" "/opt/ros/jazzy/bin/ament_copyright" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml"\n'}
[5.441196] (articubot_one) StdoutLine: {'line': b'2: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[5.442216] (articubot_one) StdoutLine: {'line': b'2: Test timeout computed to be: 200\n'}
[5.537193] (-) TimerEvent: {}
[5.596364] (articubot_one) StdoutLine: {'line': b"2: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[5.596601] (articubot_one) StdoutLine: {'line': b'2:  - /opt/ros/jazzy/bin/ament_copyright --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml\n'}
[5.637299] (-) TimerEvent: {}
[5.737571] (-) TimerEvent: {}
[5.837855] (-) TimerEvent: {}
[5.879277] (articubot_one) StdoutLine: {'line': b'2: CONTRIBUTING.md: file not found\n'}
[5.879480] (articubot_one) StdoutLine: {'line': b'2: LICENSE: file not found\n'}
[5.879625] (articubot_one) StdoutLine: {'line': b'2: articubot_one/obstacle_avoidance.py: could not find copyright notice\n'}
[5.879733] (articubot_one) StdoutLine: {'line': b'2: launch/ball_tracker.launch.py: could not find copyright notice\n'}
[5.879832] (articubot_one) StdoutLine: {'line': b'2: launch/camera.launch.py: could not find copyright notice\n'}
[5.879942] (articubot_one) StdoutLine: {'line': b'2: launch/joystick.launch.py: could not find copyright notice\n'}
[5.880078] (articubot_one) StdoutLine: {'line': b'2: launch/launch_robot.launch.py: could not find copyright notice\n'}
[5.880233] (articubot_one) StdoutLine: {'line': b'2: launch/launch_sim.launch.py: could not find copyright notice\n'}
[5.880388] (articubot_one) StdoutLine: {'line': b'2: launch/online_async_launch.py: could not find copyright notice\n'}
[5.880550] (articubot_one) StdoutLine: {'line': b'2: launch/rplidar.launch.py: could not find copyright notice\n'}
[5.880667] (articubot_one) StdoutLine: {'line': b'2: launch/rsp.launch.py: could not find copyright notice\n'}
[5.880771] (articubot_one) StdoutLine: {'line': b'2: launch/rviz_gazebo.launch.py: could not find copyright notice\n'}
[5.880870] (articubot_one) StdoutLine: {'line': b'2: test/pytest/test_laserObstacle.py: could not find copyright notice\n'}
[5.880971] (articubot_one) StdoutLine: {'line': b'2: 13 errors, checked 16 files\n'}
[5.902498] (articubot_one) StdoutLine: {'line': b'2: -- run_test.py: return code 1\n'}
[5.902750] (articubot_one) StdoutLine: {'line': b"2: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml'\n"}
[5.918736] (articubot_one) StdoutLine: {'line': b'2/6 Test #2: copyright ........................***Failed    0.48 sec\n'}
[5.919197] (articubot_one) StdoutLine: {'line': b'test 3\n'}
[5.919348] (articubot_one) StdoutLine: {'line': b'    Start 3: flake8\n'}
[5.919564] (articubot_one) StdoutLine: {'line': b'\n'}
[5.919815] (articubot_one) StdoutLine: {'line': b'3: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_flake8/flake8.txt" "--command" "/opt/ros/jazzy/bin/ament_flake8" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml"\n'}
[5.919966] (articubot_one) StdoutLine: {'line': b'3: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[5.920100] (articubot_one) StdoutLine: {'line': b'3: Test timeout computed to be: 60\n'}
[5.937985] (-) TimerEvent: {}
[5.999421] (articubot_one) StdoutLine: {'line': b"3: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[5.999694] (articubot_one) StdoutLine: {'line': b'3:  - /opt/ros/jazzy/bin/ament_flake8 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml\n'}
[6.038114] (-) TimerEvent: {}
[6.138392] (-) TimerEvent: {}
[6.238672] (-) TimerEvent: {}
[6.339584] (-) TimerEvent: {}
[6.439891] (-) TimerEvent: {}
[6.451813] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist\n'}
[6.452636] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.452843] (articubot_one) StdoutLine: {'line': b'3: import math\n'}
[6.453017] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.453196] (articubot_one) StdoutLine: {'line': b'3: import math\n'}
[6.453369] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.453544] (articubot_one) StdoutLine: {'line': b'3: # i am writing down this piece of code with paramters \n'}
[6.453736] (articubot_one) StdoutLine: {'line': b'3:                                                      ^\n'}
[6.453909] (articubot_one) StdoutLine: {'line': b'3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node \n'}
[6.454081] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.454252] (articubot_one) StdoutLine: {'line': b'3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node \n'}
[6.454423] (articubot_one) StdoutLine: {'line': b'3:                                                                                                               ^\n'}
[6.454972] (articubot_one) StdoutLine: {'line': b'3:     def __init__(self) :\n'}
[6.455188] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[6.455374] (articubot_one) StdoutLine: {'line': b'3:         super().__init__("Laser_Obstacle_Avoidance")\n'}
[6.455568] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[6.457243] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.457431] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.457781] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[6.458169] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[6.458355] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[6.458531] (articubot_one) StdoutLine: {'line': b'3:                                                    ^\n'}
[6.458747] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[6.458922] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.459464] (articubot_one) StdoutLine: {'line': b'3:         self.threshold=self.get_parameter("threshold_distance").value\n'}
[6.461288] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[6.461459] (articubot_one) StdoutLine: {'line': b'3:         self.threshold=self.get_parameter("threshold_distance").value\n'}
[6.461634] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[6.461819] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.461984] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.462144] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[6.462318] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[6.462477] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[6.462659] (articubot_one) StdoutLine: {'line': b'3:                                                  ^\n'}
[6.462821] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[6.462980] (articubot_one) StdoutLine: {'line': b'3:                                                   ^\n'}
[6.463136] (articubot_one) StdoutLine: {'line': b'3:         self.laser_topic=self.get_parameter("laser_scan_topic").value\n'}
[6.463292] (articubot_one) StdoutLine: {'line': b'3:                         ^\n'}
[6.463447] (articubot_one) StdoutLine: {'line': b'3:         self.laser_topic=self.get_parameter("laser_scan_topic").value\n'}
[6.468370] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[6.468958] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.469188] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.469385] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[6.469608] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[6.496070] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[6.498165] (articubot_one) StdoutLine: {'line': b'3:                                               ^\n'}
[6.498454] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[6.498684] (articubot_one) StdoutLine: {'line': b'3:                                                ^\n'}
[6.498857] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value\n'}
[6.499071] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[6.499266] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value\n'}
[6.499459] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[6.499676] (articubot_one) StdoutLine: {'line': b"3:         self.frontal_detection_angle_rad = math.radians(self.get_parameter('frontal_detection_angle_deg').value)\n"}
[6.499877] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.500091] (articubot_one) StdoutLine: {'line': b'3:         #create a publisher to the /cmd_vel\n'}
[6.500291] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[6.500533] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_vel_pub = self.create_publisher(Twist,self.cmd_topic, 10)\n'}
[6.500798] (articubot_one) StdoutLine: {'line': b'3:                                                       ^\n'}
[6.501016] (articubot_one) StdoutLine: {'line': b'3:     def laser_callback(self,msg):\n'}
[6.501233] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.501448] (articubot_one) StdoutLine: {'line': b'3:     def laser_callback(self,msg):\n'}
[6.501679] (articubot_one) StdoutLine: {'line': b'3:                            ^\n'}
[6.501952] (articubot_one) StdoutLine: {'line': b'3:   \n'}
[6.502209] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.502481] (articubot_one) StdoutLine: {'line': b'3:         if not(scan_size) :\n'}
[6.502751] (articubot_one) StdoutLine: {'line': b'3:               ^\n'}
[6.502976] (articubot_one) StdoutLine: {'line': b'3:         if not(scan_size) :\n'}
[6.503211] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[6.503433] (articubot_one) StdoutLine: {'line': b'3:             #no laser data \n'}
[6.503650] (articubot_one) StdoutLine: {'line': b'3:             ^\n'}
[6.503807] (articubot_one) StdoutLine: {'line': b'3:             #no laser data \n'}
[6.504015] (articubot_one) StdoutLine: {'line': b'3:                           ^\n'}
[6.504215] (articubot_one) StdoutLine: {'line': b'3:             return \n'}
[6.504419] (articubot_one) StdoutLine: {'line': b'3:                   ^\n'}
[6.504616] (articubot_one) StdoutLine: {'line': b'3:         # the lidar provides angles,angle step (common difference of the angle sequence), distances in meter\n'}
[6.504774] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.504918] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.505120] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.505321] (articubot_one) StdoutLine: {'line': b'3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance\n'}
[6.505527] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[6.505748] (articubot_one) StdoutLine: {'line': b'3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance\n'}
[6.505955] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.506161] (articubot_one) StdoutLine: {'line': b"3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance\n"}
[6.506382] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[6.506607] (articubot_one) StdoutLine: {'line': b"3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance\n"}
[6.506793] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.506947] (articubot_one) StdoutLine: {'line': b'3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle \n'}
[6.507097] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.507379] (articubot_one) StdoutLine: {'line': b'3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle \n'}
[6.507675] (articubot_one) StdoutLine: {'line': b'3:                                                                                                                      ^\n'}
[6.507893] (articubot_one) StdoutLine: {'line': b'3:         # we are sweeping across all the angles with the increment \n'}
[6.508132] (articubot_one) StdoutLine: {'line': b'3:                                                                   ^\n'}
[6.508350] (articubot_one) StdoutLine: {'line': b'3:         # while sweeping we compare  only the ranges with the ones in the defined angle \n'}
[6.508637] (articubot_one) StdoutLine: {'line': b'3:                                                                                        ^\n'}
[6.508866] (articubot_one) StdoutLine: {'line': b'3:                  # If the range reading is valid (not inf or nan)\n'}
[6.509100] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.509295] (articubot_one) StdoutLine: {'line': b'3:                  # If the range reading is valid (not inf or nan)\n'}
[6.509485] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.509733] (articubot_one) StdoutLine: {'line': b'3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):\n'}
[6.509937] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.510157] (articubot_one) StdoutLine: {'line': b'3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):\n'}
[6.510374] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.510595] (articubot_one) StdoutLine: {'line': b'3:             \n'}
[6.510760] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.510913] (articubot_one) StdoutLine: {'line': b'3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])\n'}
[6.511148] (articubot_one) StdoutLine: {'line': b'3:                      ^\n'}
[6.511402] (articubot_one) StdoutLine: {'line': b'3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])\n'}
[6.511627] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.511795] (articubot_one) StdoutLine: {'line': b'3:         #  To stop the robot from moving ahead when ever it meets an obstacle, it will just go back \n'}
[6.511961] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.512173] (articubot_one) StdoutLine: {'line': b'3:         if obstacle_detected :\n'}
[6.512373] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.512626] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')\n"}
[6.512795] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.512976] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')\n"}
[6.513242] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.513457] (articubot_one) StdoutLine: {'line': b'3:            twist.linear.x = 0.0\n'}
[6.513681] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.513924] (articubot_one) StdoutLine: {'line': b'3:            twist.angular.z =0.0\n'}
[6.514123] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.514377] (articubot_one) StdoutLine: {'line': b'3:            twist.angular.z =0.0\n'}
[6.514610] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.514884] (articubot_one) StdoutLine: {'line': b'3:            self.cmd_vel_pub.publish(twist)\n'}
[6.515085] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.515291] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[6.515479] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.515689] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[6.515917] (articubot_one) StdoutLine: {'line': b'3:                                   ^\n'}
[6.516122] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[6.516324] (articubot_one) StdoutLine: {'line': b'3:                                                           ^\n'}
[6.516524] (articubot_one) StdoutLine: {'line': b'3: def main(args=None):\n'}
[6.516755] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.517013] (articubot_one) StdoutLine: {'line': b'3:         rclpy.spin(node) # Keep the node running and process callbacks\n'}
[6.517250] (articubot_one) StdoutLine: {'line': b'3:                         ^\n'}
[6.517455] (articubot_one) StdoutLine: {'line': b"3:         node.get_logger().info('Smart Obstacle Avoider Node stopped cleanly via KeyboardInterrupt.')\n"}
[6.517699] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.517968] (articubot_one) StdoutLine: {'line': b"3: if __name__ == '__main__':\n"}
[6.518118] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.518262] (articubot_one) StdoutLine: {'line': b'3:     main()    \n'}
[6.518405] (articubot_one) StdoutLine: {'line': b'3:           ^\n'}
[6.518630] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.518845] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.519058] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[6.519251] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.519445] (articubot_one) StdoutLine: {'line': b"3:     my_package_name='articubot_one'\n"}
[6.519632] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.519812] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[6.519950] (articubot_one) StdoutLine: {'line': b'3:                                                                                   ^\n'}
[6.520069] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[6.520192] (articubot_one) StdoutLine: {'line': b'3:                                                                                            ^\n'}
[6.520375] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[6.520567] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.520758] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[6.520895] (articubot_one) StdoutLine: {'line': b'3:                                                                                     ^\n'}
[6.521013] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[6.521130] (articubot_one) StdoutLine: {'line': b'3:                                                                                              ^\n'}
[6.521247] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[6.521370] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.521561] (articubot_one) StdoutLine: {'line': b'3:     params_path = PythonExpression([\'"\',tracker_params_sim, \'" if "true" == "\', sim_mode, \'" else "\', tracker_params_robot, \'"\'])\n'}
[6.521756] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.521932] (articubot_one) StdoutLine: {'line': b'3:     params_path = PythonExpression([\'"\',tracker_params_sim, \'" if "true" == "\', sim_mode, \'" else "\', tracker_params_robot, \'"\'])\n'}
[6.522053] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.522172] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory('ball_tracker'), 'launch', 'ball_tracker.launch.py')]),\n"}
[6.522289] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.522411] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'params_file': params_path,\n"}
[6.522608] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.522792] (articubot_one) StdoutLine: {'line': b"3:                                     'image_topic': '/camera/image_raw',\n"}
[6.522978] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.523162] (articubot_one) StdoutLine: {'line': b"3:                                     'cmd_vel_topic': '/cmd_vel_tracker',\n"}
[6.523405] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.523660] (articubot_one) StdoutLine: {'line': b"3:                                     'enable_3d_tracker': 'true'}.items())\n"}
[6.523895] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.524125] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[6.524321] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.524509] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.524761] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.524944] (articubot_one) StdoutLine: {'line': b'3:     return LaunchDescription([\n'}
[6.525068] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.525187] (articubot_one) StdoutLine: {'line': b"3:                 'image_size': [640,480],\n"}
[6.525325] (articubot_one) StdoutLine: {'line': b'3:                                   ^\n'}
[6.525509] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.525747] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.525957] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.526152] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:5:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[6.526332] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.526516] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:6:1: I100 Import statements are in the wrong order. 'import math' should be before 'from geometry_msgs.msg import Twist' and in a different group.\n"}
[6.526759] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.527020] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:6:1: I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.\n"}
[6.527264] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.527502] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:9:54: W291 trailing whitespace\n'}
[6.527746] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.528002] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:10:100: E501 line too long (110 > 99 characters)\n'}
[6.528224] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.528419] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:10:111: W291 trailing whitespace\n'}
[6.528642] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.528778] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:14:23: E203 whitespace before ':'\n"}
[6.528932] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.529128] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:15:26: Q000 Double quotes found but single quotes preferred\n'}
[6.529325] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.529519] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:16:1: W293 blank line contains whitespace\n'}
[6.529757] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.529897] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:17:32: Q000 Double quotes found but single quotes preferred\n'}
[6.530085] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.530272] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:17:52: E231 missing whitespace after ','\n"}
[6.530458] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.530660] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:17:100: E501 line too long (102 > 99 characters)\n'}
[6.530855] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.531043] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:18:23: E225 missing whitespace around operator\n'}
[6.531209] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.531374] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:18:43: Q000 Double quotes found but single quotes preferred\n'}
[6.531561] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.531804] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:19:1: W293 blank line contains whitespace\n'}
[6.532036] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.532288] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:20:32: Q000 Double quotes found but single quotes preferred\n'}
[6.532496] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.532717] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:20:50: E231 missing whitespace after ','\n"}
[6.532907] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.533146] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:20:51: Q000 Double quotes found but single quotes preferred\n'}
[6.533410] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.533677] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:21:25: E225 missing whitespace around operator\n'}
[6.533885] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.534069] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:21:45: Q000 Double quotes found but single quotes preferred\n'}
[6.534256] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.534438] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:22:1: W293 blank line contains whitespace\n'}
[6.534649] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.534843] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:23:32: Q000 Double quotes found but single quotes preferred\n'}
[6.535029] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.535229] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:23:47: E231 missing whitespace after ','\n"}
[6.535414] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.535659] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:23:48: Q000 Double quotes found but single quotes preferred\n'}
[6.535939] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.536119] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:24:23: E225 missing whitespace around operator\n'}
[6.536271] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.536452] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:24:43: Q000 Double quotes found but single quotes preferred\n'}
[6.536644] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.536812] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:29:100: E501 line too long (112 > 99 characters)\n'}
[6.536975] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.537136] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:38:9: E265 block comment should start with '# '\n"}
[6.537298] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.537475] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:39:55: E231 missing whitespace after ','\n"}
[6.537666] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.537869] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:43:5: E303 too many blank lines (2)\n'}
[6.538045] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.538210] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:43:28: E231 missing whitespace after ','\n"}
[6.538363] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.538521] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:47:1: W293 blank line contains whitespace\n'}
[6.538750] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.539016] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:48:15: E275 missing whitespace after keyword\n'}
[6.539202] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.539384] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:48:26: E203 whitespace before ':'\n"}
[6.539588] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.539789] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:49:13: E265 block comment should start with '# '\n"}
[6.539991] (-) TimerEvent: {}
[6.540135] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.540413] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:49:27: W291 trailing whitespace\n'}
[6.540668] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.540876] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:50:19: W291 trailing whitespace\n'}
[6.541098] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.541314] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:51:100: E501 line too long (108 > 99 characters)\n'}
[6.541513] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.541746] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:56:1: W293 blank line contains whitespace\n'}
[6.541941] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.542125] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:60:9: E265 block comment should start with '# '\n"}
[6.542307] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.542493] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:60:100: E501 line too long (148 > 99 characters)\n'}
[6.542734] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.542896] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:61:9: E265 block comment should start with '# '\n"}
[6.543052] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.543206] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:61:100: E501 line too long (106 > 99 characters)\n'}
[6.543379] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.543559] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:62:100: E501 line too long (117 > 99 characters)\n'}
[6.543833] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.544067] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:62:118: W291 trailing whitespace\n'}
[6.544246] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.544430] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:64:67: W291 trailing whitespace\n'}
[6.544671] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.544857] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:65:88: W291 trailing whitespace\n'}
[6.545059] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.545259] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:75:18: E114 indentation is not a multiple of 4 (comment)\n'}
[6.545442] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.545677] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:75:18: E117 over-indented (comment)\n'}
[6.545861] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.546019] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:76:18: E111 indentation is not a multiple of 4\n'}
[6.546181] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.546343] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:76:18: E117 over-indented\n'}
[6.546498] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.546671] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:77:1: W293 blank line contains whitespace\n'}
[6.546840] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.547000] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:78:22: E111 indentation is not a multiple of 4\n'}
[6.547169] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.547332] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:78:100: E501 line too long (104 > 99 characters)\n'}
[6.547485] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.547662] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:86:100: W291 trailing whitespace\n'}
[6.547821] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.547984] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:87:29: E203 whitespace before ':'\n"}
[6.548143] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.548320] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:88:12: E111 indentation is not a multiple of 4\n'}
[6.548530] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.548767] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:88:100: E501 line too long (115 > 99 characters)\n'}
[6.548977] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.549148] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:89:12: E111 indentation is not a multiple of 4\n'}
[6.549351] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.549583] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:90:12: E111 indentation is not a multiple of 4\n'}
[6.549828] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.550027] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:90:29: E225 missing whitespace around operator\n'}
[6.550208] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.550390] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:91:12: E111 indentation is not a multiple of 4\n'}
[6.550629] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.550840] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:12: E111 indentation is not a multiple of 4\n'}
[6.551012] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.551176] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:35: F541 f-string is missing placeholders\n'}
[6.551354] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.551519] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:59: W291 trailing whitespace\n'}
[6.551719] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.551888] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:95:1: E302 expected 2 blank lines, found 1\n'}
[6.552053] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.552216] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:99:25: E261 at least two spaces before inline comment\n'}
[6.552381] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.552555] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:101:100: E501 line too long (100 > 99 characters)\n'}
[6.552834] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.553061] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:116:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[6.553286] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.553470] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:117:11: W291 trailing whitespace\n'}
[6.553690] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.553885] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:2:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.554097] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.554271] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:8:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import PythonExpression'\n"}
[6.554460] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.554706] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:13:20: E225 missing whitespace around operator\n'}
[6.554884] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.555047] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:17:83: E231 missing whitespace after ','\n"}
[6.555220] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.555392] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:17:92: E231 missing whitespace after ','\n"}
[6.555566] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.555752] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:17:100: E501 line too long (123 > 99 characters)\n'}
[6.555926] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.556100] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:18:85: E231 missing whitespace after ','\n"}
[6.556273] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.556432] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:18:94: E231 missing whitespace after ','\n"}
[6.556654] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.556875] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:18:100: E501 line too long (127 > 99 characters)\n'}
[6.557088] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.557305] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:20:40: E231 missing whitespace after ','\n"}
[6.557491] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.557707] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:20:100: E501 line too long (129 > 99 characters)\n'}
[6.557924] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.558130] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:24:100: E501 line too long (103 > 99 characters)\n'}
[6.558328] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.558535] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:25:21: E131 continuation line unaligned for hanging indent\n'}
[6.558785] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.558957] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:26:37: E128 continuation line under-indented for visual indent\n'}
[6.559129] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.559342] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:27:37: E128 continuation line under-indented for visual indent\n'}
[6.559561] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.559783] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:28:37: E128 continuation line under-indented for visual indent\n'}
[6.559994] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.560206] (articubot_one) StdoutLine: {'line': b"3: ./launch/camera.launch.py:1:1: F401 'os' imported but unused\n"}
[6.560418] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.560647] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:6:1: E302 expected 2 blank lines, found 1\n'}
[6.560886] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.561144] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:10:5: E303 too many blank lines (3)\n'}
[6.561365] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.561603] (articubot_one) StdoutLine: {'line': b"3: ./launch/camera.launch.py:18:35: E231 missing whitespace after ','\n"}
[6.561885] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.562230] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:22:5: E122 continuation line missing indentation or outdented\n'}
[6.562457] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.562710] (articubot_one) StdoutLine: {'line': b'3: from launch.substitutions import LaunchConfiguration\n'}
[6.562880] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.563040] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[6.563200] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.563367] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[6.563553] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.563681] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.563792] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.563952] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.564112] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.564271] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[6.564430] (articubot_one) StdoutLine: {'line': b'3:                                                                           ^\n'}
[6.564604] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[6.564776] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[6.564986] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[6.565237] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.565457] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel','/cmd_vel_joy')]\n"}
[6.565717] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[6.565907] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_in','/diff_cont/cmd_vel_unstamped'),\n"}
[6.566091] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[6.566422] (articubot_one) StdoutLine: {'line': b"3:                         ('/cmd_vel_out','/diff_cont/cmd_vel')]\n"}
[6.566635] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.566924] (articubot_one) StdoutLine: {'line': b'3:     return LaunchDescription([\n'}
[6.567107] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.567264] (articubot_one) StdoutLine: {'line': b'3:         twist_stamper       \n'}
[6.567440] (articubot_one) StdoutLine: {'line': b'3:                      ^\n'}
[6.567620] (articubot_one) StdoutLine: {'line': b'3:     ])      ^\n'}
[6.567825] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import RegisterEventHandler\n'}
[6.568009] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.568190] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.568367] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.568552] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.568826] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.569053] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.569268] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.569476] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.569648] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.569841] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.570031] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[6.570230] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.570426] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[6.570663] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.570858] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.571054] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.571190] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.571336] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.571500] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.571643] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.571752] (articubot_one) StdoutLine: {'line': b'3:                                                                              ^\n'}
[6.571862] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.572025] (articubot_one) StdoutLine: {'line': b'3:                                                                                       ^\n'}
[6.572187] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.572349] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.572525] (articubot_one) StdoutLine: {'line': b'3:             package="twist_mux",\n'}
[6.572710] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.572874] (articubot_one) StdoutLine: {'line': b'3:             executable="twist_mux",\n'}
[6.573036] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[6.573210] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]\n"}
[6.573425] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.573712] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.573953] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.574145] (articubot_one) StdoutLine: {'line': b"3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])\n"}
[6.574342] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.574530] (articubot_one) StdoutLine: {'line': b"3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])\n"}
[6.574778] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.574973] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[6.575159] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[6.575344] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[6.575526] (articubot_one) StdoutLine: {'line': b'3:                                                                                             ^\n'}
[6.575723] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[6.575832] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.575936] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.576037] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.576199] (articubot_one) StdoutLine: {'line': b'3:         executable="ros2_control_node",\n'}
[6.576422] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.576662] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.576888] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.577094] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.577288] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.577463] (articubot_one) StdoutLine: {'line': b'3:         arguments=["diff_cont"],\n'}
[6.577659] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.577828] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.577988] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.578171] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.578333] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.578493] (articubot_one) StdoutLine: {'line': b'3:         arguments=["joint_broad"],\n'}
[6.578707] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.578954] (articubot_one) StdoutLine: {'line': b"3:     # Code for delaying a node (I haven't tested how effective it is)\n"}
[6.579152] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.579348] (articubot_one) StdoutLine: {'line': b'3:     # \n'}
[6.579548] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[6.579694] (articubot_one) StdoutLine: {'line': b'3:     # Launch them all!\n'}
[6.579833] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.580026] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument\n'}
[6.580220] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.580413] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.580644] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.580837] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.581021] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.581196] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.581373] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.581563] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.581742] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.581900] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.582130] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[6.582370] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.582597] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[6.582799] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.583019] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.583240] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.583467] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.583712] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'\n"}
[6.583897] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.584077] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'\n"}
[6.584258] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.584476] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.584704] (articubot_one) StdoutLine: {'line': b'3:                                                                              ^\n'}
[6.584909] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.585107] (articubot_one) StdoutLine: {'line': b'3:                                                                                       ^\n'}
[6.585304] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.585502] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.585765] (articubot_one) StdoutLine: {'line': b'3:             package="twist_mux",\n'}
[6.585988] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.586209] (articubot_one) StdoutLine: {'line': b'3:             executable="twist_mux",\n'}
[6.586418] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[6.586618] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]\n"}
[6.586840] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.587037] (articubot_one) StdoutLine: {'line': b'3:     default_world = os.path.join(\n'}
[6.587232] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.587427] (articubot_one) StdoutLine: {'line': b'3:         )    \n'}
[6.587626] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[6.587841] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.588037] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.588233] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.588429] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.588634] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.588839] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.589045] (articubot_one) StdoutLine: {'line': b"3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.\n"}
[6.589244] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.589441] (articubot_one) StdoutLine: {'line': b'3:     diff_drive_spawner = Node(\n'}
[6.589638] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.589842] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.590046] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.590244] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.590464] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.590754] (articubot_one) StdoutLine: {'line': b'3:         arguments=["diff_cont"],\n'}
[6.590955] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.591136] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.591327] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.591574] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.591812] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.592033] (articubot_one) StdoutLine: {'line': b'3:         arguments=["joint_broad"],\n'}
[6.592210] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.592392] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.592590] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.592828] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.593033] (articubot_one) StdoutLine: {'line': b'3:                                                                           ^\n'}
[6.593235] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.593433] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[6.593672] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.593880] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.594080] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.594278] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.594485] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.594713] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.594918] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_image",\n'}
[6.595114] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.595309] (articubot_one) StdoutLine: {'line': b'3:         executable="image_bridge",\n'}
[6.595503] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.595667] (articubot_one) StdoutLine: {'line': b'3:         arguments=["/camera/image_raw"]\n'}
[6.595867] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.596063] (articubot_one) StdoutLine: {'line': b"3:     # Code for delaying a node (I haven't tested how effective it is)\n"}
[6.596260] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.596455] (articubot_one) StdoutLine: {'line': b'3:     # \n'}
[6.596676] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[6.596919] (articubot_one) StdoutLine: {'line': b'3:     # Launch them all!\n'}
[6.597060] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.597256] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.597460] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.597644] (articubot_one) StdoutLine: {'line': b'3:     default_params_file = os.path.join(get_package_share_directory("articubot_one"),\n'}
[6.597797] (articubot_one) StdoutLine: {'line': b'3:                                                                    ^\n'}
[6.597997] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[6.598201] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.598409] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:3:1: I100 Import statements are in the wrong order. 'from launch.substitutions import LaunchConfiguration' should be before 'from launch_ros.actions import Node'\n"}
[6.598668] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.598907] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:4:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration'\n"}
[6.599097] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.599271] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:6:1: I100 Import statements are in the wrong order. 'import os' should be before 'from launch.actions import DeclareLaunchArgument' and in a different group.\n"}
[6.599509] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.599739] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:7:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.599974] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.600156] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:9:1: E302 expected 2 blank lines, found 1\n'}
[6.600339] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.600517] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:12:75: E231 missing whitespace after ','\n"}
[6.600752] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.600969] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:12:84: E231 missing whitespace after ','\n"}
[6.601172] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.601372] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:12:100: E501 line too long (100 > 99 characters)\n'}
[6.601582] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.601740] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:25:36: E231 missing whitespace after ','\n"}
[6.601887] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.602084] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:32:39: E231 missing whitespace after ','\n"}
[6.602281] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.602490] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:33:40: E231 missing whitespace after ','\n"}
[6.602713] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.602911] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:37:5: E303 too many blank lines (2)\n'}
[6.603118] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.603336] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:44:22: W291 trailing whitespace\n'}
[6.603552] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.603774] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:45:7: W292 no newline at end of file\n'}
[6.603982] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.604120] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:10:1: I100 Import statements are in the wrong order. 'from launch.actions import RegisterEventHandler' should be before 'from launch.substitutions import Command'\n"}
[6.604336] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.604529] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:17:1: E303 too many blank lines (3)\n'}
[6.604741] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.604942] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:20:5: E303 too many blank lines (2)\n'}
[6.605134] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.605328] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:20:100: E501 line too long (110 > 99 characters)\n'}
[6.605521] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.609605] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:23:17: E225 missing whitespace around operator\n'}
[6.609904] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.610126] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:23:33: E261 at least two spaces before inline comment\n'}
[6.610318] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.610525] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:23:34: E262 inline comment should start with '# '\n"}
[6.610783] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.610989] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:27:62: E231 missing whitespace after ','\n"}
[6.611181] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.611370] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:27:71: E231 missing whitespace after ','\n"}
[6.611560] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.611684] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:38:5: E303 too many blank lines (2)\n'}
[6.611804] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.611910] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:38:78: E231 missing whitespace after ','\n"}
[6.612013] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.612115] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:38:87: E231 missing whitespace after ','\n"}
[6.612218] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.612319] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:38:100: E501 line too long (104 > 99 characters)\n'}
[6.612423] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.612525] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:40:21: Q000 Double quotes found but single quotes preferred\n'}
[6.612661] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.612767] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:41:24: Q000 Double quotes found but single quotes preferred\n'}
[6.612872] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.612974] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:43:40: E231 missing whitespace after ','\n"}
[6.613076] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.613177] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:46:1: W293 blank line contains whitespace\n'}
[6.613279] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.613378] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:49:5: E303 too many blank lines (4)\n'}
[6.613480] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.613605] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:49:100: E501 line too long (104 > 99 characters)\n'}
[6.613714] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.613817] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:51:84: E231 missing whitespace after ','\n"}
[6.613920] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.614022] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:51:93: E231 missing whitespace after ','\n"}
[6.614123] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.614224] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:51:100: E501 line too long (115 > 99 characters)\n'}
[6.614354] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.614547] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:54:17: Q000 Double quotes found but single quotes preferred\n'}
[6.614686] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.614815] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:55:20: Q000 Double quotes found but single quotes preferred\n'}
[6.614983] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.615169] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:63:17: Q000 Double quotes found but single quotes preferred\n'}
[6.615373] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.615627] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:64:20: Q000 Double quotes found but single quotes preferred\n'}
[6.615845] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.616043] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:65:20: Q000 Double quotes found but single quotes preferred\n'}
[6.616351] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.616567] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:76:17: Q000 Double quotes found but single quotes preferred\n'}
[6.616824] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.617009] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:77:20: Q000 Double quotes found but single quotes preferred\n'}
[6.617187] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.617362] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:78:20: Q000 Double quotes found but single quotes preferred\n'}
[6.617551] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.617762] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:89:5: E303 too many blank lines (2)\n'}
[6.617981] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.618182] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:90:6: W291 trailing whitespace\n'}
[6.618380] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.618590] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:107:5: E303 too many blank lines (3)\n'}
[6.618749] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.618895] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[6.619041] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.619185] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:15:1: E303 too many blank lines (3)\n'}
[6.619329] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.619531] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:18:5: E303 too many blank lines (2)\n'}
[6.619754] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.619947] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:18:100: E501 line too long (110 > 99 characters)\n'}
[6.620123] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.620297] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:21:17: E225 missing whitespace around operator\n'}
[6.620472] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.620687] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:21:33: E261 at least two spaces before inline comment\n'}
[6.620918] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.621093] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:21:34: E262 inline comment should start with '# '\n"}
[6.621267] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.621440] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:25:62: E231 missing whitespace after ','\n"}
[6.621609] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.621723] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:25:71: E231 missing whitespace after ','\n"}
[6.621828] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.621931] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:31:62: E231 missing whitespace after ','\n"}
[6.622035] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.622138] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:31:71: E231 missing whitespace after ','\n"}
[6.622240] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.622353] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:35:78: E231 missing whitespace after ','\n"}
[6.622454] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.622580] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:35:87: E231 missing whitespace after ','\n"}
[6.622772] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.622956] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:35:100: E501 line too long (104 > 99 characters)\n'}
[6.623159] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.623393] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:37:21: Q000 Double quotes found but single quotes preferred\n'}
[6.623650] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.623922] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:38:24: Q000 Double quotes found but single quotes preferred\n'}
[6.624146] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.624333] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:40:40: E231 missing whitespace after ','\n"}
[6.624574] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.624719] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:44:5: E303 too many blank lines (2)\n'}
[6.624827] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.624932] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:48:10: W291 trailing whitespace\n'}
[6.625036] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.625139] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:49:1: W293 blank line contains whitespace\n'}
[6.625243] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.625344] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:62:21: E131 continuation line unaligned for hanging indent\n'}
[6.625448] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.625566] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:62:100: E501 line too long (104 > 99 characters)\n'}
[6.625683] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.625782] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:65:100: E501 line too long (126 > 99 characters)\n'}
[6.625881] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.625980] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:73:5: E303 too many blank lines (2)\n'}
[6.626139] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.626372] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:74:17: Q000 Double quotes found but single quotes preferred\n'}
[6.626639] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.626895] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:75:20: Q000 Double quotes found but single quotes preferred\n'}
[6.627139] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.627350] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:76:20: Q000 Double quotes found but single quotes preferred\n'}
[6.627564] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.627811] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:80:17: Q000 Double quotes found but single quotes preferred\n'}
[6.628013] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.628224] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:81:20: Q000 Double quotes found but single quotes preferred\n'}
[6.628408] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.628610] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:82:20: Q000 Double quotes found but single quotes preferred\n'}
[6.628758] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.628895] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:86:5: E303 too many blank lines (2)\n'}
[6.629092] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.629284] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:86:75: E231 missing whitespace after ','\n"}
[6.629478] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.629701] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:86:84: E231 missing whitespace after ','\n"}
[6.629898] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.630087] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:86:100: E501 line too long (101 > 99 characters)\n'}
[6.630281] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.630475] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:88:17: Q000 Double quotes found but single quotes preferred\n'}
[6.630687] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.630884] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:89:20: Q000 Double quotes found but single quotes preferred\n'}
[6.631072] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.631250] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:98:17: Q000 Double quotes found but single quotes preferred\n'}
[6.631429] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.631663] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:99:20: Q000 Double quotes found but single quotes preferred\n'}
[6.631903] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.632120] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:100:20: Q000 Double quotes found but single quotes preferred\n'}
[6.632340] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.632526] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:105:5: E303 too many blank lines (3)\n'}
[6.632846] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.633062] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:106:6: W291 trailing whitespace\n'}
[6.633289] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.633519] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:123:5: E303 too many blank lines (3)\n'}
[6.633733] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.633915] (articubot_one) StdoutLine: {'line': b"3: ./launch/online_async_launch.py:8:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'from launch_ros.actions import Node'\n"}
[6.634099] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.634277] (articubot_one) StdoutLine: {'line': b'3: ./launch/online_async_launch.py:15:68: Q000 Double quotes found but single quotes preferred\n'}
[6.634499] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.634727] (articubot_one) StdoutLine: {'line': b"3: ./launch/rplidar.launch.py:1:1: F401 'os' imported but unused\n"}
[6.634881] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.635081] (articubot_one) StdoutLine: {'line': b"3: ./launch/rplidar.launch.py:2:1: I201 Missing newline between import groups. 'from launch import LaunchDescription' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.635229] (articubot_one) StdoutLine: {'line': b'3: from launch import LaunchDescription\n'}
[6.635374] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.635588] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.635748] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.635893] (articubot_one) StdoutLine: {'line': b"3:                 'serial_port': '/dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.3:1.0-port0',\n"}
[6.636107] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.636305] (articubot_one) StdoutLine: {'line': b'3: from launch.substitutions import LaunchConfiguration, Command\n'}
[6.636524] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.636781] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[6.636996] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.637191] (articubot_one) StdoutLine: {'line': b'3: import xacro\n'}
[6.637385] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.637603] (articubot_one) StdoutLine: {'line': b"3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')\n"}
[6.637774] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[6.638009] (articubot_one) StdoutLine: {'line': b"3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')\n"}
[6.638212] (articubot_one) StdoutLine: {'line': b'3:                                                     ^\n'}
[6.638412] (articubot_one) StdoutLine: {'line': b"3:     robot_description_config = Command(['xacro ', xacro_file, ' use_ros2_control:=', use_ros2_control, ' sim_mode:=', use_sim_time])\n"}
[6.638629] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.638841] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.639039] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.639239] (articubot_one) StdoutLine: {'line': b'3:     # Launch!\n'}
[6.639458] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.639688] (articubot_one) StdoutLine: {'line': b'3: import xacro\n'}
[6.639880] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.640094] (-) TimerEvent: {}
[6.640231] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.640523] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.640816] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument\n'}
[6.641016] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.641220] (articubot_one) StdoutLine: {'line': b'3: from launch.conditions import IfCondition, UnlessCondition\n'}
[6.641480] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.641726] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.641970] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.642154] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.642337] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.642521] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.642759] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.642965] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.643217] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[6.643462] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.643734] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[6.643975] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.644186] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.644374] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.644602] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.644831] (articubot_one) StdoutLine: {'line': b'3:         )    \n'}
[6.645028] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[6.645269] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.645478] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.645710] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.645963] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.646157] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.646353] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.646569] (articubot_one) StdoutLine: {'line': b"3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.\n"}
[6.646715] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.646854] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.647049] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.647246] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[6.647441] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.647650] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.647834] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[6.648020] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[6.648209] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[6.648457] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[6.648711] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[6.648940] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.649125] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.649300] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.649570] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.649804] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.650042] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[6.650250] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.650424] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.650627] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[6.650821] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[6.651041] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[6.651248] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[6.651447] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[6.651685] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.651924] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.652072] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.652271] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.652417] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.652630] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[6.652848] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.653054] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.653252] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[6.653450] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[6.653640] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[6.653791] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[6.653988] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[6.654131] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.654328] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.654522] (articubot_one) StdoutLine: {'line': b'3:        \n'}
[6.654684] (articubot_one) StdoutLine: {'line': b'3:                                                                                            ^\n'}
[6.654911] (articubot_one) StdoutLine: {'line': b"3:     package='ros_gz_bridge',\n"}
[6.655057] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.655253] (articubot_one) StdoutLine: {'line': b"3:     executable='parameter_bridge',\n"}
[6.655397] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.655613] (articubot_one) StdoutLine: {'line': b'3:     arguments=[\n'}
[6.655767] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.655963] (articubot_one) StdoutLine: {'line': b"3:           '/odom@nav_msgs/msg/Odometry@gz.msgs.Odometry',\n"}
[6.656161] (articubot_one) StdoutLine: {'line': b'3:           ^\n'}
[6.656358] (articubot_one) StdoutLine: {'line': b"3:          '/scan@sensor_msgs/msg/LaserScan@gz.msgs.LaserScan',\n"}
[6.656564] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[6.656735] (articubot_one) StdoutLine: {'line': b"3:     output='screen'\n"}
[6.656879] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.657084] (articubot_one) StdoutLine: {'line': b'3: )\n'}
[6.657306] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.657494] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_image",\n'}
[6.657707] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.657995] (articubot_one) StdoutLine: {'line': b'3:         executable="image_bridge",\n'}
[6.658194] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.658416] (articubot_one) StdoutLine: {'line': b'3:         arguments=["/camera/image_raw"]\n'}
[6.658629] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.658826] (articubot_one) StdoutLine: {'line': b'3:     #Adding rviz plugin\n'}
[6.659017] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.659209] (articubot_one) StdoutLine: {'line': b"3:     share_dir=get_package_share_directory('articubot_one')\n"}
[6.659461] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.659732] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.659984] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.660219] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.660431] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.660644] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.660861] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.661061] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.661255] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.661460] (articubot_one) StdoutLine: {'line': b'3: import time \n'}
[6.661709] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.661955] (articubot_one) StdoutLine: {'line': b'3: import time \n'}
[6.662149] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.662342] (articubot_one) StdoutLine: {'line': b'3: import time \n'}
[6.662534] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.662747] (articubot_one) StdoutLine: {'line': b'3: from rclpy.executors import SingleThreadedExecutor\n'}
[6.662941] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.663133] (articubot_one) StdoutLine: {'line': b'3: from sensor_msgs.msg import LaserScan\n'}
[6.663326] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.663517] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[6.663668] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.663867] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[6.664058] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.664251] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[6.664438] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[6.664638] (articubot_one) StdoutLine: {'line': b'3: from articubot_one.obstacle_avoidance import Obstacle \n'}
[6.664830] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.665058] (articubot_one) StdoutLine: {'line': b'3: from articubot_one.obstacle_avoidance import Obstacle \n'}
[6.665324] (articubot_one) StdoutLine: {'line': b'3:                                                      ^\n'}
[6.665590] (articubot_one) StdoutLine: {'line': b"3: @pytest.fixture(scope='module')\n"}
[6.665816] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.666152] (articubot_one) StdoutLine: {'line': b'3: @pytest.fixture\n'}
[6.666384] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.666646] (articubot_one) StdoutLine: {'line': b'3:              executor.spin_once(0.1) # Spin briefly to process events\n'}
[6.666919] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.667099] (articubot_one) StdoutLine: {'line': b'3:              executor.spin_once(0.1) # Spin briefly to process events\n'}
[6.667283] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.667524] (articubot_one) StdoutLine: {'line': b'3:              executor.spin_once(0.1) # Spin briefly to process events\n'}
[6.667708] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.667860] (articubot_one) StdoutLine: {'line': b'3:         yield node, executor # Yield the node and executor\n'}
[6.668008] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.668152] (articubot_one) StdoutLine: {'line': b'3:              executor.shutdown()\n'}
[6.668296] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.668440] (articubot_one) StdoutLine: {'line': b'3:              executor.shutdown()\n'}
[6.668678] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.668886] (articubot_one) StdoutLine: {'line': b'3:     assert node.get_name() == "Laser_Obstacle_Avoidance"\n'}
[6.669089] (articubot_one) StdoutLine: {'line': b'3:                               ^\n'}
[6.669253] (articubot_one) StdoutLine: {'line': b"3:     assert node.laser_sub.topic_name == '/scan' # Often includes the leading slash in ROS 2\n"}
[6.669385] (articubot_one) StdoutLine: {'line': b'3:                                                ^\n'}
[6.669590] (articubot_one) StdoutLine: {'line': b"3:     assert node.cmd_vel_pub.topic_name == '/cmd_vel' # Often includes the leading slash\n"}
[6.669789] (articubot_one) StdoutLine: {'line': b'3:                                                     ^\n'}
[6.669932] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold, float), f"expect the threshold to be a float"\n'}
[6.670056] (articubot_one) StdoutLine: {'line': b'3:                                              ^\n'}
[6.670180] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold, float), f"expect the threshold to be a float"\n'}
[6.670364] (articubot_one) StdoutLine: {'line': b'3:                                              ^\n'}
[6.670556] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic, str), f"expect the scan topic to be a string"\n'}
[6.670698] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[6.670821] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic, str), f"expect the scan topic to be a string"\n'}
[6.670940] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[6.671060] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"\n'}
[6.671179] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[6.671303] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"\n'}
[6.671487] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[6.671691] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle, float), f'expect the angle of sector to be a float'\n"}
[6.671825] (articubot_one) StdoutLine: {'line': b'3:                                                       ^\n'}
[6.672003] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic == "scan"\n'}
[6.672128] (articubot_one) StdoutLine: {'line': b'3:                              ^\n'}
[6.672262] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.672387] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.672611] (articubot_one) StdoutLine: {'line': b'3:         pytest.fail(f"Parameter not declared: {e}")\n'}
[6.672869] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.673059] (articubot_one) StdoutLine: {'line': b'3:         pytest.fail(f"Error getting parameter: {e}")\n'}
[6.673210] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.673417] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.673673] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.673924] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.674112] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.674299] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.674528] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.674757] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.674987] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.675184] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.675363] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.675580] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.675809] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.675997] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.676174] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.676349] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.676525] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.676757] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.676911] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.677113] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.677311] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.677516] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.677684] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.677815] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.678003] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.678201] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.678383] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.678579] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.678816] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.679024] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.679223] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.679421] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.679617] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.679765] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.679907] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.680104] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.680302] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.680497] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.680670] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.680885] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.681032] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.681184] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.681329] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.681526] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.681751] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.681952] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.682186] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.682406] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.682620] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.682818] (articubot_one) StdoutLine: {'line': b"3: '''    ^\n"}
[6.683052] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.683244] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.683473] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.683709] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.683891] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.684069] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.684249] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.684430] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.684675] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.684886] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.685088] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.685289] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.685487] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.685727] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.685983] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.686183] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.686402] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.686645] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.686851] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.687047] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.687243] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.687544] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.687755] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.687901] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.688083] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.688265] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.688448] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.688650] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.688838] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.689020] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.689211] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.689396] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.689595] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.689791] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.690013] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.690261] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.690495] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.690765] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.690957] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.691161] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.691392] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.691597] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.691735] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.691858] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.691975] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.692095] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.692270] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.692397] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.692594] (articubot_one) StdoutLine: {'line': b"3: '''    ^\n"}
[6.692791] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.693022] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.693267] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.693511] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.693786] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.694018] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.694228] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.694412] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.694642] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.694901] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.695085] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.695261] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.695436] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.695616] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.695732] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.695837] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.695941] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.696046] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.696148] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.696250] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.696354] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.696455] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.696569] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.696684] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.696787] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.696889] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.696991] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.697094] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.697197] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.697300] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.697403] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.697517] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.697719] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.697908] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.698091] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.698317] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.698564] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.698842] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.699099] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.699294] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.699488] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.699895] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.700154] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.700369] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.700619] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.700874] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.701086] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.701278] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.701461] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.701648] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.701830] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.701999] (articubot_one) StdoutLine: {'line': b'3:          \n'}
[6.702187] (articubot_one) StdoutLine: {'line': b'3:                   ^\n'}
[6.702357] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.702514] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.703145] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.703391] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.703623] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.703793] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.703922] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.704105] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.704287] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.704469] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.704668] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.704800] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.704907] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.705062] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.705217] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.705371] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.705526] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.705653] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.705757] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.705862] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.706022] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.706193] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.706364] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.706549] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.706770] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.706995] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.707209] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.707403] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.707655] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.707929] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.708256] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.708487] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.708696] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.708881] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.709067] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.709284] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.709491] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.709672] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.709822] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.710023] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.710221] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.710421] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.710690] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.710957] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.711110] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.711229] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.711370] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.711587] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.711782] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.711905] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.712027] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.712209] (articubot_one) StdoutLine: {'line': b'3:       ^\n'}
[6.712389] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.712579] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.712713] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.712830] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.712946] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.713060] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.713174] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.713295] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.713478] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.713681] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.713860] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.713982] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.714099] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.714230] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.714357] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.714567] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.714777] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.714978] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.715123] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.715349] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.715595] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.715807] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.716041] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.716310] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.716524] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.716791] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.716985] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.717140] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.717295] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.717450] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.717636] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.717817] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.717988] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.718158] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.718328] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.718498] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.718767] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.719016] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.719227] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.719419] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.719614] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.719826] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.720021] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.720197] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.720371] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.720556] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.720718] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.720809] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.720897] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.720986] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.721075] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.721164] (articubot_one) StdoutLine: {'line': b'3:          \n'}
[6.721252] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[6.721339] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.721427] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.721516] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.721625] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.721718] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.721806] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.721901] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.721988] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.722076] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.722164] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.722252] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.722340] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.722428] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.722514] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.722677] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.722834] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.722990] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.723156] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.723377] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.723645] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.723915] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.724119] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.724309] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.724517] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.724783] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.724917] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.725038] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.725163] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.725345] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.725526] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.725722] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.725881] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.726039] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.726197] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.726353] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.726515] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.726675] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.726803] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.726973] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.727144] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.727314] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.727489] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.727706] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.727966] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.728175] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.728357] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.728548] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.728750] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.728943] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.729125] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.729306] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.729488] (articubot_one) StdoutLine: {'line': b'3:          \n'}
[6.729670] (articubot_one) StdoutLine: {'line': b'3:        ^\n'}
[6.729782] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.729871] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.729961] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.730049] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.730137] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.730225] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.730313] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.730401] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.730491] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.730598] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.730692] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.730780] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.730868] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.730968] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.731112] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.731265] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.731420] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.731653] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.731922] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.732174] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.732380] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.732595] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.732846] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.733065] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.733221] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.733416] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.733659] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.733852] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.734008] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.734175] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.734367] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.734594] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.734816] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.735026] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.735223] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.735406] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.735598] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.735812] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.736084] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.736264] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.736468] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.736651] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.736796] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.736980] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.737164] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.737344] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.737526] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.737715] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.737825] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.737981] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.738137] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.738292] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.738447] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.738605] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.738719] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.738875] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.739030] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.739186] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.739348] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.739506] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.739650] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.739767] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.739912] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.740104] (-) TimerEvent: {}
[6.740258] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.740494] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.740735] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.740945] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.741274] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.741482] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.741789] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.741989] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.742146] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.742301] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.742452] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.742659] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.742832] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.742984] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.743134] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.743285] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.743434] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.743631] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.743906] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.744119] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.744316] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.744509] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.744668] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.744834] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.744960] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.745143] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.745324] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.745506] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.745704] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.745829] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.745946] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.746068] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.746243] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.746370] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.746565] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.746759] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.746939] (articubot_one) StdoutLine: {'line': b"3: '''       ^\n"}
[6.747120] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.747290] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.747415] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.747604] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.747795] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.747980] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.748168] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.748403] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.748680] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.748967] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.749175] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.749378] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.749696] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.749932] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.750167] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.750353] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.750554] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.750758] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.750971] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.751177] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.751379] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.751596] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.751756] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.751902] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.752101] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.752300] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.752498] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.752753] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.752983] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.753196] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.753396] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.753614] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.753769] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.753915] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.754114] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.754313] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.754510] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.754718] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.754870] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.754994] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.755117] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.755240] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.755410] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.755591] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.755766] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.755890] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.756014] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.756149] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.756271] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.756394] (articubot_one) StdoutLine: {'line': b'3:    ^\n'}
[6.756591] (articubot_one) StdoutLine: {'line': b'3: 9     E111 indentation is not a multiple of 4\n'}
[6.756794] (articubot_one) StdoutLine: {'line': b'3: 1     E114 indentation is not a multiple of 4 (comment)\n'}
[6.757015] (articubot_one) StdoutLine: {'line': b'3: 4     E117 over-indented (comment)\n'}
[6.757248] (articubot_one) StdoutLine: {'line': b'3: 6     E122 continuation line missing indentation or outdented\n'}
[6.757450] (articubot_one) StdoutLine: {'line': b'3: 3     E128 continuation line under-indented for visual indent\n'}
[6.757667] (articubot_one) StdoutLine: {'line': b'3: 5     E131 continuation line unaligned for hanging indent\n'}
[6.757995] (articubot_one) StdoutLine: {'line': b"3: 3     E203 whitespace before ':'\n"}
[6.758194] (articubot_one) StdoutLine: {'line': b'3: 9     E225 missing whitespace around operator\n'}
[6.758428] (articubot_one) StdoutLine: {'line': b"3: 36    E231 missing whitespace after ','\n"}
[6.758692] (articubot_one) StdoutLine: {'line': b'3: 8     E261 at least two spaces before inline comment\n'}
[6.758862] (articubot_one) StdoutLine: {'line': b"3: 3     E262 inline comment should start with '# '\n"}
[6.759020] (articubot_one) StdoutLine: {'line': b"3: 5     E265 block comment should start with '# '\n"}
[6.759175] (articubot_one) StdoutLine: {'line': b'3: 1     E275 missing whitespace after keyword\n'}
[6.759366] (articubot_one) StdoutLine: {'line': b'3: 6     E302 expected 2 blank lines, found 1\n'}
[6.759549] (articubot_one) StdoutLine: {'line': b'3: 20    E303 too many blank lines (2)\n'}
[6.759685] (articubot_one) StdoutLine: {'line': b'3: 1     E305 expected 2 blank lines after class or function definition, found 1\n'}
[6.759858] (articubot_one) StdoutLine: {'line': b'3: 30    E501 line too long (110 > 99 characters)\n'}
[6.760028] (articubot_one) StdoutLine: {'line': b"3: 5     F401 'os' imported but unused\n"}
[6.760210] (articubot_one) StdoutLine: {'line': b'3: 5     F541 f-string is missing placeholders\n'}
[6.760379] (articubot_one) StdoutLine: {'line': b"3: 14    I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[6.760560] (articubot_one) StdoutLine: {'line': b'3: 3     I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[6.760700] (articubot_one) StdoutLine: {'line': b"3: 7     I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.\n"}
[6.760868] (articubot_one) StdoutLine: {'line': b'3: 44    Q000 Double quotes found but single quotes preferred\n'}
[6.761037] (articubot_one) StdoutLine: {'line': b'3: 2     Q001 Single quote multiline found but double quotes preferred\n'}
[6.761208] (articubot_one) StdoutLine: {'line': b'3: 24    W291 trailing whitespace\n'}
[6.761386] (articubot_one) StdoutLine: {'line': b'3: 2     W292 no newline at end of file\n'}
[6.761576] (articubot_one) StdoutLine: {'line': b'3: 14    W293 blank line contains whitespace\n'}
[6.761757] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.761925] (articubot_one) StdoutLine: {'line': b'3: ./launch/rplidar.launch.py:5:1: E302 expected 2 blank lines, found 1\n'}
[6.762103] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.762270] (articubot_one) StdoutLine: {'line': b'3: ./launch/rplidar.launch.py:14:100: E501 line too long (113 > 99 characters)\n'}
[6.762439] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.762645] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:6:1: I101 Imported names are in the wrong order. Should be Command, LaunchConfiguration\n'}
[6.762909] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.763074] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:7:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration, Command'\n"}
[6.763228] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.763430] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:10:1: F401 'xacro' imported but unused\n"}
[6.763655] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.763863] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:21:39: E231 missing whitespace after ','\n"}
[6.764065] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.764266] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:21:53: E231 missing whitespace after ','\n"}
[6.764471] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.764685] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:23:100: E501 line too long (132 > 99 characters)\n'}
[6.764828] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.764951] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:24:1: W293 blank line contains whitespace\n'}
[6.765195] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.765444] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:35:5: E303 too many blank lines (2)\n'}
[6.765719] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.765922] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:2:1: I201 Missing newline between import groups. 'import xacro' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.766113] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.766439] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:3:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'import xacro'\n"}
[6.766685] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.766958] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[6.767131] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.767298] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:12:1: I100 Import statements are in the wrong order. 'from launch.conditions import IfCondition, UnlessCondition' should be before 'from launch_ros.actions import Node'\n"}
[6.767459] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.767634] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:18:5: E303 too many blank lines (2)\n'}
[6.767831] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.768009] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:18:100: E501 line too long (110 > 99 characters)\n'}
[6.768181] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.768353] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:21:17: E225 missing whitespace around operator\n'}
[6.768523] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.768783] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:21:33: E261 at least two spaces before inline comment\n'}
[6.769040] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.769248] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:21:34: E262 inline comment should start with '# '\n"}
[6.769471] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.769704] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:25:62: E231 missing whitespace after ','\n"}
[6.769916] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.770120] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:25:71: E231 missing whitespace after ','\n"}
[6.770324] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.770526] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:33:10: W291 trailing whitespace\n'}
[6.770733] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.770904] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:34:1: W293 blank line contains whitespace\n'}
[6.771074] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.771243] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:47:21: E131 continuation line unaligned for hanging indent\n'}
[6.771426] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.771605] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:47:100: E501 line too long (104 > 99 characters)\n'}
[6.771763] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.771887] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:50:100: E501 line too long (126 > 99 characters)\n'}
[6.772058] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.772182] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:58:5: Q001 Single quote multiline found but double quotes preferred\n'}
[6.772352] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.772520] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:58:5: E303 too many blank lines (2)\n'}
[6.772663] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.772789] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:59:100: E501 line too long (101 > 99 characters)\n'}
[6.772914] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.773036] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:72:5: E122 continuation line missing indentation or outdented\n'}
[6.773161] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.773352] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:73:5: E122 continuation line missing indentation or outdented\n'}
[6.773570] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.773808] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:74:5: E122 continuation line missing indentation or outdented\n'}
[6.774038] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.774225] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:77:11: E131 continuation line unaligned for hanging indent\n'}
[6.774410] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.774750] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:78:10: E131 continuation line unaligned for hanging indent\n'}
[6.774996] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.775234] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:81:5: E122 continuation line missing indentation or outdented\n'}
[6.775427] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.775655] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:82:1: E122 continuation line missing indentation or outdented\n'}
[6.775848] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.776002] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:85:17: Q000 Double quotes found but single quotes preferred\n'}
[6.776216] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.776352] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:86:20: Q000 Double quotes found but single quotes preferred\n'}
[6.776527] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.776719] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:87:20: Q000 Double quotes found but single quotes preferred\n'}
[6.776846] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.776969] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:89:5: E265 block comment should start with '# '\n"}
[6.777095] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.777265] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:90:14: E225 missing whitespace around operator\n'}
[6.777435] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.777621] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:96:1: W293 blank line contains whitespace\n'}
[6.777759] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.777863] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:136:1: W293 blank line contains whitespace\n'}
[6.777998] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.778110] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:140:1: W293 blank line contains whitespace\n'}
[6.778233] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.778390] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:144:1: W293 blank line contains whitespace\n'}
[6.778560] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.778678] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:5:1: I100 Import statements are in the wrong order. 'import time' should be before 'import rclpy' and in a different group.\n"}
[6.778784] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.778885] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:5:1: I201 Missing newline between import groups. 'import time' is identified as Stdlib and 'import rclpy' is identified as Third Party.\n"}
[6.778989] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.779090] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:5:12: W291 trailing whitespace\n'}
[6.779196] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.779354] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:6:1: I201 Missing newline between import groups. 'from rclpy.executors import SingleThreadedExecutor' is identified as Third Party and 'import time' is identified as Stdlib.\n"}
[6.779514] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.779646] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:7:1: F401 'sensor_msgs.msg.LaserScan' imported but unused\n"}
[6.779757] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.779862] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:8:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[6.779969] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.780074] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:8:1: F401 'geometry_msgs.msg.Twist' imported but unused\n"}
[6.780181] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.780350] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:8:36: W291 trailing whitespace\n'}
[6.780507] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.780651] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:10:1: I100 Import statements are in the wrong order. 'from articubot_one.obstacle_avoidance import Obstacle' should be before 'from geometry_msgs.msg import Twist'\n"}
[6.780764] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.780869] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:10:54: W291 trailing whitespace\n'}
[6.780978] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.781108] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:12:1: E302 expected 2 blank lines, found 1\n'}
[6.781236] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.781407] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:19:1: E302 expected 2 blank lines, found 1\n'}
[6.781619] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.781814] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:14: E111 indentation is not a multiple of 4\n'}
[6.782038] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.782264] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:14: E117 over-indented\n'}
[6.782474] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.782698] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:37: E261 at least two spaces before inline comment\n'}
[6.782913] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.783248] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:39:29: E261 at least two spaces before inline comment\n'}
[6.783488] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.783762] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:46:14: E111 indentation is not a multiple of 4\n'}
[6.783919] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.784072] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:46:14: E117 over-indented\n'}
[6.784226] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.784378] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:52:31: Q000 Double quotes found but single quotes preferred\n'}
[6.784586] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.784728] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:55:48: E261 at least two spaces before inline comment\n'}
[6.784902] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.785072] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:57:53: E261 at least two spaces before inline comment\n'}
[6.785244] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.785414] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:76:46: Q000 Double quotes found but single quotes preferred\n'}
[6.785963] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.786192] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:76:46: F541 f-string is missing placeholders\n'}
[6.786406] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.786613] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:77:45: Q000 Double quotes found but single quotes preferred\n'}
[6.786756] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.786874] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:77:45: F541 f-string is missing placeholders\n'}
[6.786998] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.787175] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:78:44: Q000 Double quotes found but single quotes preferred\n'}
[6.787296] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.787417] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:78:44: F541 f-string is missing placeholders\n'}
[6.787648] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.787825] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:79:55: F541 f-string is missing placeholders\n'}
[6.787939] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.788041] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:84:30: Q000 Double quotes found but single quotes preferred\n'}
[6.788147] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.788297] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:85:29: Q000 Double quotes found but single quotes preferred\n'}
[6.788407] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.788575] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:89:21: Q000 Double quotes found but single quotes preferred\n'}
[6.788705] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.788812] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:91:21: Q000 Double quotes found but single quotes preferred\n'}
[6.788965] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.789071] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:96:1: Q001 Single quote multiline found but double quotes preferred\n'}
[6.789175] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.789279] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:96:1: E303 too many blank lines (4)\n'}
[6.789441] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.789620] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:106:74: W291 trailing whitespace\n'}
[6.789753] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.789877] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:126:52: W291 trailing whitespace\n'}
[6.790082] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.790304] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:127:61: W291 trailing whitespace\n'}
[6.790528] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.790772] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:132:63: W291 trailing whitespace\n'}
[6.790959] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.791243] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:136:42: W291 trailing whitespace\n'}
[6.791586] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.791888] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:144:4: W291 trailing whitespace\n'}
[6.792056] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.792210] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:144:8: W292 no newline at end of file\n'}
[6.792365] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.792519] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.792719] (articubot_one) StdoutLine: {'line': b'3: 15 files checked\n'}
[6.792897] (articubot_one) StdoutLine: {'line': b'3: 270 errors\n'}
[6.793070] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.793241] (articubot_one) StdoutLine: {'line': b"3: 'E'-type errors: 150\n"}
[6.793410] (articubot_one) StdoutLine: {'line': b"3: 'F'-type errors: 10\n"}
[6.793922] (articubot_one) StdoutLine: {'line': b"3: 'I'-type errors: 24\n"}
[6.794130] (articubot_one) StdoutLine: {'line': b"3: 'Q'-type errors: 46\n"}
[6.794341] (articubot_one) StdoutLine: {'line': b"3: 'W'-type errors: 40\n"}
[6.794524] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.794711] (articubot_one) StdoutLine: {'line': b'3: Checked files:\n'}
[6.794906] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.795026] (articubot_one) StdoutLine: {'line': b'3: * ./setup.py\n'}
[6.795148] (articubot_one) StdoutLine: {'line': b'3: * ./test/pytest/test_laserObstacle.py\n'}
[6.795328] (articubot_one) StdoutLine: {'line': b'3: * ./articubot_one/obstacle_avoidance.py\n'}
[6.795510] (articubot_one) StdoutLine: {'line': b'3: * ./articubot_one/__init__.py\n'}
[6.795688] (articubot_one) StdoutLine: {'line': b'3: * ./launch/joystick.launch.py\n'}
[6.795804] (articubot_one) StdoutLine: {'line': b'3: * ./launch/online_async_launch.py\n'}
[6.795903] (articubot_one) StdoutLine: {'line': b'3: * ./launch/ball_tracker.launch.py\n'}
[6.796012] (articubot_one) StdoutLine: {'line': b'3: * ./launch/localization_launch.py\n'}
[6.796111] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rviz_gazebo.launch.py\n'}
[6.796215] (articubot_one) StdoutLine: {'line': b'3: * ./launch/navigation_launch.py\n'}
[6.796370] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rsp.launch.py\n'}
[6.796524] (articubot_one) StdoutLine: {'line': b'3: * ./launch/launch_robot.launch.py\n'}
[6.796649] (articubot_one) StdoutLine: {'line': b'3: * ./launch/camera.launch.py\n'}
[6.796753] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rplidar.launch.py\n'}
[6.796857] (articubot_one) StdoutLine: {'line': b'3: * ./launch/launch_sim.launch.py\n'}
[6.797008] (articubot_one) StdoutLine: {'line': b'3: -- run_test.py: return code 1\n'}
[6.797112] (articubot_one) StdoutLine: {'line': b"3: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml'\n"}
[6.797219] (articubot_one) StdoutLine: {'line': b'3/6 Test #3: flake8 ...........................***Failed    0.64 sec\n'}
[6.797376] (articubot_one) StdoutLine: {'line': b'test 4\n'}
[6.797544] (articubot_one) StdoutLine: {'line': b'    Start 4: lint_cmake\n'}
[6.797723] (articubot_one) StdoutLine: {'line': b'\n'}
[6.797880] (articubot_one) StdoutLine: {'line': b'4: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/jazzy/bin/ament_lint_cmake" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml"\n'}
[6.798053] (articubot_one) StdoutLine: {'line': b'4: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[6.798266] (articubot_one) StdoutLine: {'line': b'4: Test timeout computed to be: 60\n'}
[6.798510] (articubot_one) StdoutLine: {'line': b"4: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[6.798786] (articubot_one) StdoutLine: {'line': b'4:  - /opt/ros/jazzy/bin/ament_lint_cmake --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml\n'}
[6.834589] (articubot_one) StdoutLine: {'line': b'4: CMakeLists.txt:40: Line ends in whitespace [whitespace/eol]\n'}
[6.834789] (articubot_one) StdoutLine: {'line': b'4: CMakeLists.txt:55: Line ends in whitespace [whitespace/eol]\n'}
[6.834960] (articubot_one) StdoutLine: {'line': b'4: \n'}
[6.835139] (articubot_one) StdoutLine: {'line': b'4: \n'}
[6.835294] (articubot_one) StdoutLine: {'line': b'4: 2 errors\n'}
[6.840268] (-) TimerEvent: {}
[6.854513] (articubot_one) StdoutLine: {'line': b'4: -- run_test.py: return code 1\n'}
[6.854830] (articubot_one) StdoutLine: {'line': b"4: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml'\n"}
[6.870121] (articubot_one) StdoutLine: {'line': b'4/6 Test #4: lint_cmake .......................***Failed    0.31 sec\n'}
[6.870573] (articubot_one) StdoutLine: {'line': b'test 5\n'}
[6.870779] (articubot_one) StdoutLine: {'line': b'    Start 5: pep257\n'}
[6.870971] (articubot_one) StdoutLine: {'line': b'\n'}
[6.871156] (articubot_one) StdoutLine: {'line': b'5: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_pep257/pep257.txt" "--command" "/opt/ros/jazzy/bin/ament_pep257" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml"\n'}
[6.871360] (articubot_one) StdoutLine: {'line': b'5: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[6.871567] (articubot_one) StdoutLine: {'line': b'5: Test timeout computed to be: 60\n'}
[6.940416] (-) TimerEvent: {}
[6.979969] (articubot_one) StdoutLine: {'line': b"5: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[6.980233] (articubot_one) StdoutLine: {'line': b'5:  - /opt/ros/jazzy/bin/ament_pep257 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml\n'}
[7.040529] (-) TimerEvent: {}
[7.140765] (-) TimerEvent: {}
[7.172880] (articubot_one) StdoutLine: {'line': b'5: checking ./articubot_one/__init__.py\n'}
[7.173198] (articubot_one) StdoutLine: {'line': b'5: checking ./articubot_one/obstacle_avoidance.py\n'}
[7.173393] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/ball_tracker.launch.py\n'}
[7.173607] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/camera.launch.py\n'}
[7.173782] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/joystick.launch.py\n'}
[7.173958] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/launch_robot.launch.py\n'}
[7.174117] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/launch_sim.launch.py\n'}
[7.174275] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/localization_launch.py\n'}
[7.174434] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/navigation_launch.py\n'}
[7.174619] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/online_async_launch.py\n'}
[7.174786] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rplidar.launch.py\n'}
[7.174943] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rsp.launch.py\n'}
[7.175098] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rviz_gazebo.launch.py\n'}
[7.175252] (articubot_one) StdoutLine: {'line': b'5: checking ./setup.py\n'}
[7.175409] (articubot_one) StdoutLine: {'line': b'5: checking ./test/pytest/test_laserObstacle.py\n'}
[7.175576] (articubot_one) StdoutLine: {'line': b'5: No problems found\n'}
[7.201831] (articubot_one) StdoutLine: {'line': b'5: -- run_test.py: return code 0\n'}
[7.202077] (articubot_one) StdoutLine: {'line': b"5: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml'\n"}
[7.218205] (articubot_one) StdoutLine: {'line': b'5/6 Test #5: pep257 ...........................   Passed    0.35 sec\n'}
[7.218713] (articubot_one) StdoutLine: {'line': b'test 6\n'}
[7.219000] (articubot_one) StdoutLine: {'line': b'    Start 6: xmllint\n'}
[7.219162] (articubot_one) StdoutLine: {'line': b'\n'}
[7.219295] (articubot_one) StdoutLine: {'line': b'6: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_xmllint/xmllint.txt" "--command" "/opt/ros/jazzy/bin/ament_xmllint" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml"\n'}
[7.219492] (articubot_one) StdoutLine: {'line': b'6: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[7.219699] (articubot_one) StdoutLine: {'line': b'6: Test timeout computed to be: 60\n'}
[7.240896] (-) TimerEvent: {}
[7.310987] (articubot_one) StdoutLine: {'line': b"6: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[7.311293] (articubot_one) StdoutLine: {'line': b'6:  - /opt/ros/jazzy/bin/ament_xmllint --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml\n'}
[7.341036] (-) TimerEvent: {}
[7.441459] (-) TimerEvent: {}
[7.542218] (-) TimerEvent: {}
[7.643093] (-) TimerEvent: {}
[7.743656] (-) TimerEvent: {}
[7.844655] (-) TimerEvent: {}
[7.945258] (-) TimerEvent: {}
[8.045866] (-) TimerEvent: {}
[8.146681] (-) TimerEvent: {}
[8.247677] (-) TimerEvent: {}
[8.348398] (-) TimerEvent: {}
[8.449268] (-) TimerEvent: {}
[8.549982] (-) TimerEvent: {}
[8.650915] (-) TimerEvent: {}
[8.751613] (-) TimerEvent: {}
[8.852790] (-) TimerEvent: {}
[8.953701] (-) TimerEvent: {}
[9.054729] (-) TimerEvent: {}
[9.155373] (-) TimerEvent: {}
[9.256349] (-) TimerEvent: {}
[9.357011] (-) TimerEvent: {}
[9.380664] (articubot_one) StdoutLine: {'line': b"6: File 'package.xml' is valid\n"}
[9.381646] (articubot_one) StdoutLine: {'line': b'6: \n'}
[9.382410] (articubot_one) StdoutLine: {'line': b'6: No problems found\n'}
[9.437065] (articubot_one) StdoutLine: {'line': b'6: -- run_test.py: return code 0\n'}
[9.438229] (articubot_one) StdoutLine: {'line': b"6: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml'\n"}
[9.457236] (-) TimerEvent: {}
[9.488482] (articubot_one) StdoutLine: {'line': b'6/6 Test #6: xmllint ..........................   Passed    2.27 sec\n'}
[9.492700] (articubot_one) StdoutLine: {'line': b'\n'}
[9.493525] (articubot_one) StdoutLine: {'line': b'33% tests passed\x1b[0;0m, \x1b[0;31m4 tests failed\x1b[0;0m out of 6\n'}
[9.494216] (articubot_one) StdoutLine: {'line': b'\n'}
[9.494870] (articubot_one) StdoutLine: {'line': b'Label Time Summary:\n'}
[9.495495] (articubot_one) StdoutLine: {'line': b'copyright     =   0.48 sec*proc (1 test)\n'}
[9.497763] (articubot_one) StdoutLine: {'line': b'flake8        =   0.64 sec*proc (1 test)\n'}
[9.498600] (articubot_one) StdoutLine: {'line': b'lint_cmake    =   0.31 sec*proc (1 test)\n'}
[9.499388] (articubot_one) StdoutLine: {'line': b'linter        =   4.05 sec*proc (5 tests)\n'}
[9.500240] (articubot_one) StdoutLine: {'line': b'pep257        =   0.35 sec*proc (1 test)\n'}
[9.501059] (articubot_one) StdoutLine: {'line': b'pytest        =   5.39 sec*proc (1 test)\n'}
[9.501771] (articubot_one) StdoutLine: {'line': b'xmllint       =   2.27 sec*proc (1 test)\n'}
[9.502275] (articubot_one) StdoutLine: {'line': b'\n'}
[9.502871] (articubot_one) StdoutLine: {'line': b'Total Test time (real) =   9.44 sec\n'}
[9.503352] (articubot_one) StdoutLine: {'line': b'\n'}
[9.503910] (articubot_one) StdoutLine: {'line': b'The following tests FAILED:\n'}
[9.504387] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  1 - laser_obstacle_test (Failed)\x1b[0;0m\n'}
[9.504955] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  2 - copyright (Failed)\x1b[0;0m\n'}
[9.505659] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  3 - flake8 (Failed)\x1b[0;0m\n'}
[9.506160] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  4 - lint_cmake (Failed)\x1b[0;0m\n'}
[9.510949] (articubot_one) StderrLine: {'line': b'Errors while running CTest\n'}
[9.512049] (articubot_one) StderrLine: {'line': b'Output from these tests are in: /home/jonatan/ros2_ws/build/articubot_one/Testing/Temporary/LastTest.log\n'}
[9.512893] (articubot_one) StderrLine: {'line': b'Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.\n'}
[9.518692] (articubot_one) CommandEnded: {'returncode': 8}
[9.521260] (articubot_one) TestFailure: {'identifier': 'articubot_one'}
[9.521454] (articubot_one) JobEnded: {'identifier': 'articubot_one', 'rc': 0}
[9.525187] (-) EventReactorShutdown: {}
