[0.000000] (-) TimerEvent: {}
[0.000662] (articubot_one) JobQueued: {'identifier': 'articubot_one', 'dependencies': OrderedDict({'articubot_one': '/home/jonatan/ros2_ws/install/articubot_one'})}
[0.001043] (articubot_one) JobStarted: {'identifier': 'articubot_one'}
[0.033193] (articubot_one) Command: {'cmd': ['/usr/bin/ctest', '-C', 'Release', '-D', 'ExperimentalTest', '--no-compress-output', '-V', '--force-new-ctest-process'], 'cwd': '/home/jonatan/ros2_ws/build/articubot_one', 'env': OrderedDict({'GJS_DEBUG_TOPICS': 'JS ERROR;JS LOG', 'XDG_ACTIVATION_TOKEN': '2ddf9c17-5cf4-48ad-bc40-f39f8ecbfeb7', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'jonatan', 'GZ_CONFIG_PATH': '/opt/ros/jazzy/opt/gz_sim_vendor/share/gz:/opt/ros/jazzy/opt/sdformat_vendor/share/gz:/opt/ros/jazzy/opt/gz_gui_vendor/share/gz:/opt/ros/jazzy/opt/gz_transport_vendor/share/gz:/opt/ros/jazzy/opt/gz_rendering_vendor/share/gz:/opt/ros/jazzy/opt/gz_plugin_vendor/share/gz:/opt/ros/jazzy/opt/gz_fuel_tools_vendor/share/gz:/opt/ros/jazzy/opt/gz_msgs_vendor/share/gz:/opt/ros/jazzy/opt/gz_common_vendor/share/gz', 'XDG_SESSION_TYPE': 'wayland', 'CLUTTER_DISABLE_MIPMAPPED_TEXT': '1', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/opt/ros/jazzy/opt/gz_sim_vendor/lib:/opt/ros/jazzy/opt/gz_sensors_vendor/lib:/opt/ros/jazzy/opt/gz_physics_vendor/lib:/opt/ros/jazzy/opt/sdformat_vendor/lib:/opt/ros/jazzy/opt/rviz_ogre_vendor/lib:/opt/ros/jazzy/lib/x86_64-linux-gnu:/opt/ros/jazzy/opt/gz_gui_vendor/lib:/opt/ros/jazzy/opt/gz_transport_vendor/lib:/opt/ros/jazzy/opt/gz_rendering_vendor/lib:/opt/ros/jazzy/opt/gz_plugin_vendor/lib:/opt/ros/jazzy/opt/gz_fuel_tools_vendor/lib:/opt/ros/jazzy/opt/gz_msgs_vendor/lib:/opt/ros/jazzy/opt/gz_common_vendor/lib:/opt/ros/jazzy/opt/gz_math_vendor/lib:/opt/ros/jazzy/opt/gz_utils_vendor/lib:/opt/ros/jazzy/opt/gz_tools_vendor/lib:/opt/ros/jazzy/opt/gz_ogre_next_vendor/lib:/opt/ros/jazzy/opt/gz_dartsim_vendor/lib:/opt/ros/jazzy/opt/gz_cmake_vendor/lib:/opt/ros/jazzy/lib', 'LESS': '-R', 'HOME': '/home/jonatan', 'OLDPWD': '/home/jonatan', 'DESKTOP_SESSION': 'ubuntu', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'ZSH': '/home/jonatan/.oh-my-zsh', 'GIO_LAUNCHED_DESKTOP_FILE': '/usr/share/applications/terminator.desktop', 'ROS_PYTHON_VERSION': '3', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'GTK_MODULES': 'gail:atk-bridge', 'PAGER': 'less', 'PS1': '\\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$', 'MANAGERPID': '2008', 'P9K_TTY': 'old', 'SYSTEMD_EXEC_PID': '2272', 'GSM_SKIP_SSH_AGENT_WORKAROUND': 'true', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'GIO_LAUNCHED_DESKTOP_FILE_PID': '3097', 'WAYLAND_DISPLAY': 'wayland-0', 'ROS_DISTRO': 'jazzy', 'LOGNAME': 'jonatan', '_P9K_SSH_TTY': '/dev/pts/2', 'JOURNAL_STREAM': '9:19463', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'MEMORY_PRESSURE_WATCH': '/sys/fs/cgroup/user.slice/user-1000.slice/user@1000.service/session.slice/org.gnome.Shell@wayland.service/memory.pressure', 'XDG_SESSION_CLASS': 'user', 'USERNAME': 'jonatan', 'TERM': 'xterm-256color', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'PATH': '/opt/ros/jazzy/opt/gz_msgs_vendor/bin:/opt/ros/jazzy/opt/gz_tools_vendor/bin:/opt/ros/jazzy/opt/gz_ogre_next_vendor/bin:/opt/ros/jazzy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin', 'SESSION_MANAGER': 'local/HP-EliteBook-x360-1030-G2:@/tmp/.ICE-unix/2219,unix/HP-EliteBook-x360-1030-G2:/tmp/.ICE-unix/2219', 'INVOCATION_ID': '1d5efdbd10c34d46a8570a6c200c5332', 'XDG_MENU_PREFIX': 'gnome-', 'GNOME_SETUP_DISPLAY': ':1', 'XDG_RUNTIME_DIR': '/run/user/1000', 'DISPLAY': ':0', 'LANG': 'en_US.UTF-8', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'XMODIFIERS': '@im=ibus', 'XDG_SESSION_DESKTOP': 'ubuntu', 'XAUTHORITY': '/run/user/1000/.mutter-Xwaylandauth.DBMW62', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:', 'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh', 'AMENT_PREFIX_PATH': '/home/jonatan/ros2_ws/install/articubot_one:/opt/ros/jazzy', 'SHELL': '/usr/bin/zsh', 'TERMINATOR_UUID': 'urn:uuid:0947d2af-0509-4362-9f98-b841aba16eb4', 'QT_ACCESSIBILITY': '1', 'GDMSESSION': 'ubuntu', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'IGN_GAZEBO_RESOURCE_PATH': '/opt/ros/jazzy/share', 'GJS_DEBUG_OUTPUT': 'stderr', 'P9K_SSH': '0', 'ROS_AUTOMATIC_DISCOVERY_RANGE': 'SUBNET', 'QT_IM_MODULE': 'ibus', 'PWD': '/home/jonatan/ros2_ws/build/articubot_one', 'LC_ALL': 'en_US.UTF-8', '_P9K_TTY': '/dev/pts/2', 'XDG_DATA_DIRS': '/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'PYTHONPATH': '/home/jonatan/ros2_ws/install/articubot_one/lib/python3.12/site-packages:/opt/ros/jazzy/lib/python3.12/site-packages', 'COLCON': '1', 'MEMORY_PRESSURE_WRITE': 'c29tZSAyMDAwMDAgMjAwMDAwMAA=', 'VTE_VERSION': '7600', 'CMAKE_PREFIX_PATH': '/home/jonatan/ros2_ws/install/articubot_one:/opt/ros/jazzy/opt/gz_sim_vendor:/opt/ros/jazzy/opt/gz_sensors_vendor:/opt/ros/jazzy/opt/gz_physics_vendor:/opt/ros/jazzy/opt/sdformat_vendor:/opt/ros/jazzy/opt/gz_gui_vendor:/opt/ros/jazzy/opt/gz_transport_vendor:/opt/ros/jazzy/opt/gz_rendering_vendor:/opt/ros/jazzy/opt/gz_plugin_vendor:/opt/ros/jazzy/opt/gz_fuel_tools_vendor:/opt/ros/jazzy/opt/gz_msgs_vendor:/opt/ros/jazzy/opt/gz_common_vendor:/opt/ros/jazzy/opt/gz_math_vendor:/opt/ros/jazzy/opt/gz_utils_vendor:/opt/ros/jazzy/opt/gz_tools_vendor:/opt/ros/jazzy/opt/gz_ogre_next_vendor:/opt/ros/jazzy/opt/gz_dartsim_vendor:/opt/ros/jazzy/opt/gz_cmake_vendor'}), 'shell': False}
[0.046000] (articubot_one) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.046253] (articubot_one) StdoutLine: {'line': b'Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.046407] (articubot_one) StdoutLine: {'line': b'   Site: HP-EliteBook-x360-1030-G2\n'}
[0.046568] (articubot_one) StdoutLine: {'line': b'   Build name: (empty)\n'}
[0.046787] (articubot_one) StdoutLine: {'line': b' Add coverage exclude regular expressions.\n'}
[0.047040] (articubot_one) StdoutLine: {'line': b'Create new tag: 20250518-1833 - Experimental\n'}
[0.047208] (articubot_one) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.047383] (articubot_one) StdoutLine: {'line': b'Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.047595] (articubot_one) StdoutLine: {'line': b'Test project /home/jonatan/ros2_ws/build/articubot_one\n'}
[0.047768] (articubot_one) StdoutLine: {'line': b'Constructing a list of tests\n'}
[0.047940] (articubot_one) StdoutLine: {'line': b'Done constructing a list of tests\n'}
[0.048224] (articubot_one) StdoutLine: {'line': b'Updating test list for fixtures\n'}
[0.048371] (articubot_one) StdoutLine: {'line': b'Added 0 tests to meet fixture requirements\n'}
[0.048513] (articubot_one) StdoutLine: {'line': b'Checking test dependency graph...\n'}
[0.048654] (articubot_one) StdoutLine: {'line': b'Checking test dependency graph end\n'}
[0.048794] (articubot_one) StdoutLine: {'line': b'test 1\n'}
[0.048935] (articubot_one) StdoutLine: {'line': b'    Start 1: laser_obstacle_test\n'}
[0.049103] (articubot_one) StdoutLine: {'line': b'\n'}
[0.049247] (articubot_one) StdoutLine: {'line': b'1: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test.txt" "--command" "/usr/bin/python3" "-u" "-m" "pytest" "/home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py" "-o" "cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache" "--junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--junit-prefix=articubot_one"\n'}
[0.049403] (articubot_one) StdoutLine: {'line': b'1: Working Directory: /home/jonatan/ros2_ws/build/articubot_one\n'}
[0.049544] (articubot_one) StdoutLine: {'line': b'1: Test timeout computed to be: 60\n'}
[0.099813] (-) TimerEvent: {}
[0.124700] (articubot_one) StdoutLine: {'line': b"1: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/build/articubot_one':\n"}
[0.124874] (articubot_one) StdoutLine: {'line': b'1:  - /usr/bin/python3 -u -m pytest /home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py -o cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache --junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml --junit-prefix=articubot_one\n'}
[0.199940] (-) TimerEvent: {}
[0.300186] (-) TimerEvent: {}
[0.400444] (-) TimerEvent: {}
[0.500720] (-) TimerEvent: {}
[0.568383] (articubot_one) StdoutLine: {'line': b'1: ============================= test session starts ==============================\n'}
[0.568636] (articubot_one) StdoutLine: {'line': b'1: platform linux -- Python 3.12.3, pytest-7.4.4, pluggy-1.4.0\n'}
[0.573321] (articubot_one) StdoutLine: {'line': b'1: cachedir: /home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache\n'}
[0.573527] (articubot_one) StdoutLine: {'line': b'1: rootdir: /home/jonatan/ros2_ws/src/articubot_one\n'}
[0.573679] (articubot_one) StdoutLine: {'line': b'1: plugins: launch-testing-3.4.4, ament-xmllint-0.17.2, ament-pep257-0.17.2, ament-copyright-0.17.2, ament-flake8-0.17.2, launch-testing-ros-0.26.7, ament-lint-0.17.2, cov-4.1.0, typeguard-4.1.5, colcon-core-0.19.0\n'}
[0.600835] (-) TimerEvent: {}
[0.701176] (-) TimerEvent: {}
[0.789839] (articubot_one) StdoutLine: {'line': b'1: collected 3 items\n'}
[0.790455] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.801281] (-) TimerEvent: {}
[0.889972] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py F.F            [100%]\n'}
[0.890233] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.890408] (articubot_one) StdoutLine: {'line': b'1: =================================== FAILURES ===================================\n'}
[0.890573] (articubot_one) StdoutLine: {'line': b'1: ______________________________ test_node_creation ______________________________\n'}
[0.890736] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.890912] (articubot_one) StdoutLine: {'line': b'1:     def test_node_creation():\n'}
[0.891323] (articubot_one) StdoutLine: {'line': b'1:         rclpy.init\n'}
[0.891655] (articubot_one) StdoutLine: {'line': b'1:         try :\n'}
[0.891847] (articubot_one) StdoutLine: {'line': b'1: >           node=Obstacle()\n'}
[0.892024] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.892196] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py:13: \n'}
[0.892359] (articubot_one) StdoutLine: {'line': b'1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n'}
[0.892518] (articubot_one) StdoutLine: {'line': b'1: ../../install/articubot_one/lib/python3.12/site-packages/articubot_one/obstacle_avoidance.py:15: in __init__\n'}
[0.892700] (articubot_one) StdoutLine: {'line': b'1:     super().__init__("Laser_Obstacle_Avoidance")\n'}
[0.892874] (articubot_one) StdoutLine: {'line': b'1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n'}
[0.893078] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.893382] (articubot_one) StdoutLine: {'line': b'1: self = <articubot_one.obstacle_avoidance.Obstacle object at 0x7f3e44fbcb90>\n'}
[0.893559] (articubot_one) StdoutLine: {'line': b"1: node_name = 'Laser_Obstacle_Avoidance'\n"}
[0.893734] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.893891] (articubot_one) StdoutLine: {'line': b'1:     def __init__(\n'}
[0.894420] (articubot_one) StdoutLine: {'line': b'1:         self,\n'}
[0.894577] (articubot_one) StdoutLine: {'line': b'1:         node_name: str,\n'}
[0.894727] (articubot_one) StdoutLine: {'line': b'1:         *,\n'}
[0.894875] (articubot_one) StdoutLine: {'line': b'1:         context: Optional[Context] = None,\n'}
[0.895037] (articubot_one) StdoutLine: {'line': b'1:         cli_args: Optional[List[str]] = None,\n'}
[0.895188] (articubot_one) StdoutLine: {'line': b'1:         namespace: Optional[str] = None,\n'}
[0.895334] (articubot_one) StdoutLine: {'line': b'1:         use_global_arguments: bool = True,\n'}
[0.895480] (articubot_one) StdoutLine: {'line': b'1:         enable_rosout: bool = True,\n'}
[0.895612] (articubot_one) StdoutLine: {'line': b'1:         start_parameter_services: bool = True,\n'}
[0.895755] (articubot_one) StdoutLine: {'line': b'1:         parameter_overrides: Optional[List[Parameter]] = None,\n'}
[0.895889] (articubot_one) StdoutLine: {'line': b'1:         allow_undeclared_parameters: bool = False,\n'}
[0.896039] (articubot_one) StdoutLine: {'line': b'1:         automatically_declare_parameters_from_overrides: bool = False,\n'}
[0.896180] (articubot_one) StdoutLine: {'line': b'1:         enable_logger_service: bool = False\n'}
[0.896316] (articubot_one) StdoutLine: {'line': b'1:     ) -> None:\n'}
[0.896474] (articubot_one) StdoutLine: {'line': b'1:         """\n'}
[0.896611] (articubot_one) StdoutLine: {'line': b'1:         Create a Node.\n'}
[0.896744] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[0.896882] (articubot_one) StdoutLine: {'line': b'1:         :param node_name: A name to give to this node. Validated by :func:`validate_node_name`.\n'}
[0.897051] (articubot_one) StdoutLine: {'line': b'1:         :param context: The context to be associated with, or ``None`` for the default global\n'}
[0.897211] (articubot_one) StdoutLine: {'line': b'1:             context.\n'}
[0.897347] (articubot_one) StdoutLine: {'line': b'1:         :param cli_args: A list of strings of command line args to be used only by this node.\n'}
[0.897487] (articubot_one) StdoutLine: {'line': b'1:             These arguments are used to extract remappings used by the node and other ROS specific\n'}
[0.897626] (articubot_one) StdoutLine: {'line': b'1:             settings, as well as user defined non-ROS arguments.\n'}
[0.897765] (articubot_one) StdoutLine: {'line': b'1:         :param namespace: The namespace to which relative topic and service names will be prefixed.\n'}
[0.897904] (articubot_one) StdoutLine: {'line': b'1:             Validated by :func:`validate_namespace`.\n'}
[0.898115] (articubot_one) StdoutLine: {'line': b'1:         :param use_global_arguments: ``False`` if the node should ignore process-wide command line\n'}
[0.898259] (articubot_one) StdoutLine: {'line': b'1:             args.\n'}
[0.898396] (articubot_one) StdoutLine: {'line': b'1:         :param enable_rosout: ``False`` if the node should ignore rosout logging.\n'}
[0.898535] (articubot_one) StdoutLine: {'line': b'1:         :param start_parameter_services: ``False`` if the node should not create parameter\n'}
[0.898669] (articubot_one) StdoutLine: {'line': b'1:             services.\n'}
[0.898805] (articubot_one) StdoutLine: {'line': b'1:         :param parameter_overrides: A list of overrides for initial values for parameters declared\n'}
[0.898939] (articubot_one) StdoutLine: {'line': b'1:             on the node.\n'}
[0.899122] (articubot_one) StdoutLine: {'line': b'1:         :param allow_undeclared_parameters: True if undeclared parameters are allowed.\n'}
[0.899262] (articubot_one) StdoutLine: {'line': b'1:             This flag affects the behavior of parameter-related operations.\n'}
[0.899401] (articubot_one) StdoutLine: {'line': b'1:         :param automatically_declare_parameters_from_overrides: If True, the "parameter overrides"\n'}
[0.899542] (articubot_one) StdoutLine: {'line': b'1:             will be used to implicitly declare parameters on the node during creation.\n'}
[0.899681] (articubot_one) StdoutLine: {'line': b'1:         :param enable_logger_service: ``True`` if ROS2 services are created to allow external nodes\n'}
[0.899819] (articubot_one) StdoutLine: {'line': b'1:             to get and set logger levels of this node. Otherwise, logger levels are only managed\n'}
[0.899956] (articubot_one) StdoutLine: {'line': b'1:             locally. That is, logger levels cannot be changed remotely.\n'}
[0.900113] (articubot_one) StdoutLine: {'line': b'1:         """\n'}
[0.900249] (articubot_one) StdoutLine: {'line': b'1:         self.__handle = None\n'}
[0.900386] (articubot_one) StdoutLine: {'line': b'1:         self._context = get_default_context() if context is None else context\n'}
[0.900517] (articubot_one) StdoutLine: {'line': b'1:         self._parameters: dict = {}\n'}
[0.900652] (articubot_one) StdoutLine: {'line': b'1:         self._publishers: List[Publisher] = []\n'}
[0.900787] (articubot_one) StdoutLine: {'line': b'1:         self._subscriptions: List[Subscription] = []\n'}
[0.900925] (articubot_one) StdoutLine: {'line': b'1:         self._clients: List[Client] = []\n'}
[0.901079] (articubot_one) StdoutLine: {'line': b'1:         self._services: List[Service] = []\n'}
[0.901217] (articubot_one) StdoutLine: {'line': b'1:         self._timers: List[Timer] = []\n'}
[0.901350] (-) TimerEvent: {}
[0.901488] (articubot_one) StdoutLine: {'line': b'1:         self._guards: List[GuardCondition] = []\n'}
[0.901638] (articubot_one) StdoutLine: {'line': b'1:         self.__waitables: List[Waitable] = []\n'}
[0.901779] (articubot_one) StdoutLine: {'line': b'1:         self._default_callback_group = MutuallyExclusiveCallbackGroup()\n'}
[0.901918] (articubot_one) StdoutLine: {'line': b'1:         self._pre_set_parameters_callbacks: List[Callable[[List[Parameter]], List[Parameter]]] = []\n'}
[0.902081] (articubot_one) StdoutLine: {'line': b'1:         self._on_set_parameters_callbacks: \\\n'}
[0.902218] (articubot_one) StdoutLine: {'line': b'1:             List[Callable[[List[Parameter]], SetParametersResult]] = []\n'}
[0.902366] (articubot_one) StdoutLine: {'line': b'1:         self._post_set_parameters_callbacks: List[Callable[[List[Parameter]], None]] = []\n'}
[0.902503] (articubot_one) StdoutLine: {'line': b'1:         self._rate_group = ReentrantCallbackGroup()\n'}
[0.902644] (articubot_one) StdoutLine: {'line': b'1:         self._allow_undeclared_parameters = allow_undeclared_parameters\n'}
[0.902788] (articubot_one) StdoutLine: {'line': b'1:         self._parameter_overrides = {}\n'}
[0.902928] (articubot_one) StdoutLine: {'line': b'1:         self._descriptors = {}\n'}
[0.903093] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[0.903247] (articubot_one) StdoutLine: {'line': b"1:         namespace = namespace or ''\n"}
[0.903388] (articubot_one) StdoutLine: {'line': b'1:         if not self._context.ok():\n'}
[0.903526] (articubot_one) StdoutLine: {'line': b"1: >           raise NotInitializedException('cannot create node')\n"}
[0.903670] (articubot_one) StdoutLine: {'line': b'1: E           rclpy.exceptions.NotInitializedException: rclpy.init() has not been called. msg:cannot create node\n'}
[0.903808] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.903942] (articubot_one) StdoutLine: {'line': b'1: /opt/ros/jazzy/lib/python3.12/site-packages/rclpy/node.py:184: NotInitializedException\n'}
[0.904110] (articubot_one) StdoutLine: {'line': b'1: ________________________________ test_obstacle _________________________________\n'}
[0.904251] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.904388] (articubot_one) StdoutLine: {'line': b'1:     def test_obstacle():\n'}
[0.904529] (articubot_one) StdoutLine: {'line': b'1:         rclpy.init\n'}
[0.904682] (articubot_one) StdoutLine: {'line': b'1:         try :\n'}
[0.904842] (articubot_one) StdoutLine: {'line': b'1: >           node=Obstacle()\n'}
[0.905040] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.905475] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py:33: \n'}
[0.905711] (articubot_one) StdoutLine: {'line': b'1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n'}
[0.905897] (articubot_one) StdoutLine: {'line': b'1: ../../install/articubot_one/lib/python3.12/site-packages/articubot_one/obstacle_avoidance.py:15: in __init__\n'}
[0.906116] (articubot_one) StdoutLine: {'line': b'1:     super().__init__("Laser_Obstacle_Avoidance")\n'}
[0.906299] (articubot_one) StdoutLine: {'line': b'1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n'}
[0.906477] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.906649] (articubot_one) StdoutLine: {'line': b'1: self = <articubot_one.obstacle_avoidance.Obstacle object at 0x7f3e40ec3200>\n'}
[0.906819] (articubot_one) StdoutLine: {'line': b"1: node_name = 'Laser_Obstacle_Avoidance'\n"}
[0.907041] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.907213] (articubot_one) StdoutLine: {'line': b'1:     def __init__(\n'}
[0.907351] (articubot_one) StdoutLine: {'line': b'1:         self,\n'}
[0.907492] (articubot_one) StdoutLine: {'line': b'1:         node_name: str,\n'}
[0.907645] (articubot_one) StdoutLine: {'line': b'1:         *,\n'}
[0.907781] (articubot_one) StdoutLine: {'line': b'1:         context: Optional[Context] = None,\n'}
[0.907939] (articubot_one) StdoutLine: {'line': b'1:         cli_args: Optional[List[str]] = None,\n'}
[0.908127] (articubot_one) StdoutLine: {'line': b'1:         namespace: Optional[str] = None,\n'}
[0.908266] (articubot_one) StdoutLine: {'line': b'1:         use_global_arguments: bool = True,\n'}
[0.908401] (articubot_one) StdoutLine: {'line': b'1:         enable_rosout: bool = True,\n'}
[0.908534] (articubot_one) StdoutLine: {'line': b'1:         start_parameter_services: bool = True,\n'}
[0.908668] (articubot_one) StdoutLine: {'line': b'1:         parameter_overrides: Optional[List[Parameter]] = None,\n'}
[0.908803] (articubot_one) StdoutLine: {'line': b'1:         allow_undeclared_parameters: bool = False,\n'}
[0.908954] (articubot_one) StdoutLine: {'line': b'1:         automatically_declare_parameters_from_overrides: bool = False,\n'}
[0.909142] (articubot_one) StdoutLine: {'line': b'1:         enable_logger_service: bool = False\n'}
[0.909382] (articubot_one) StdoutLine: {'line': b'1:     ) -> None:\n'}
[0.909538] (articubot_one) StdoutLine: {'line': b'1:         """\n'}
[0.909701] (articubot_one) StdoutLine: {'line': b'1:         Create a Node.\n'}
[0.909899] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[0.910090] (articubot_one) StdoutLine: {'line': b'1:         :param node_name: A name to give to this node. Validated by :func:`validate_node_name`.\n'}
[0.910247] (articubot_one) StdoutLine: {'line': b'1:         :param context: The context to be associated with, or ``None`` for the default global\n'}
[0.910386] (articubot_one) StdoutLine: {'line': b'1:             context.\n'}
[0.910523] (articubot_one) StdoutLine: {'line': b'1:         :param cli_args: A list of strings of command line args to be used only by this node.\n'}
[0.910661] (articubot_one) StdoutLine: {'line': b'1:             These arguments are used to extract remappings used by the node and other ROS specific\n'}
[0.910795] (articubot_one) StdoutLine: {'line': b'1:             settings, as well as user defined non-ROS arguments.\n'}
[0.910928] (articubot_one) StdoutLine: {'line': b'1:         :param namespace: The namespace to which relative topic and service names will be prefixed.\n'}
[0.911135] (articubot_one) StdoutLine: {'line': b'1:             Validated by :func:`validate_namespace`.\n'}
[0.911279] (articubot_one) StdoutLine: {'line': b'1:         :param use_global_arguments: ``False`` if the node should ignore process-wide command line\n'}
[0.911419] (articubot_one) StdoutLine: {'line': b'1:             args.\n'}
[0.911556] (articubot_one) StdoutLine: {'line': b'1:         :param enable_rosout: ``False`` if the node should ignore rosout logging.\n'}
[0.911695] (articubot_one) StdoutLine: {'line': b'1:         :param start_parameter_services: ``False`` if the node should not create parameter\n'}
[0.911836] (articubot_one) StdoutLine: {'line': b'1:             services.\n'}
[0.911979] (articubot_one) StdoutLine: {'line': b'1:         :param parameter_overrides: A list of overrides for initial values for parameters declared\n'}
[0.912126] (articubot_one) StdoutLine: {'line': b'1:             on the node.\n'}
[0.912259] (articubot_one) StdoutLine: {'line': b'1:         :param allow_undeclared_parameters: True if undeclared parameters are allowed.\n'}
[0.912393] (articubot_one) StdoutLine: {'line': b'1:             This flag affects the behavior of parameter-related operations.\n'}
[0.912529] (articubot_one) StdoutLine: {'line': b'1:         :param automatically_declare_parameters_from_overrides: If True, the "parameter overrides"\n'}
[0.912663] (articubot_one) StdoutLine: {'line': b'1:             will be used to implicitly declare parameters on the node during creation.\n'}
[0.912795] (articubot_one) StdoutLine: {'line': b'1:         :param enable_logger_service: ``True`` if ROS2 services are created to allow external nodes\n'}
[0.912942] (articubot_one) StdoutLine: {'line': b'1:             to get and set logger levels of this node. Otherwise, logger levels are only managed\n'}
[0.913094] (articubot_one) StdoutLine: {'line': b'1:             locally. That is, logger levels cannot be changed remotely.\n'}
[0.913232] (articubot_one) StdoutLine: {'line': b'1:         """\n'}
[0.913369] (articubot_one) StdoutLine: {'line': b'1:         self.__handle = None\n'}
[0.913502] (articubot_one) StdoutLine: {'line': b'1:         self._context = get_default_context() if context is None else context\n'}
[0.913638] (articubot_one) StdoutLine: {'line': b'1:         self._parameters: dict = {}\n'}
[0.913769] (articubot_one) StdoutLine: {'line': b'1:         self._publishers: List[Publisher] = []\n'}
[0.913904] (articubot_one) StdoutLine: {'line': b'1:         self._subscriptions: List[Subscription] = []\n'}
[0.914051] (articubot_one) StdoutLine: {'line': b'1:         self._clients: List[Client] = []\n'}
[0.914190] (articubot_one) StdoutLine: {'line': b'1:         self._services: List[Service] = []\n'}
[0.914320] (articubot_one) StdoutLine: {'line': b'1:         self._timers: List[Timer] = []\n'}
[0.914451] (articubot_one) StdoutLine: {'line': b'1:         self._guards: List[GuardCondition] = []\n'}
[0.914581] (articubot_one) StdoutLine: {'line': b'1:         self.__waitables: List[Waitable] = []\n'}
[0.914713] (articubot_one) StdoutLine: {'line': b'1:         self._default_callback_group = MutuallyExclusiveCallbackGroup()\n'}
[0.914844] (articubot_one) StdoutLine: {'line': b'1:         self._pre_set_parameters_callbacks: List[Callable[[List[Parameter]], List[Parameter]]] = []\n'}
[0.914996] (articubot_one) StdoutLine: {'line': b'1:         self._on_set_parameters_callbacks: \\\n'}
[0.915138] (articubot_one) StdoutLine: {'line': b'1:             List[Callable[[List[Parameter]], SetParametersResult]] = []\n'}
[0.915269] (articubot_one) StdoutLine: {'line': b'1:         self._post_set_parameters_callbacks: List[Callable[[List[Parameter]], None]] = []\n'}
[0.915402] (articubot_one) StdoutLine: {'line': b'1:         self._rate_group = ReentrantCallbackGroup()\n'}
[0.915535] (articubot_one) StdoutLine: {'line': b'1:         self._allow_undeclared_parameters = allow_undeclared_parameters\n'}
[0.915667] (articubot_one) StdoutLine: {'line': b'1:         self._parameter_overrides = {}\n'}
[0.915796] (articubot_one) StdoutLine: {'line': b'1:         self._descriptors = {}\n'}
[0.915927] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[0.916075] (articubot_one) StdoutLine: {'line': b"1:         namespace = namespace or ''\n"}
[0.916206] (articubot_one) StdoutLine: {'line': b'1:         if not self._context.ok():\n'}
[0.916343] (articubot_one) StdoutLine: {'line': b"1: >           raise NotInitializedException('cannot create node')\n"}
[0.916488] (articubot_one) StdoutLine: {'line': b'1: E           rclpy.exceptions.NotInitializedException: rclpy.init() has not been called. msg:cannot create node\n'}
[0.916634] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.916777] (articubot_one) StdoutLine: {'line': b'1: /opt/ros/jazzy/lib/python3.12/site-packages/rclpy/node.py:184: NotInitializedException\n'}
[0.916920] (articubot_one) StdoutLine: {'line': b'1: - generated xml file: /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml -\n'}
[0.917083] (articubot_one) StdoutLine: {'line': b'1: =========================== short test summary info ============================\n'}
[0.917229] (articubot_one) StdoutLine: {'line': b'1: FAILED ../../src/articubot_one/test/pytest/test_laserObstacle.py::test_node_creation\n'}
[0.917374] (articubot_one) StdoutLine: {'line': b'1: FAILED ../../src/articubot_one/test/pytest/test_laserObstacle.py::test_obstacle\n'}
[0.917536] (articubot_one) StdoutLine: {'line': b'1: ========================= 2 failed, 1 passed in 0.32s ==========================\n'}
[0.998840] (articubot_one) StdoutLine: {'line': b'1: -- run_test.py: return code 1\n'}
[0.999125] (articubot_one) StdoutLine: {'line': b"1: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml'\n"}
[1.001508] (-) TimerEvent: {}
[1.015911] (articubot_one) StdoutLine: {'line': b'1/6 Test #1: laser_obstacle_test ..............***Failed    0.97 sec\n'}
[1.016376] (articubot_one) StdoutLine: {'line': b'test 2\n'}
[1.016645] (articubot_one) StdoutLine: {'line': b'    Start 2: copyright\n'}
[1.016790] (articubot_one) StdoutLine: {'line': b'\n'}
[1.016896] (articubot_one) StdoutLine: {'line': b'2: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_copyright/copyright.txt" "--command" "/opt/ros/jazzy/bin/ament_copyright" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml"\n'}
[1.017043] (articubot_one) StdoutLine: {'line': b'2: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[1.017153] (articubot_one) StdoutLine: {'line': b'2: Test timeout computed to be: 200\n'}
[1.101634] (-) TimerEvent: {}
[1.109982] (articubot_one) StdoutLine: {'line': b"2: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[1.110330] (articubot_one) StdoutLine: {'line': b'2:  - /opt/ros/jazzy/bin/ament_copyright --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml\n'}
[1.201744] (-) TimerEvent: {}
[1.302026] (-) TimerEvent: {}
[1.402221] (articubot_one) StdoutLine: {'line': b'2: CONTRIBUTING.md: file not found\n'}
[1.402471] (-) TimerEvent: {}
[1.402608] (articubot_one) StdoutLine: {'line': b'2: LICENSE: file not found\n'}
[1.402803] (articubot_one) StdoutLine: {'line': b'2: articubot_one/obstacle_avoidance.py: could not find copyright notice\n'}
[1.402986] (articubot_one) StdoutLine: {'line': b'2: launch/ball_tracker.launch.py: could not find copyright notice\n'}
[1.403150] (articubot_one) StdoutLine: {'line': b'2: launch/camera.launch.py: could not find copyright notice\n'}
[1.403299] (articubot_one) StdoutLine: {'line': b'2: launch/joystick.launch.py: could not find copyright notice\n'}
[1.403449] (articubot_one) StdoutLine: {'line': b'2: launch/launch_robot.launch.py: could not find copyright notice\n'}
[1.403617] (articubot_one) StdoutLine: {'line': b'2: launch/launch_sim.launch.py: could not find copyright notice\n'}
[1.403781] (articubot_one) StdoutLine: {'line': b'2: launch/online_async_launch.py: could not find copyright notice\n'}
[1.403925] (articubot_one) StdoutLine: {'line': b'2: launch/rplidar.launch.py: could not find copyright notice\n'}
[1.404094] (articubot_one) StdoutLine: {'line': b'2: launch/rsp.launch.py: could not find copyright notice\n'}
[1.404237] (articubot_one) StdoutLine: {'line': b'2: launch/rviz_gazebo.launch.py: could not find copyright notice\n'}
[1.404380] (articubot_one) StdoutLine: {'line': b'2: test/pytest/test_laserObstacle.py: could not find copyright notice\n'}
[1.404521] (articubot_one) StdoutLine: {'line': b'2: 13 errors, checked 16 files\n'}
[1.420912] (articubot_one) StdoutLine: {'line': b'2: -- run_test.py: return code 1\n'}
[1.421192] (articubot_one) StdoutLine: {'line': b"2: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml'\n"}
[1.432167] (articubot_one) StdoutLine: {'line': b'2/6 Test #2: copyright ........................***Failed    0.42 sec\n'}
[1.432549] (articubot_one) StdoutLine: {'line': b'test 3\n'}
[1.432653] (articubot_one) StdoutLine: {'line': b'    Start 3: flake8\n'}
[1.432740] (articubot_one) StdoutLine: {'line': b'\n'}
[1.432828] (articubot_one) StdoutLine: {'line': b'3: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_flake8/flake8.txt" "--command" "/opt/ros/jazzy/bin/ament_flake8" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml"\n'}
[1.432918] (articubot_one) StdoutLine: {'line': b'3: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[1.433023] (articubot_one) StdoutLine: {'line': b'3: Test timeout computed to be: 60\n'}
[1.502595] (-) TimerEvent: {}
[1.509732] (articubot_one) StdoutLine: {'line': b"3: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[1.509909] (articubot_one) StdoutLine: {'line': b'3:  - /opt/ros/jazzy/bin/ament_flake8 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml\n'}
[1.602714] (-) TimerEvent: {}
[1.702982] (-) TimerEvent: {}
[1.804017] (-) TimerEvent: {}
[1.904288] (-) TimerEvent: {}
[1.923944] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist\n'}
[1.924292] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.924493] (articubot_one) StdoutLine: {'line': b'3: import math\n'}
[1.924598] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.924694] (articubot_one) StdoutLine: {'line': b'3: import math\n'}
[1.924788] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.924881] (articubot_one) StdoutLine: {'line': b'3: # i am writing down this piece of code with paramters \n'}
[1.925342] (articubot_one) StdoutLine: {'line': b'3:                                                      ^\n'}
[1.925585] (articubot_one) StdoutLine: {'line': b'3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node \n'}
[1.925797] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.926011] (articubot_one) StdoutLine: {'line': b'3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node \n'}
[1.926215] (articubot_one) StdoutLine: {'line': b'3:                                                                                                               ^\n'}
[1.926406] (articubot_one) StdoutLine: {'line': b'3:     def __init__(self) :\n'}
[1.926599] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[1.926795] (articubot_one) StdoutLine: {'line': b'3:         super().__init__("Laser_Obstacle_Avoidance")\n'}
[1.927568] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[1.927805] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[1.928023] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.931385] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[1.932775] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[1.933000] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[1.936326] (articubot_one) StdoutLine: {'line': b'3:                                                    ^\n'}
[1.937008] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[1.937945] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.938095] (articubot_one) StdoutLine: {'line': b'3:         self.threshold=self.get_parameter("threshold_distance").value\n'}
[1.938194] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[1.938283] (articubot_one) StdoutLine: {'line': b'3:         self.threshold=self.get_parameter("threshold_distance").value\n'}
[1.938371] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[1.938457] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[1.938542] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.938625] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[1.938710] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[1.938795] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[1.938926] (articubot_one) StdoutLine: {'line': b'3:                                                  ^\n'}
[1.956343] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[1.956547] (articubot_one) StdoutLine: {'line': b'3:                                                   ^\n'}
[1.956739] (articubot_one) StdoutLine: {'line': b'3:         self.laser_topic=self.get_parameter("laser_scan_topic").value\n'}
[1.956926] (articubot_one) StdoutLine: {'line': b'3:                         ^\n'}
[1.957134] (articubot_one) StdoutLine: {'line': b'3:         self.laser_topic=self.get_parameter("laser_scan_topic").value\n'}
[1.957324] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[1.957616] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[1.957799] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.957973] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[1.958152] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[1.958313] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[1.958475] (articubot_one) StdoutLine: {'line': b'3:                                               ^\n'}
[1.958644] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[1.958819] (articubot_one) StdoutLine: {'line': b'3:                                                ^\n'}
[1.958995] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value\n'}
[1.959175] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[1.959342] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value\n'}
[1.959510] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[1.959676] (articubot_one) StdoutLine: {'line': b"3:         self.frontal_detection_angle_rad = math.radians(self.get_parameter('frontal_detection_angle_deg').value)\n"}
[1.959846] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.960029] (articubot_one) StdoutLine: {'line': b'3:         #create a publisher to the /cmd_vel\n'}
[1.960204] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[1.960370] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_vel_pub = self.create_publisher(Twist,self.cmd_topic, 10)\n'}
[1.960537] (articubot_one) StdoutLine: {'line': b'3:                                                       ^\n'}
[1.960703] (articubot_one) StdoutLine: {'line': b'3:     def laser_callback(self,msg):\n'}
[1.960869] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.961073] (articubot_one) StdoutLine: {'line': b'3:     def laser_callback(self,msg):\n'}
[1.961252] (articubot_one) StdoutLine: {'line': b'3:                            ^\n'}
[1.961418] (articubot_one) StdoutLine: {'line': b'3:   \n'}
[1.961584] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.961748] (articubot_one) StdoutLine: {'line': b'3:         if not(scan_size) :\n'}
[1.961913] (articubot_one) StdoutLine: {'line': b'3:               ^\n'}
[1.962105] (articubot_one) StdoutLine: {'line': b'3:         if not(scan_size) :\n'}
[1.962275] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[1.962440] (articubot_one) StdoutLine: {'line': b'3:             #no laser data \n'}
[1.962606] (articubot_one) StdoutLine: {'line': b'3:             ^\n'}
[1.962782] (articubot_one) StdoutLine: {'line': b'3:             #no laser data \n'}
[1.962940] (articubot_one) StdoutLine: {'line': b'3:                           ^\n'}
[1.963116] (articubot_one) StdoutLine: {'line': b'3:             return \n'}
[1.963278] (articubot_one) StdoutLine: {'line': b'3:                   ^\n'}
[1.963436] (articubot_one) StdoutLine: {'line': b'3:         # the lidar provides angles,angle step (common difference of the angle sequence), distances in meter\n'}
[1.963595] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.963755] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[1.963913] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.964050] (articubot_one) StdoutLine: {'line': b'3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance\n'}
[1.964150] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[1.964242] (articubot_one) StdoutLine: {'line': b'3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance\n'}
[1.964336] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.964428] (articubot_one) StdoutLine: {'line': b"3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance\n"}
[1.964520] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[1.964611] (articubot_one) StdoutLine: {'line': b"3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance\n"}
[1.964715] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.964805] (articubot_one) StdoutLine: {'line': b'3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle \n'}
[1.964897] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.965016] (articubot_one) StdoutLine: {'line': b'3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle \n'}
[1.965118] (articubot_one) StdoutLine: {'line': b'3:                                                                                                                      ^\n'}
[1.965209] (articubot_one) StdoutLine: {'line': b'3:         # we are sweeping across all the angles with the increment \n'}
[1.965300] (articubot_one) StdoutLine: {'line': b'3:                                                                   ^\n'}
[1.965391] (articubot_one) StdoutLine: {'line': b'3:         # while sweeping we compare  only the ranges with the ones in the defined angle \n'}
[1.965495] (articubot_one) StdoutLine: {'line': b'3:                                                                                        ^\n'}
[1.965585] (articubot_one) StdoutLine: {'line': b'3:                  # If the range reading is valid (not inf or nan)\n'}
[1.965674] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[1.965764] (articubot_one) StdoutLine: {'line': b'3:                  # If the range reading is valid (not inf or nan)\n'}
[1.965855] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[1.965946] (articubot_one) StdoutLine: {'line': b'3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):\n'}
[1.966062] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[1.966157] (articubot_one) StdoutLine: {'line': b'3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):\n'}
[1.966252] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[1.966342] (articubot_one) StdoutLine: {'line': b'3:             \n'}
[1.966431] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.966519] (articubot_one) StdoutLine: {'line': b'3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])\n'}
[1.966611] (articubot_one) StdoutLine: {'line': b'3:                      ^\n'}
[1.966701] (articubot_one) StdoutLine: {'line': b'3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])\n'}
[1.966792] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.966882] (articubot_one) StdoutLine: {'line': b'3:         #  To stop the robot from moving ahead when ever it meets an obstacle, it will just go back \n'}
[1.966983] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.967084] (articubot_one) StdoutLine: {'line': b'3:         if obstacle_detected :\n'}
[1.967175] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[1.967263] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')\n"}
[1.967354] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.967445] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')\n"}
[1.967535] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.967626] (articubot_one) StdoutLine: {'line': b'3:            twist.linear.x = 0.0\n'}
[1.967723] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.967813] (articubot_one) StdoutLine: {'line': b'3:            twist.angular.z =0.0\n'}
[1.967902] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.968006] (articubot_one) StdoutLine: {'line': b'3:            twist.angular.z =0.0\n'}
[1.968103] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[1.968193] (articubot_one) StdoutLine: {'line': b'3:            self.cmd_vel_pub.publish(twist)\n'}
[1.968283] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.968373] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[1.968464] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.968555] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[1.968645] (articubot_one) StdoutLine: {'line': b'3:                                   ^\n'}
[1.968736] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[1.968828] (articubot_one) StdoutLine: {'line': b'3:                                                           ^\n'}
[1.968918] (articubot_one) StdoutLine: {'line': b'3: def main(args=None):\n'}
[1.969035] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.969134] (articubot_one) StdoutLine: {'line': b'3:         rclpy.spin(node) # Keep the node running and process callbacks\n'}
[1.969227] (articubot_one) StdoutLine: {'line': b'3:                         ^\n'}
[1.969318] (articubot_one) StdoutLine: {'line': b"3:         node.get_logger().info('Smart Obstacle Avoider Node stopped cleanly via KeyboardInterrupt.')\n"}
[1.969410] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.969500] (articubot_one) StdoutLine: {'line': b"3: if __name__ == '__main__':\n"}
[1.969591] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.969680] (articubot_one) StdoutLine: {'line': b'3:     main()    \n'}
[1.969773] (articubot_one) StdoutLine: {'line': b'3:           ^\n'}
[1.969864] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[1.969956] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.970075] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[1.970168] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.970261] (articubot_one) StdoutLine: {'line': b"3:     my_package_name='articubot_one'\n"}
[1.970352] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[1.970443] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[1.970535] (articubot_one) StdoutLine: {'line': b'3:                                                                                   ^\n'}
[1.970625] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[1.970717] (articubot_one) StdoutLine: {'line': b'3:                                                                                            ^\n'}
[1.970809] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[1.970899] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.971007] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[1.971105] (articubot_one) StdoutLine: {'line': b'3:                                                                                     ^\n'}
[1.971196] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[1.971299] (articubot_one) StdoutLine: {'line': b'3:                                                                                              ^\n'}
[1.971389] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[1.971479] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.971570] (articubot_one) StdoutLine: {'line': b'3:     params_path = PythonExpression([\'"\',tracker_params_sim, \'" if "true" == "\', sim_mode, \'" else "\', tracker_params_robot, \'"\'])\n'}
[1.971680] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[1.971772] (articubot_one) StdoutLine: {'line': b'3:     params_path = PythonExpression([\'"\',tracker_params_sim, \'" if "true" == "\', sim_mode, \'" else "\', tracker_params_robot, \'"\'])\n'}
[1.971864] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.971954] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory('ball_tracker'), 'launch', 'ball_tracker.launch.py')]),\n"}
[1.972069] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.972160] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'params_file': params_path,\n"}
[1.972250] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[1.972341] (articubot_one) StdoutLine: {'line': b"3:                                     'image_topic': '/camera/image_raw',\n"}
[1.972431] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[1.972522] (articubot_one) StdoutLine: {'line': b"3:                                     'cmd_vel_topic': '/cmd_vel_tracker',\n"}
[1.972612] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[1.972702] (articubot_one) StdoutLine: {'line': b"3:                                     'enable_3d_tracker': 'true'}.items())\n"}
[1.972792] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[1.972881] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[1.972994] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.973103] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[1.973195] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.973285] (articubot_one) StdoutLine: {'line': b'3:     return LaunchDescription([\n'}
[1.973375] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.973465] (articubot_one) StdoutLine: {'line': b"3:                 'image_size': [640,480],\n"}
[1.973555] (articubot_one) StdoutLine: {'line': b'3:                                   ^\n'}
[1.973645] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[1.973733] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.973821] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.973910] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:5:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[1.974033] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.974131] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:6:1: I100 Import statements are in the wrong order. 'import math' should be before 'from geometry_msgs.msg import Twist' and in a different group.\n"}
[1.974226] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.974317] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:6:1: I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.\n"}
[1.974424] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.974514] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:9:54: W291 trailing whitespace\n'}
[1.974604] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.974692] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:10:100: E501 line too long (110 > 99 characters)\n'}
[1.974783] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.974872] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:10:111: W291 trailing whitespace\n'}
[1.974970] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.975071] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:14:23: E203 whitespace before ':'\n"}
[1.975163] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.975253] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:15:26: Q000 Double quotes found but single quotes preferred\n'}
[1.975344] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.975433] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:16:1: W293 blank line contains whitespace\n'}
[1.975522] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.975611] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:17:32: Q000 Double quotes found but single quotes preferred\n'}
[1.975701] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.975791] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:17:52: E231 missing whitespace after ','\n"}
[1.975882] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.975979] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:17:100: E501 line too long (102 > 99 characters)\n'}
[1.976080] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.976170] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:18:23: E225 missing whitespace around operator\n'}
[1.976261] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.976350] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:18:43: Q000 Double quotes found but single quotes preferred\n'}
[1.976440] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.976529] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:19:1: W293 blank line contains whitespace\n'}
[1.976620] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.976712] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:20:32: Q000 Double quotes found but single quotes preferred\n'}
[1.976803] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.976893] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:20:50: E231 missing whitespace after ','\n"}
[1.976996] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.977093] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:20:51: Q000 Double quotes found but single quotes preferred\n'}
[1.977182] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.977270] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:21:25: E225 missing whitespace around operator\n'}
[1.977361] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.977450] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:21:45: Q000 Double quotes found but single quotes preferred\n'}
[1.977540] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.977630] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:22:1: W293 blank line contains whitespace\n'}
[1.977721] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.977809] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:23:32: Q000 Double quotes found but single quotes preferred\n'}
[1.977910] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.978034] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:23:47: E231 missing whitespace after ','\n"}
[1.978133] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.978224] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:23:48: Q000 Double quotes found but single quotes preferred\n'}
[1.978324] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.978414] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:24:23: E225 missing whitespace around operator\n'}
[1.978505] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.978594] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:24:43: Q000 Double quotes found but single quotes preferred\n'}
[1.978683] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.978772] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:29:100: E501 line too long (112 > 99 characters)\n'}
[1.978861] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.978950] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:38:9: E265 block comment should start with '# '\n"}
[1.979066] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.979161] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:39:55: E231 missing whitespace after ','\n"}
[1.979253] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.979342] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:43:5: E303 too many blank lines (2)\n'}
[1.979433] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.979521] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:43:28: E231 missing whitespace after ','\n"}
[1.979610] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.979698] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:47:1: W293 blank line contains whitespace\n'}
[1.979787] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.979876] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:48:15: E275 missing whitespace after keyword\n'}
[1.979975] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.980075] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:48:26: E203 whitespace before ':'\n"}
[1.980167] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.980255] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:49:13: E265 block comment should start with '# '\n"}
[1.980344] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.980432] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:49:27: W291 trailing whitespace\n'}
[1.980520] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.980608] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:50:19: W291 trailing whitespace\n'}
[1.980698] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.980787] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:51:100: E501 line too long (108 > 99 characters)\n'}
[1.980877] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.980974] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:56:1: W293 blank line contains whitespace\n'}
[1.981075] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.981166] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:60:9: E265 block comment should start with '# '\n"}
[1.981256] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.981346] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:60:100: E501 line too long (148 > 99 characters)\n'}
[1.981436] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.981525] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:61:9: E265 block comment should start with '# '\n"}
[1.981615] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.981704] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:61:100: E501 line too long (106 > 99 characters)\n'}
[1.981795] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.981884] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:62:100: E501 line too long (117 > 99 characters)\n'}
[1.982002] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.982103] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:62:118: W291 trailing whitespace\n'}
[1.982195] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.982368] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:64:67: W291 trailing whitespace\n'}
[1.982566] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.982757] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:65:88: W291 trailing whitespace\n'}
[1.982948] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.983205] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:75:18: E114 indentation is not a multiple of 4 (comment)\n'}
[1.983369] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.983527] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:75:18: E117 over-indented (comment)\n'}
[1.983686] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.983843] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:76:18: E111 indentation is not a multiple of 4\n'}
[1.984022] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.984189] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:76:18: E117 over-indented\n'}
[1.984347] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.984505] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:77:1: W293 blank line contains whitespace\n'}
[1.984664] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.984822] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:78:22: E111 indentation is not a multiple of 4\n'}
[1.985005] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.985112] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:78:100: E501 line too long (104 > 99 characters)\n'}
[1.985207] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.985300] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:86:100: W291 trailing whitespace\n'}
[1.985394] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.985485] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:87:29: E203 whitespace before ':'\n"}
[1.985578] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.985671] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:88:12: E111 indentation is not a multiple of 4\n'}
[1.985764] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.985858] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:88:100: E501 line too long (115 > 99 characters)\n'}
[1.985952] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.986074] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:89:12: E111 indentation is not a multiple of 4\n'}
[1.986171] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.986261] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:90:12: E111 indentation is not a multiple of 4\n'}
[1.986363] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.986456] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:90:29: E225 missing whitespace around operator\n'}
[1.986547] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.986639] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:91:12: E111 indentation is not a multiple of 4\n'}
[1.986730] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.986820] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:12: E111 indentation is not a multiple of 4\n'}
[1.986912] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987019] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:35: F541 f-string is missing placeholders\n'}
[1.987115] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987205] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:59: W291 trailing whitespace\n'}
[1.987297] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987396] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:95:1: E302 expected 2 blank lines, found 1\n'}
[1.987488] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987579] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:99:25: E261 at least two spaces before inline comment\n'}
[1.987670] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987758] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:101:100: E501 line too long (100 > 99 characters)\n'}
[1.987849] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987938] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:116:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[1.988067] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.988162] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:117:11: W291 trailing whitespace\n'}
[1.988255] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.988345] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:2:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[1.988440] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.988530] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:8:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import PythonExpression'\n"}
[1.988639] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.988729] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:13:20: E225 missing whitespace around operator\n'}
[1.988821] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.988911] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:17:83: E231 missing whitespace after ','\n"}
[1.989020] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.989116] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:17:92: E231 missing whitespace after ','\n"}
[1.989208] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.989299] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:17:100: E501 line too long (123 > 99 characters)\n'}
[1.989390] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.989480] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:18:85: E231 missing whitespace after ','\n"}
[1.989570] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.989659] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:18:94: E231 missing whitespace after ','\n"}
[1.989750] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.989840] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:18:100: E501 line too long (127 > 99 characters)\n'}
[1.989932] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.990059] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:20:40: E231 missing whitespace after ','\n"}
[1.990156] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.990247] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:20:100: E501 line too long (129 > 99 characters)\n'}
[1.990338] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.990429] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:24:100: E501 line too long (103 > 99 characters)\n'}
[1.990521] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.990613] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:25:21: E131 continuation line unaligned for hanging indent\n'}
[1.990705] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.990796] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:26:37: E128 continuation line under-indented for visual indent\n'}
[1.990888] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.990988] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:27:37: E128 continuation line under-indented for visual indent\n'}
[1.991097] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.991188] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:28:37: E128 continuation line under-indented for visual indent\n'}
[1.991279] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.991369] (articubot_one) StdoutLine: {'line': b"3: ./launch/camera.launch.py:1:1: F401 'os' imported but unused\n"}
[1.991460] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.991550] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:6:1: E302 expected 2 blank lines, found 1\n'}
[1.991641] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.991731] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:10:5: E303 too many blank lines (3)\n'}
[1.991822] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.991912] (articubot_one) StdoutLine: {'line': b"3: ./launch/camera.launch.py:18:35: E231 missing whitespace after ','\n"}
[1.992035] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.992134] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:22:5: E122 continuation line missing indentation or outdented\n'}
[1.992226] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.992316] (articubot_one) StdoutLine: {'line': b'3: from launch.substitutions import LaunchConfiguration\n'}
[1.992407] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.992497] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[1.992588] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.992679] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[1.992771] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.992861] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[1.992952] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.993059] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[1.993154] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.993245] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[1.993336] (articubot_one) StdoutLine: {'line': b'3:                                                                           ^\n'}
[1.993439] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[1.993531] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[1.993621] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[1.993710] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.993800] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel','/cmd_vel_joy')]\n"}
[1.993890] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[1.994005] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_in','/diff_cont/cmd_vel_unstamped'),\n"}
[1.994108] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[1.994199] (articubot_one) StdoutLine: {'line': b"3:                         ('/cmd_vel_out','/diff_cont/cmd_vel')]\n"}
[1.994290] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[1.994380] (articubot_one) StdoutLine: {'line': b'3:     return LaunchDescription([\n'}
[1.994469] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.994559] (articubot_one) StdoutLine: {'line': b'3:         twist_stamper       \n'}
[1.994648] (articubot_one) StdoutLine: {'line': b'3:                      ^\n'}
[1.994737] (articubot_one) StdoutLine: {'line': b'3:     ])      ^\n'}
[1.994827] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import RegisterEventHandler\n'}
[1.994928] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.995035] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[1.995128] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.995217] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[1.995308] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.995397] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[1.995487] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.995578] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[1.995668] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[1.995757] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[1.995847] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[1.995936] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[1.996063] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[1.996160] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[1.996251] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[1.996343] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[1.996434] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[1.996525] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[1.996630] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.996721] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[1.996813] (articubot_one) StdoutLine: {'line': b'3:                                                                              ^\n'}
[1.996902] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[1.997004] (articubot_one) StdoutLine: {'line': b'3:                                                                                       ^\n'}
[1.997102] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[1.997240] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.997347] (articubot_one) StdoutLine: {'line': b'3:             package="twist_mux",\n'}
[1.997485] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[1.997588] (articubot_one) StdoutLine: {'line': b'3:             executable="twist_mux",\n'}
[1.997689] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[1.997788] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]\n"}
[1.997889] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[1.998145] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[1.998310] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.998406] (articubot_one) StdoutLine: {'line': b"3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])\n"}
[1.998499] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.998591] (articubot_one) StdoutLine: {'line': b"3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])\n"}
[1.998699] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.998790] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[1.998881] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[1.998989] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[1.999094] (articubot_one) StdoutLine: {'line': b'3:                                                                                             ^\n'}
[1.999193] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[1.999287] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.999378] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[1.999470] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[1.999561] (articubot_one) StdoutLine: {'line': b'3:         executable="ros2_control_node",\n'}
[1.999653] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[1.999742] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[1.999833] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[1.999923] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[2.000041] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.000136] (articubot_one) StdoutLine: {'line': b'3:         arguments=["diff_cont"],\n'}
[2.000227] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.000317] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[2.000407] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.000498] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[2.000587] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.000675] (articubot_one) StdoutLine: {'line': b'3:         arguments=["joint_broad"],\n'}
[2.000764] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.000854] (articubot_one) StdoutLine: {'line': b"3:     # Code for delaying a node (I haven't tested how effective it is)\n"}
[2.000943] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.001057] (articubot_one) StdoutLine: {'line': b'3:     # \n'}
[2.001152] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[2.001243] (articubot_one) StdoutLine: {'line': b'3:     # Launch them all!\n'}
[2.001334] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.001430] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument\n'}
[2.001520] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.001610] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[2.001701] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.001790] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[2.001882] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.001981] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[2.002082] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.002174] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.002264] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.002361] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.002451] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[2.002540] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.002630] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[2.002719] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[2.002809] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[2.002899] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[2.003011] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[2.003110] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'\n"}
[2.003201] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[2.003291] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'\n"}
[2.003381] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[2.003471] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[2.003561] (articubot_one) StdoutLine: {'line': b'3:                                                                              ^\n'}
[2.003650] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[2.003751] (articubot_one) StdoutLine: {'line': b'3:                                                                                       ^\n'}
[2.003839] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[2.003929] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.004051] (articubot_one) StdoutLine: {'line': b'3:             package="twist_mux",\n'}
[2.004145] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[2.004237] (articubot_one) StdoutLine: {'line': b'3:             executable="twist_mux",\n'}
[2.004325] (-) TimerEvent: {}
[2.004436] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[2.004543] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]\n"}
[2.004638] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[2.004731] (articubot_one) StdoutLine: {'line': b'3:     default_world = os.path.join(\n'}
[2.004825] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.004917] (articubot_one) StdoutLine: {'line': b'3:         )    \n'}
[2.005049] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[2.005150] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[2.005245] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.005336] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[2.005430] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[2.005522] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[2.005614] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.005717] (articubot_one) StdoutLine: {'line': b"3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.\n"}
[2.005817] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.005907] (articubot_one) StdoutLine: {'line': b'3:     diff_drive_spawner = Node(\n'}
[2.006015] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.006109] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[2.006198] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.006288] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[2.006377] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.006468] (articubot_one) StdoutLine: {'line': b'3:         arguments=["diff_cont"],\n'}
[2.006599] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.006787] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[2.007030] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.007262] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[2.007482] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.007688] (articubot_one) StdoutLine: {'line': b'3:         arguments=["joint_broad"],\n'}
[2.007879] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.008086] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.008261] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.008417] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.008576] (articubot_one) StdoutLine: {'line': b'3:                                                                           ^\n'}
[2.008768] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.008975] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[2.009210] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.009662] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.009871] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[2.010081] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.010254] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[2.010417] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.010519] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_image",\n'}
[2.010616] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.010710] (articubot_one) StdoutLine: {'line': b'3:         executable="image_bridge",\n'}
[2.010803] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.010896] (articubot_one) StdoutLine: {'line': b'3:         arguments=["/camera/image_raw"]\n'}
[2.011045] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.011144] (articubot_one) StdoutLine: {'line': b"3:     # Code for delaying a node (I haven't tested how effective it is)\n"}
[2.011237] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.011327] (articubot_one) StdoutLine: {'line': b'3:     # \n'}
[2.011418] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[2.011581] (articubot_one) StdoutLine: {'line': b'3:     # Launch them all!\n'}
[2.011677] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.011768] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[2.011859] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.011950] (articubot_one) StdoutLine: {'line': b'3:     default_params_file = os.path.join(get_package_share_directory("articubot_one"),\n'}
[2.012083] (articubot_one) StdoutLine: {'line': b'3:                                                                    ^\n'}
[2.012177] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[2.012268] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.012357] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:3:1: I100 Import statements are in the wrong order. 'from launch.substitutions import LaunchConfiguration' should be before 'from launch_ros.actions import Node'\n"}
[2.012449] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.012538] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:4:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration'\n"}
[2.012631] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.012721] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:6:1: I100 Import statements are in the wrong order. 'import os' should be before 'from launch.actions import DeclareLaunchArgument' and in a different group.\n"}
[2.012815] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.012906] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:7:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[2.013011] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.013106] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:9:1: E302 expected 2 blank lines, found 1\n'}
[2.013197] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.013306] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:12:75: E231 missing whitespace after ','\n"}
[2.013398] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.013491] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:12:84: E231 missing whitespace after ','\n"}
[2.013596] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.013689] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:12:100: E501 line too long (100 > 99 characters)\n'}
[2.013784] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.013876] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:25:36: E231 missing whitespace after ','\n"}
[2.013987] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.014093] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:32:39: E231 missing whitespace after ','\n"}
[2.014186] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.014278] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:33:40: E231 missing whitespace after ','\n"}
[2.014370] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.014463] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:37:5: E303 too many blank lines (2)\n'}
[2.014561] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.014654] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:44:22: W291 trailing whitespace\n'}
[2.014747] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.014838] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:45:7: W292 no newline at end of file\n'}
[2.014931] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.015066] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:10:1: I100 Import statements are in the wrong order. 'from launch.actions import RegisterEventHandler' should be before 'from launch.substitutions import Command'\n"}
[2.015160] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.015247] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:17:1: E303 too many blank lines (3)\n'}
[2.015336] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.015425] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:20:5: E303 too many blank lines (2)\n'}
[2.015515] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.015603] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:20:100: E501 line too long (110 > 99 characters)\n'}
[2.015699] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.015787] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:23:17: E225 missing whitespace around operator\n'}
[2.015875] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.015970] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:23:33: E261 at least two spaces before inline comment\n'}
[2.016070] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.016160] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:23:34: E262 inline comment should start with '# '\n"}
[2.016250] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.016340] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:27:62: E231 missing whitespace after ','\n"}
[2.016430] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.016519] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:27:71: E231 missing whitespace after ','\n"}
[2.016607] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.016696] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:38:5: E303 too many blank lines (2)\n'}
[2.016784] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.016871] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:38:78: E231 missing whitespace after ','\n"}
[2.016965] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.017064] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:38:87: E231 missing whitespace after ','\n"}
[2.017156] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.017244] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:38:100: E501 line too long (104 > 99 characters)\n'}
[2.017334] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.017422] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:40:21: Q000 Double quotes found but single quotes preferred\n'}
[2.017511] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.017599] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:41:24: Q000 Double quotes found but single quotes preferred\n'}
[2.017687] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.017775] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:43:40: E231 missing whitespace after ','\n"}
[2.017864] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.017954] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:46:1: W293 blank line contains whitespace\n'}
[2.018073] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.018163] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:49:5: E303 too many blank lines (4)\n'}
[2.018253] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.018340] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:49:100: E501 line too long (104 > 99 characters)\n'}
[2.018428] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.018516] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:51:84: E231 missing whitespace after ','\n"}
[2.018604] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.018694] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:51:93: E231 missing whitespace after ','\n"}
[2.018784] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.018873] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:51:100: E501 line too long (115 > 99 characters)\n'}
[2.018971] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.019072] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:54:17: Q000 Double quotes found but single quotes preferred\n'}
[2.019163] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.019251] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:55:20: Q000 Double quotes found but single quotes preferred\n'}
[2.019339] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.019428] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:63:17: Q000 Double quotes found but single quotes preferred\n'}
[2.019527] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.019616] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:64:20: Q000 Double quotes found but single quotes preferred\n'}
[2.019705] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.019794] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:65:20: Q000 Double quotes found but single quotes preferred\n'}
[2.019883] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.019979] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:76:17: Q000 Double quotes found but single quotes preferred\n'}
[2.020078] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.020167] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:77:20: Q000 Double quotes found but single quotes preferred\n'}
[2.020256] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.020346] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:78:20: Q000 Double quotes found but single quotes preferred\n'}
[2.020435] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.020523] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:89:5: E303 too many blank lines (2)\n'}
[2.020612] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.020700] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:90:6: W291 trailing whitespace\n'}
[2.020822] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.020911] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:107:5: E303 too many blank lines (3)\n'}
[2.021015] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.021110] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[2.021201] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.021290] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:15:1: E303 too many blank lines (3)\n'}
[2.021379] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.021467] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:18:5: E303 too many blank lines (2)\n'}
[2.021561] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.021650] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:18:100: E501 line too long (110 > 99 characters)\n'}
[2.021738] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.021826] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:21:17: E225 missing whitespace around operator\n'}
[2.021914] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.022016] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:21:33: E261 at least two spaces before inline comment\n'}
[2.022113] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.022201] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:21:34: E262 inline comment should start with '# '\n"}
[2.022301] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.022390] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:25:62: E231 missing whitespace after ','\n"}
[2.022479] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.022566] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:25:71: E231 missing whitespace after ','\n"}
[2.022654] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.022742] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:31:62: E231 missing whitespace after ','\n"}
[2.022832] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.022921] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:31:71: E231 missing whitespace after ','\n"}
[2.023023] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.023117] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:35:78: E231 missing whitespace after ','\n"}
[2.023206] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.023293] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:35:87: E231 missing whitespace after ','\n"}
[2.023386] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.023474] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:35:100: E501 line too long (104 > 99 characters)\n'}
[2.023563] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.023651] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:37:21: Q000 Double quotes found but single quotes preferred\n'}
[2.023741] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.023829] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:38:24: Q000 Double quotes found but single quotes preferred\n'}
[2.023918] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.024023] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:40:40: E231 missing whitespace after ','\n"}
[2.024117] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.024205] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:44:5: E303 too many blank lines (2)\n'}
[2.024294] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.024383] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:48:10: W291 trailing whitespace\n'}
[2.024473] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.024562] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:49:1: W293 blank line contains whitespace\n'}
[2.024652] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.024741] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:62:21: E131 continuation line unaligned for hanging indent\n'}
[2.024830] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.024919] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:62:100: E501 line too long (104 > 99 characters)\n'}
[2.025020] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.025113] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:65:100: E501 line too long (126 > 99 characters)\n'}
[2.025203] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.025292] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:73:5: E303 too many blank lines (2)\n'}
[2.025382] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.025469] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:74:17: Q000 Double quotes found but single quotes preferred\n'}
[2.025559] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.025647] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:75:20: Q000 Double quotes found but single quotes preferred\n'}
[2.025735] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.025822] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:76:20: Q000 Double quotes found but single quotes preferred\n'}
[2.025910] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.026015] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:80:17: Q000 Double quotes found but single quotes preferred\n'}
[2.026110] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.026199] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:81:20: Q000 Double quotes found but single quotes preferred\n'}
[2.026287] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.026375] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:82:20: Q000 Double quotes found but single quotes preferred\n'}
[2.026463] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.026551] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:86:5: E303 too many blank lines (2)\n'}
[2.026639] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.026726] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:86:75: E231 missing whitespace after ','\n"}
[2.026816] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.026905] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:86:84: E231 missing whitespace after ','\n"}
[2.027007] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.027101] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:86:100: E501 line too long (101 > 99 characters)\n'}
[2.027197] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.027285] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:88:17: Q000 Double quotes found but single quotes preferred\n'}
[2.027374] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.027462] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:89:20: Q000 Double quotes found but single quotes preferred\n'}
[2.027550] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.027638] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:98:17: Q000 Double quotes found but single quotes preferred\n'}
[2.027727] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.027815] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:99:20: Q000 Double quotes found but single quotes preferred\n'}
[2.027905] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.028004] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:100:20: Q000 Double quotes found but single quotes preferred\n'}
[2.028104] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.028193] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:105:5: E303 too many blank lines (3)\n'}
[2.028281] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.028370] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:106:6: W291 trailing whitespace\n'}
[2.028459] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.028546] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:123:5: E303 too many blank lines (3)\n'}
[2.028641] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.028731] (articubot_one) StdoutLine: {'line': b"3: ./launch/online_async_launch.py:8:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'from launch_ros.actions import Node'\n"}
[2.028824] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.028912] (articubot_one) StdoutLine: {'line': b'3: ./launch/online_async_launch.py:15:68: Q000 Double quotes found but single quotes preferred\n'}
[2.029037] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.029133] (articubot_one) StdoutLine: {'line': b"3: ./launch/rplidar.launch.py:1:1: F401 'os' imported but unused\n"}
[2.029224] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.029313] (articubot_one) StdoutLine: {'line': b"3: ./launch/rplidar.launch.py:2:1: I201 Missing newline between import groups. 'from launch import LaunchDescription' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[2.029406] (articubot_one) StdoutLine: {'line': b'3: from launch import LaunchDescription\n'}
[2.029497] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.029587] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[2.029676] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.029765] (articubot_one) StdoutLine: {'line': b"3:                 'serial_port': '/dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.3:1.0-port0',\n"}
[2.029856] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.029945] (articubot_one) StdoutLine: {'line': b'3: from launch.substitutions import LaunchConfiguration, Command\n'}
[2.030081] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.030173] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[2.030264] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.030354] (articubot_one) StdoutLine: {'line': b'3: import xacro\n'}
[2.030443] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.030533] (articubot_one) StdoutLine: {'line': b"3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')\n"}
[2.030635] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[2.030726] (articubot_one) StdoutLine: {'line': b"3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')\n"}
[2.030822] (articubot_one) StdoutLine: {'line': b'3:                                                     ^\n'}
[2.030914] (articubot_one) StdoutLine: {'line': b"3:     robot_description_config = Command(['xacro ', xacro_file, ' use_ros2_control:=', use_ros2_control, ' sim_mode:=', use_sim_time])\n"}
[2.031019] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.031115] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[2.031206] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.031297] (articubot_one) StdoutLine: {'line': b'3:     # Launch!\n'}
[2.031387] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.031477] (articubot_one) StdoutLine: {'line': b'3: import xacro\n'}
[2.031566] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.031655] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[2.031745] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.031835] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument\n'}
[2.031926] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.032031] (articubot_one) StdoutLine: {'line': b'3: from launch.conditions import IfCondition, UnlessCondition\n'}
[2.032124] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.032214] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[2.032305] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.032393] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[2.032482] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.032572] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.032661] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.032751] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.032842] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[2.032932] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.033035] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[2.033128] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[2.033218] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[2.033308] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[2.033398] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[2.033489] (articubot_one) StdoutLine: {'line': b'3:         )    \n'}
[2.033578] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[2.033668] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[2.033756] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.033845] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[2.033935] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[2.034043] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[2.034136] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.034226] (articubot_one) StdoutLine: {'line': b"3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.\n"}
[2.034331] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.034421] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.034509] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.034599] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[2.034688] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[2.034787] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[2.034877] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[2.034975] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[2.035075] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[2.035165] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[2.035255] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[2.035345] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[2.035434] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.035524] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.035613] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.035702] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.035792] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[2.035882] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[2.035980] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[2.036082] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[2.036173] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[2.036265] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[2.036356] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[2.036447] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[2.036537] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[2.036627] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.036718] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.036809] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.036901] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.037036] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[2.037135] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[2.037224] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[2.037314] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[2.037403] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[2.037493] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[2.037583] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[2.037673] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[2.037762] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[2.037851] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.037939] (articubot_one) StdoutLine: {'line': b'3:        \n'}
[2.038042] (articubot_one) StdoutLine: {'line': b'3:                                                                                            ^\n'}
[2.038134] (articubot_one) StdoutLine: {'line': b"3:     package='ros_gz_bridge',\n"}
[2.038223] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.038312] (articubot_one) StdoutLine: {'line': b"3:     executable='parameter_bridge',\n"}
[2.038402] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.038492] (articubot_one) StdoutLine: {'line': b'3:     arguments=[\n'}
[2.038581] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.038672] (articubot_one) StdoutLine: {'line': b"3:           '/odom@nav_msgs/msg/Odometry@gz.msgs.Odometry',\n"}
[2.038773] (articubot_one) StdoutLine: {'line': b'3:           ^\n'}
[2.038863] (articubot_one) StdoutLine: {'line': b"3:          '/scan@sensor_msgs/msg/LaserScan@gz.msgs.LaserScan',\n"}
[2.038952] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[2.039056] (articubot_one) StdoutLine: {'line': b"3:     output='screen'\n"}
[2.039149] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.039242] (articubot_one) StdoutLine: {'line': b'3: )\n'}
[2.039332] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.039422] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_image",\n'}
[2.039513] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.039602] (articubot_one) StdoutLine: {'line': b'3:         executable="image_bridge",\n'}
[2.039692] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.039780] (articubot_one) StdoutLine: {'line': b'3:         arguments=["/camera/image_raw"]\n'}
[2.039870] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.039966] (articubot_one) StdoutLine: {'line': b'3:     #Adding rviz plugin\n'}
[2.040068] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.040159] (articubot_one) StdoutLine: {'line': b"3:     share_dir=get_package_share_directory('articubot_one')\n"}
[2.040259] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[2.040350] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[2.040441] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.040530] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[2.040619] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.040708] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[2.040798] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.040886] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[2.040985] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.041082] (articubot_one) StdoutLine: {'line': b'3: from sensor_msgs.msg import LaserScan\n'}
[2.041173] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.041263] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[2.041351] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.041440] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[2.041529] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.041618] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[2.041708] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[2.041798] (articubot_one) StdoutLine: {'line': b'3: from articubot_one.obstacle_avoidance import Obstacle \n'}
[2.041887] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.041986] (articubot_one) StdoutLine: {'line': b'3: from articubot_one.obstacle_avoidance import Obstacle \n'}
[2.042084] (articubot_one) StdoutLine: {'line': b'3:                                                      ^\n'}
[2.042174] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[2.042264] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.042353] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[2.042443] (articubot_one) StdoutLine: {'line': b'3:        ^\n'}
[2.042559] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[2.042714] (articubot_one) StdoutLine: {'line': b'3:             ^\n'}
[2.042872] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[2.043053] (articubot_one) StdoutLine: {'line': b'3:                               ^\n'}
[2.043222] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[2.043383] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[2.043542] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[2.043708] (articubot_one) StdoutLine: {'line': b'3:                            ^\n'}
[2.043886] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[2.044116] (articubot_one) StdoutLine: {'line': b'3:                                                                          ^\n'}
[2.044314] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[2.044488] (articubot_one) StdoutLine: {'line': b'3:                            ^\n'}
[2.044588] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[2.044684] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[2.044775] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[2.044866] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.044957] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[2.045081] (articubot_one) StdoutLine: {'line': b'3:        ^\n'}
[2.045172] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[2.045262] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[2.045352] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[2.045443] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.045547] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[2.045708] (articubot_one) StdoutLine: {'line': b'3:        ^\n'}
[2.045885] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[2.046072] (articubot_one) StdoutLine: {'line': b'3:             ^\n'}
[2.046266] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[2.046371] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[2.046464] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[2.046567] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[2.046661] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[2.046754] (articubot_one) StdoutLine: {'line': b'3:                   ^\n'}
[2.046848] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[2.046941] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[2.047056] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[2.047150] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[2.047240] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[2.047330] (articubot_one) StdoutLine: {'line': b'3:                                      ^\n'}
[2.047420] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[2.047512] (articubot_one) StdoutLine: {'line': b'3:                           ^\n'}
[2.047603] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[2.047695] (articubot_one) StdoutLine: {'line': b'3:                                               ^\n'}
[2.047785] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[2.047877] (articubot_one) StdoutLine: {'line': b'3:                                                    ^\n'}
[2.047978] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[2.048082] (articubot_one) StdoutLine: {'line': b'3:                                                             ^\n'}
[2.048176] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.048270] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[2.048362] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.048453] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[2.048544] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.048635] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[2.048732] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.048823] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[2.048913] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.049027] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[2.049123] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[2.049215] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[2.049307] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[2.049398] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[2.049487] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[2.049578] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[2.049668] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[2.049759] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[2.049848] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[2.049937] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[2.050048] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[2.050142] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[2.050234] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[2.050325] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[2.050415] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[2.050516] (articubot_one) StdoutLine: {'line': b'3:                                                    ^\n'}
[2.050606] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[2.050695] (articubot_one) StdoutLine: {'line': b'3:                                                     ^\n'}
[2.050784] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[2.050875] (articubot_one) StdoutLine: {'line': b'3:                                                               ^\n'}
[2.050978] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[2.051083] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[2.051174] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.051264] (articubot_one) StdoutLine: {'line': b'3: ./launch/rplidar.launch.py:5:1: E302 expected 2 blank lines, found 1\n'}
[2.051355] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.051444] (articubot_one) StdoutLine: {'line': b'3: ./launch/rplidar.launch.py:14:100: E501 line too long (113 > 99 characters)\n'}
[2.051533] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.051622] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:6:1: I101 Imported names are in the wrong order. Should be Command, LaunchConfiguration\n'}
[2.051713] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.051804] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:7:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration, Command'\n"}
[2.051902] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.052012] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:10:1: F401 'xacro' imported but unused\n"}
[2.052109] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.052199] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:21:39: E231 missing whitespace after ','\n"}
[2.052288] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.052377] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:21:53: E231 missing whitespace after ','\n"}
[2.052467] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.052555] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:23:100: E501 line too long (132 > 99 characters)\n'}
[2.052646] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.052736] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:24:1: W293 blank line contains whitespace\n'}
[2.052826] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.052916] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:35:5: E303 too many blank lines (2)\n'}
[2.053019] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.053112] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:2:1: I201 Missing newline between import groups. 'import xacro' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[2.053203] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.053292] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:3:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'import xacro'\n"}
[2.053384] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.053475] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[2.053566] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.053655] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:12:1: I100 Import statements are in the wrong order. 'from launch.conditions import IfCondition, UnlessCondition' should be before 'from launch_ros.actions import Node'\n"}
[2.053746] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.053834] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:18:5: E303 too many blank lines (2)\n'}
[2.053924] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.054027] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:18:100: E501 line too long (110 > 99 characters)\n'}
[2.054121] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.054210] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:21:17: E225 missing whitespace around operator\n'}
[2.054301] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.054389] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:21:33: E261 at least two spaces before inline comment\n'}
[2.054480] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.054570] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:21:34: E262 inline comment should start with '# '\n"}
[2.054661] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.054750] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:25:62: E231 missing whitespace after ','\n"}
[2.054840] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.054929] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:25:71: E231 missing whitespace after ','\n"}
[2.055033] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.055126] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:33:10: W291 trailing whitespace\n'}
[2.055215] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.055304] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:34:1: W293 blank line contains whitespace\n'}
[2.055394] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.055482] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:47:21: E131 continuation line unaligned for hanging indent\n'}
[2.055581] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.055669] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:47:100: E501 line too long (104 > 99 characters)\n'}
[2.055757] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.055846] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:50:100: E501 line too long (126 > 99 characters)\n'}
[2.055936] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.056040] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:58:5: Q001 Single quote multiline found but double quotes preferred\n'}
[2.056133] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.056222] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:58:5: E303 too many blank lines (2)\n'}
[2.056311] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.056399] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:59:100: E501 line too long (101 > 99 characters)\n'}
[2.056487] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.056576] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:72:5: E122 continuation line missing indentation or outdented\n'}
[2.056667] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.056757] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:73:5: E122 continuation line missing indentation or outdented\n'}
[2.056847] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.056937] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:74:5: E122 continuation line missing indentation or outdented\n'}
[2.057046] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.057139] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:77:11: E131 continuation line unaligned for hanging indent\n'}
[2.057228] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.057317] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:78:10: E131 continuation line unaligned for hanging indent\n'}
[2.057407] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.057496] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:81:5: E122 continuation line missing indentation or outdented\n'}
[2.057586] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.057675] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:82:1: E122 continuation line missing indentation or outdented\n'}
[2.057766] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.057855] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:85:17: Q000 Double quotes found but single quotes preferred\n'}
[2.057956] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.058064] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:86:20: Q000 Double quotes found but single quotes preferred\n'}
[2.058155] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.058244] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:87:20: Q000 Double quotes found but single quotes preferred\n'}
[2.058335] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.058425] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:89:5: E265 block comment should start with '# '\n"}
[2.058520] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.058611] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:90:14: E225 missing whitespace around operator\n'}
[2.058701] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.058790] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:96:1: W293 blank line contains whitespace\n'}
[2.058880] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.058977] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:136:1: W293 blank line contains whitespace\n'}
[2.059077] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.059168] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:140:1: W293 blank line contains whitespace\n'}
[2.059260] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.059351] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:144:1: W293 blank line contains whitespace\n'}
[2.059448] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.059537] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:5:1: F401 'sensor_msgs.msg.LaserScan' imported but unused\n"}
[2.059627] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.059716] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:6:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[2.059807] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.059896] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:6:1: F401 'geometry_msgs.msg.Twist' imported but unused\n"}
[2.059997] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.060094] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:6:36: W291 trailing whitespace\n'}
[2.060185] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.060274] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:8:1: I100 Import statements are in the wrong order. 'from articubot_one.obstacle_avoidance import Obstacle' should be before 'from geometry_msgs.msg import Twist'\n"}
[2.060365] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.060454] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:8:54: W291 trailing whitespace\n'}
[2.060543] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.060632] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:10:1: E302 expected 2 blank lines, found 1\n'}
[2.060721] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.060811] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:12:8: E203 whitespace before ':'\n"}
[2.060902] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.061006] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:13:13: E225 missing whitespace around operator\n'}
[2.061104] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.061194] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:15:31: E225 missing whitespace around operator\n'}
[2.061283] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.061372] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:15:33: Q000 Double quotes found but single quotes preferred\n'}
[2.061462] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.061552] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:17:28: E231 missing whitespace after ','\n"}
[2.061642] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.061732] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:19:74: W291 trailing whitespace\n'}
[2.061821] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.061910] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:20:28: E231 missing whitespace after ','\n"}
[2.062013] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.062106] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:22:12: E203 whitespace before ':'\n"}
[2.062195] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.062283] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:24:1: E302 expected 2 blank lines, found 0\n'}
[2.062373] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.062463] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:26:8: E203 whitespace before ':'\n"}
[2.062553] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.062643] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:28:12: E203 whitespace before ':'\n"}
[2.062734] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.062824] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:30:1: E302 expected 2 blank lines, found 0\n'}
[2.062914] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.063016] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:32:8: E203 whitespace before ':'\n"}
[2.063117] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.063207] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:33:13: E225 missing whitespace around operator\n'}
[2.063297] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.063386] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:34:9: E265 block comment should start with '# '\n"}
[2.063476] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.063565] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:35:18: E225 missing whitespace around operator\n'}
[2.063655] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.063743] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:36:19: E225 missing whitespace around operator\n'}
[2.063832] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.063920] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:36:39: Q000 Double quotes found but single quotes preferred\n'}
[2.064021] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.064114] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:18: E225 missing whitespace around operator\n'}
[2.064203] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.064291] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:38: Q000 Double quotes found but single quotes preferred\n'}
[2.064381] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.064470] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:38:27: E225 missing whitespace around operator\n'}
[2.064558] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.064646] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:38:47: Q000 Double quotes found but single quotes preferred\n'}
[2.064733] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.064821] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:39:52: W291 trailing whitespace\n'}
[2.064910] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.065016] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:40:61: W291 trailing whitespace\n'}
[2.065112] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.065201] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:41:36: E231 missing whitespace after ','\n"}
[2.065296] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.065387] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:41:43: E203 whitespace before ','\n"}
[2.065477] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.065564] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:41:44: E231 missing whitespace after ','\n"}
[2.065652] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.065742] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:41:45: Q000 Double quotes found but single quotes preferred\n'}
[2.065862] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.065951] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:41:45: F541 f-string is missing placeholders\n'}
[2.066058] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.066150] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:42:37: E231 missing whitespace after ','\n"}
[2.066251] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.066339] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:42:44: Q000 Double quotes found but single quotes preferred\n'}
[2.066428] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.066516] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:42:44: F541 f-string is missing placeholders\n'}
[2.066606] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.066695] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:43:36: E231 missing whitespace after ','\n"}
[2.066785] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.066880] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:43:43: Q000 Double quotes found but single quotes preferred\n'}
[2.066978] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.067078] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:43:43: F541 f-string is missing placeholders\n'}
[2.067169] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.067258] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:44:45: E231 missing whitespace after ','\n"}
[2.067347] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.067436] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:44:52: E231 missing whitespace after ','\n"}
[2.067525] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.067614] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:44:53: F541 f-string is missing placeholders\n'}
[2.067704] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.067793] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:45:63: W291 trailing whitespace\n'}
[2.067882] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.067978] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:47:26: E225 missing whitespace around operator\n'}
[2.068076] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.068166] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[2.068256] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[2.068347] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[2.068437] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[2.068527] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[2.068616] (articubot_one) StdoutLine: {'line': b'3:                                          ^\n'}
[2.068705] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[2.068794] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[2.068883] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[2.068981] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[2.069081] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[2.069173] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[2.069263] (articubot_one) StdoutLine: {'line': b'3: 7     E111 indentation is not a multiple of 4\n'}
[2.069355] (articubot_one) StdoutLine: {'line': b'3: 1     E114 indentation is not a multiple of 4 (comment)\n'}
[2.069445] (articubot_one) StdoutLine: {'line': b'3: 2     E117 over-indented (comment)\n'}
[2.069534] (articubot_one) StdoutLine: {'line': b'3: 6     E122 continuation line missing indentation or outdented\n'}
[2.069624] (articubot_one) StdoutLine: {'line': b'3: 3     E128 continuation line under-indented for visual indent\n'}
[2.069713] (articubot_one) StdoutLine: {'line': b'3: 5     E131 continuation line unaligned for hanging indent\n'}
[2.069803] (articubot_one) StdoutLine: {'line': b"3: 11    E203 whitespace before ':'\n"}
[2.069892] (articubot_one) StdoutLine: {'line': b'3: 18    E225 missing whitespace around operator\n'}
[2.069993] (articubot_one) StdoutLine: {'line': b"3: 44    E231 missing whitespace after ','\n"}
[2.070092] (articubot_one) StdoutLine: {'line': b'3: 4     E261 at least two spaces before inline comment\n'}
[2.070183] (articubot_one) StdoutLine: {'line': b"3: 3     E262 inline comment should start with '# '\n"}
[2.070272] (articubot_one) StdoutLine: {'line': b"3: 6     E265 block comment should start with '# '\n"}
[2.070361] (articubot_one) StdoutLine: {'line': b'3: 1     E275 missing whitespace after keyword\n'}
[2.070450] (articubot_one) StdoutLine: {'line': b'3: 7     E302 expected 2 blank lines, found 1\n'}
[2.070538] (articubot_one) StdoutLine: {'line': b'3: 19    E303 too many blank lines (2)\n'}
[2.070626] (articubot_one) StdoutLine: {'line': b'3: 1     E305 expected 2 blank lines after class or function definition, found 1\n'}
[2.070725] (articubot_one) StdoutLine: {'line': b'3: 30    E501 line too long (110 > 99 characters)\n'}
[2.070818] (articubot_one) StdoutLine: {'line': b"3: 5     F401 'os' imported but unused\n"}
[2.070911] (articubot_one) StdoutLine: {'line': b'3: 5     F541 f-string is missing placeholders\n'}
[2.071017] (articubot_one) StdoutLine: {'line': b"3: 13    I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[2.071116] (articubot_one) StdoutLine: {'line': b'3: 3     I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[2.071208] (articubot_one) StdoutLine: {'line': b"3: 5     I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.\n"}
[2.071299] (articubot_one) StdoutLine: {'line': b'3: 45    Q000 Double quotes found but single quotes preferred\n'}
[2.071388] (articubot_one) StdoutLine: {'line': b'3: 1     Q001 Single quote multiline found but double quotes preferred\n'}
[2.071479] (articubot_one) StdoutLine: {'line': b'3: 22    W291 trailing whitespace\n'}
[2.071570] (articubot_one) StdoutLine: {'line': b'3: 1     W292 no newline at end of file\n'}
[2.071661] (articubot_one) StdoutLine: {'line': b'3: 14    W293 blank line contains whitespace\n'}
[2.071752] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:47:29: Q000 Double quotes found but single quotes preferred\n'}
[2.071848] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.071940] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:48:29: Q000 Double quotes found but single quotes preferred\n'}
[2.072046] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.072139] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:49:42: W291 trailing whitespace\n'}
[2.072229] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.072318] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:50:12: E203 whitespace before ':'\n"}
[2.072408] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.072498] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:54:12: E225 missing whitespace around operator\n'}
[2.072589] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.072680] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:54:24: E203 whitespace before ':'\n"}
[2.072770] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.072859] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.072993] (articubot_one) StdoutLine: {'line': b'3: 15 files checked\n'}
[2.073091] (articubot_one) StdoutLine: {'line': b'3: 282 errors\n'}
[2.073181] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.073269] (articubot_one) StdoutLine: {'line': b"3: 'E'-type errors: 168\n"}
[2.073358] (articubot_one) StdoutLine: {'line': b"3: 'F'-type errors: 10\n"}
[2.073450] (articubot_one) StdoutLine: {'line': b"3: 'I'-type errors: 21\n"}
[2.073539] (articubot_one) StdoutLine: {'line': b"3: 'Q'-type errors: 46\n"}
[2.073629] (articubot_one) StdoutLine: {'line': b"3: 'W'-type errors: 37\n"}
[2.073720] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.073812] (articubot_one) StdoutLine: {'line': b'3: Checked files:\n'}
[2.073901] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.074003] (articubot_one) StdoutLine: {'line': b'3: * ./setup.py\n'}
[2.074101] (articubot_one) StdoutLine: {'line': b'3: * ./test/pytest/test_laserObstacle.py\n'}
[2.074193] (articubot_one) StdoutLine: {'line': b'3: * ./articubot_one/obstacle_avoidance.py\n'}
[2.074284] (articubot_one) StdoutLine: {'line': b'3: * ./articubot_one/__init__.py\n'}
[2.074375] (articubot_one) StdoutLine: {'line': b'3: * ./launch/joystick.launch.py\n'}
[2.074465] (articubot_one) StdoutLine: {'line': b'3: * ./launch/online_async_launch.py\n'}
[2.074553] (articubot_one) StdoutLine: {'line': b'3: * ./launch/ball_tracker.launch.py\n'}
[2.074642] (articubot_one) StdoutLine: {'line': b'3: * ./launch/localization_launch.py\n'}
[2.074739] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rviz_gazebo.launch.py\n'}
[2.074828] (articubot_one) StdoutLine: {'line': b'3: * ./launch/navigation_launch.py\n'}
[2.074919] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rsp.launch.py\n'}
[2.075023] (articubot_one) StdoutLine: {'line': b'3: * ./launch/launch_robot.launch.py\n'}
[2.075120] (articubot_one) StdoutLine: {'line': b'3: * ./launch/camera.launch.py\n'}
[2.075223] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rplidar.launch.py\n'}
[2.075314] (articubot_one) StdoutLine: {'line': b'3: * ./launch/launch_sim.launch.py\n'}
[2.075403] (articubot_one) StdoutLine: {'line': b'3: -- run_test.py: return code 1\n'}
[2.075493] (articubot_one) StdoutLine: {'line': b"3: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml'\n"}
[2.075583] (articubot_one) StdoutLine: {'line': b'3/6 Test #3: flake8 ...........................***Failed    0.56 sec\n'}
[2.075672] (articubot_one) StdoutLine: {'line': b'test 4\n'}
[2.075762] (articubot_one) StdoutLine: {'line': b'    Start 4: lint_cmake\n'}
[2.075851] (articubot_one) StdoutLine: {'line': b'\n'}
[2.075943] (articubot_one) StdoutLine: {'line': b'4: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/jazzy/bin/ament_lint_cmake" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml"\n'}
[2.076054] (articubot_one) StdoutLine: {'line': b'4: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[2.076147] (articubot_one) StdoutLine: {'line': b'4: Test timeout computed to be: 60\n'}
[2.085034] (articubot_one) StdoutLine: {'line': b"4: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[2.085251] (articubot_one) StdoutLine: {'line': b'4:  - /opt/ros/jazzy/bin/ament_lint_cmake --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml\n'}
[2.104450] (-) TimerEvent: {}
[2.179770] (articubot_one) StdoutLine: {'line': b'4: CMakeLists.txt:40: Line ends in whitespace [whitespace/eol]\n'}
[2.180006] (articubot_one) StdoutLine: {'line': b'4: CMakeLists.txt:55: Line ends in whitespace [whitespace/eol]\n'}
[2.180118] (articubot_one) StdoutLine: {'line': b'4: \n'}
[2.180210] (articubot_one) StdoutLine: {'line': b'4: \n'}
[2.180297] (articubot_one) StdoutLine: {'line': b'4: 2 errors\n'}
[2.194523] (articubot_one) StdoutLine: {'line': b'4: -- run_test.py: return code 1\n'}
[2.194812] (articubot_one) StdoutLine: {'line': b"4: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml'\n"}
[2.204584] (-) TimerEvent: {}
[2.206004] (articubot_one) StdoutLine: {'line': b'4/6 Test #4: lint_cmake .......................***Failed    0.21 sec\n'}
[2.206366] (articubot_one) StdoutLine: {'line': b'test 5\n'}
[2.206648] (articubot_one) StdoutLine: {'line': b'    Start 5: pep257\n'}
[2.206925] (articubot_one) StdoutLine: {'line': b'\n'}
[2.207069] (articubot_one) StdoutLine: {'line': b'5: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_pep257/pep257.txt" "--command" "/opt/ros/jazzy/bin/ament_pep257" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml"\n'}
[2.207175] (articubot_one) StdoutLine: {'line': b'5: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[2.207264] (articubot_one) StdoutLine: {'line': b'5: Test timeout computed to be: 60\n'}
[2.283414] (articubot_one) StdoutLine: {'line': b"5: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[2.283694] (articubot_one) StdoutLine: {'line': b'5:  - /opt/ros/jazzy/bin/ament_pep257 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml\n'}
[2.304715] (-) TimerEvent: {}
[2.404992] (-) TimerEvent: {}
[2.467347] (articubot_one) StdoutLine: {'line': b'5: checking ./articubot_one/__init__.py\n'}
[2.467561] (articubot_one) StdoutLine: {'line': b'5: checking ./articubot_one/obstacle_avoidance.py\n'}
[2.467865] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/ball_tracker.launch.py\n'}
[2.468055] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/camera.launch.py\n'}
[2.468185] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/joystick.launch.py\n'}
[2.468274] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/launch_robot.launch.py\n'}
[2.468360] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/launch_sim.launch.py\n'}
[2.468443] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/localization_launch.py\n'}
[2.468525] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/navigation_launch.py\n'}
[2.468606] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/online_async_launch.py\n'}
[2.468698] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rplidar.launch.py\n'}
[2.468777] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rsp.launch.py\n'}
[2.468855] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rviz_gazebo.launch.py\n'}
[2.468933] (articubot_one) StdoutLine: {'line': b'5: checking ./setup.py\n'}
[2.469025] (articubot_one) StdoutLine: {'line': b'5: checking ./test/pytest/test_laserObstacle.py\n'}
[2.469107] (articubot_one) StdoutLine: {'line': b'5: No problems found\n'}
[2.493314] (articubot_one) StdoutLine: {'line': b'5: -- run_test.py: return code 0\n'}
[2.493620] (articubot_one) StdoutLine: {'line': b"5: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml'\n"}
[2.504772] (articubot_one) StdoutLine: {'line': b'5/6 Test #5: pep257 ...........................   Passed    0.30 sec\n'}
[2.505066] (-) TimerEvent: {}
[2.505164] (articubot_one) StdoutLine: {'line': b'test 6\n'}
[2.505323] (articubot_one) StdoutLine: {'line': b'    Start 6: xmllint\n'}
[2.505510] (articubot_one) StdoutLine: {'line': b'\n'}
[2.505694] (articubot_one) StdoutLine: {'line': b'6: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_xmllint/xmllint.txt" "--command" "/opt/ros/jazzy/bin/ament_xmllint" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml"\n'}
[2.505887] (articubot_one) StdoutLine: {'line': b'6: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[2.506106] (articubot_one) StdoutLine: {'line': b'6: Test timeout computed to be: 60\n'}
[2.581277] (articubot_one) StdoutLine: {'line': b"6: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[2.581458] (articubot_one) StdoutLine: {'line': b'6:  - /opt/ros/jazzy/bin/ament_xmllint --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml\n'}
[2.605181] (-) TimerEvent: {}
[2.705621] (-) TimerEvent: {}
[2.806019] (-) TimerEvent: {}
[2.906661] (-) TimerEvent: {}
[3.007319] (-) TimerEvent: {}
[3.107937] (-) TimerEvent: {}
[3.208856] (-) TimerEvent: {}
[3.309719] (-) TimerEvent: {}
[3.410408] (-) TimerEvent: {}
[3.511293] (-) TimerEvent: {}
[3.612207] (-) TimerEvent: {}
[3.713098] (-) TimerEvent: {}
[3.814064] (-) TimerEvent: {}
[3.914938] (-) TimerEvent: {}
[4.015868] (-) TimerEvent: {}
[4.116851] (-) TimerEvent: {}
[4.217528] (-) TimerEvent: {}
[4.318145] (-) TimerEvent: {}
[4.352583] (articubot_one) StdoutLine: {'line': b"6: File 'package.xml' is valid\n"}
[4.353219] (articubot_one) StdoutLine: {'line': b'6: \n'}
[4.353582] (articubot_one) StdoutLine: {'line': b'6: No problems found\n'}
[4.403170] (articubot_one) StdoutLine: {'line': b'6: -- run_test.py: return code 0\n'}
[4.404139] (articubot_one) StdoutLine: {'line': b"6: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml'\n"}
[4.418366] (-) TimerEvent: {}
[4.442939] (articubot_one) StdoutLine: {'line': b'6/6 Test #6: xmllint ..........................   Passed    1.94 sec\n'}
[4.444331] (articubot_one) StdoutLine: {'line': b'\n'}
[4.445143] (articubot_one) StdoutLine: {'line': b'33% tests passed\x1b[0;0m, \x1b[0;31m4 tests failed\x1b[0;0m out of 6\n'}
[4.445901] (articubot_one) StdoutLine: {'line': b'\n'}
[4.446667] (articubot_one) StdoutLine: {'line': b'Label Time Summary:\n'}
[4.447439] (articubot_one) StdoutLine: {'line': b'copyright     =   0.42 sec*proc (1 test)\n'}
[4.448551] (articubot_one) StdoutLine: {'line': b'flake8        =   0.56 sec*proc (1 test)\n'}
[4.449335] (articubot_one) StdoutLine: {'line': b'lint_cmake    =   0.21 sec*proc (1 test)\n'}
[4.450053] (articubot_one) StdoutLine: {'line': b'linter        =   3.43 sec*proc (5 tests)\n'}
[4.450767] (articubot_one) StdoutLine: {'line': b'pep257        =   0.30 sec*proc (1 test)\n'}
[4.451422] (articubot_one) StdoutLine: {'line': b'pytest        =   0.97 sec*proc (1 test)\n'}
[4.451757] (articubot_one) StdoutLine: {'line': b'xmllint       =   1.94 sec*proc (1 test)\n'}
[4.452132] (articubot_one) StdoutLine: {'line': b'\n'}
[4.452465] (articubot_one) StdoutLine: {'line': b'Total Test time (real) =   4.40 sec\n'}
[4.452800] (articubot_one) StdoutLine: {'line': b'\n'}
[4.453157] (articubot_one) StdoutLine: {'line': b'The following tests FAILED:\n'}
[4.453474] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  1 - laser_obstacle_test (Failed)\x1b[0;0m\n'}
[4.453807] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  2 - copyright (Failed)\x1b[0;0m\n'}
[4.454157] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  3 - flake8 (Failed)\x1b[0;0m\n'}
[4.454470] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  4 - lint_cmake (Failed)\x1b[0;0m\n'}
[4.458428] (articubot_one) StderrLine: {'line': b'Errors while running CTest\n'}
[4.459396] (articubot_one) StderrLine: {'line': b'Output from these tests are in: /home/jonatan/ros2_ws/build/articubot_one/Testing/Temporary/LastTest.log\n'}
[4.460139] (articubot_one) StderrLine: {'line': b'Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.\n'}
[4.465846] (articubot_one) CommandEnded: {'returncode': 8}
[4.467327] (articubot_one) TestFailure: {'identifier': 'articubot_one'}
[4.467440] (articubot_one) JobEnded: {'identifier': 'articubot_one', 'rc': 0}
[4.471120] (-) EventReactorShutdown: {}
