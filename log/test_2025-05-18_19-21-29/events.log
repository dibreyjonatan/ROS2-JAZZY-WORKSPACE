[0.000000] (-) TimerEvent: {}
[0.000429] (articubot_one) JobQueued: {'identifier': 'articubot_one', 'dependencies': OrderedDict({'articubot_one': '/home/jonatan/ros2_ws/install/articubot_one'})}
[0.000543] (articubot_one) JobStarted: {'identifier': 'articubot_one'}
[0.032436] (articubot_one) Command: {'cmd': ['/usr/bin/ctest', '-C', 'Release', '-D', 'ExperimentalTest', '--no-compress-output', '-V', '--force-new-ctest-process'], 'cwd': '/home/jonatan/ros2_ws/build/articubot_one', 'env': OrderedDict({'GJS_DEBUG_TOPICS': 'JS ERROR;JS LOG', 'XDG_ACTIVATION_TOKEN': '2ddf9c17-5cf4-48ad-bc40-f39f8ecbfeb7', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'jonatan', 'GZ_CONFIG_PATH': '/opt/ros/jazzy/opt/gz_sim_vendor/share/gz:/opt/ros/jazzy/opt/sdformat_vendor/share/gz:/opt/ros/jazzy/opt/gz_gui_vendor/share/gz:/opt/ros/jazzy/opt/gz_transport_vendor/share/gz:/opt/ros/jazzy/opt/gz_rendering_vendor/share/gz:/opt/ros/jazzy/opt/gz_plugin_vendor/share/gz:/opt/ros/jazzy/opt/gz_fuel_tools_vendor/share/gz:/opt/ros/jazzy/opt/gz_msgs_vendor/share/gz:/opt/ros/jazzy/opt/gz_common_vendor/share/gz', 'XDG_SESSION_TYPE': 'wayland', 'CLUTTER_DISABLE_MIPMAPPED_TEXT': '1', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/opt/ros/jazzy/opt/gz_sim_vendor/lib:/opt/ros/jazzy/opt/gz_sensors_vendor/lib:/opt/ros/jazzy/opt/gz_physics_vendor/lib:/opt/ros/jazzy/opt/sdformat_vendor/lib:/opt/ros/jazzy/opt/rviz_ogre_vendor/lib:/opt/ros/jazzy/lib/x86_64-linux-gnu:/opt/ros/jazzy/opt/gz_gui_vendor/lib:/opt/ros/jazzy/opt/gz_transport_vendor/lib:/opt/ros/jazzy/opt/gz_rendering_vendor/lib:/opt/ros/jazzy/opt/gz_plugin_vendor/lib:/opt/ros/jazzy/opt/gz_fuel_tools_vendor/lib:/opt/ros/jazzy/opt/gz_msgs_vendor/lib:/opt/ros/jazzy/opt/gz_common_vendor/lib:/opt/ros/jazzy/opt/gz_math_vendor/lib:/opt/ros/jazzy/opt/gz_utils_vendor/lib:/opt/ros/jazzy/opt/gz_tools_vendor/lib:/opt/ros/jazzy/opt/gz_ogre_next_vendor/lib:/opt/ros/jazzy/opt/gz_dartsim_vendor/lib:/opt/ros/jazzy/opt/gz_cmake_vendor/lib:/opt/ros/jazzy/lib', 'LESS': '-R', 'HOME': '/home/jonatan', 'OLDPWD': '/home/jonatan', 'DESKTOP_SESSION': 'ubuntu', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'ZSH': '/home/jonatan/.oh-my-zsh', 'GIO_LAUNCHED_DESKTOP_FILE': '/usr/share/applications/terminator.desktop', 'ROS_PYTHON_VERSION': '3', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'GTK_MODULES': 'gail:atk-bridge', 'PAGER': 'less', 'PS1': '\\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$', 'MANAGERPID': '2008', 'P9K_TTY': 'old', 'SYSTEMD_EXEC_PID': '2272', 'GSM_SKIP_SSH_AGENT_WORKAROUND': 'true', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'GIO_LAUNCHED_DESKTOP_FILE_PID': '3097', 'WAYLAND_DISPLAY': 'wayland-0', 'ROS_DISTRO': 'jazzy', 'LOGNAME': 'jonatan', '_P9K_SSH_TTY': '/dev/pts/2', 'JOURNAL_STREAM': '9:19463', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'MEMORY_PRESSURE_WATCH': '/sys/fs/cgroup/user.slice/user-1000.slice/user@1000.service/session.slice/org.gnome.Shell@wayland.service/memory.pressure', 'XDG_SESSION_CLASS': 'user', 'USERNAME': 'jonatan', 'TERM': 'xterm-256color', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'PATH': '/opt/ros/jazzy/opt/gz_msgs_vendor/bin:/opt/ros/jazzy/opt/gz_tools_vendor/bin:/opt/ros/jazzy/opt/gz_ogre_next_vendor/bin:/opt/ros/jazzy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin', 'SESSION_MANAGER': 'local/HP-EliteBook-x360-1030-G2:@/tmp/.ICE-unix/2219,unix/HP-EliteBook-x360-1030-G2:/tmp/.ICE-unix/2219', 'INVOCATION_ID': '1d5efdbd10c34d46a8570a6c200c5332', 'XDG_MENU_PREFIX': 'gnome-', 'GNOME_SETUP_DISPLAY': ':1', 'XDG_RUNTIME_DIR': '/run/user/1000', 'DISPLAY': ':0', 'LANG': 'en_US.UTF-8', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'XMODIFIERS': '@im=ibus', 'XDG_SESSION_DESKTOP': 'ubuntu', 'XAUTHORITY': '/run/user/1000/.mutter-Xwaylandauth.DBMW62', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:', 'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh', 'AMENT_PREFIX_PATH': '/home/jonatan/ros2_ws/install/articubot_one:/opt/ros/jazzy', 'SHELL': '/usr/bin/zsh', 'TERMINATOR_UUID': 'urn:uuid:0947d2af-0509-4362-9f98-b841aba16eb4', 'QT_ACCESSIBILITY': '1', 'GDMSESSION': 'ubuntu', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'IGN_GAZEBO_RESOURCE_PATH': '/opt/ros/jazzy/share', 'GJS_DEBUG_OUTPUT': 'stderr', 'P9K_SSH': '0', 'ROS_AUTOMATIC_DISCOVERY_RANGE': 'SUBNET', 'QT_IM_MODULE': 'ibus', 'PWD': '/home/jonatan/ros2_ws/build/articubot_one', 'LC_ALL': 'en_US.UTF-8', '_P9K_TTY': '/dev/pts/2', 'XDG_DATA_DIRS': '/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'PYTHONPATH': '/home/jonatan/ros2_ws/install/articubot_one/lib/python3.12/site-packages:/opt/ros/jazzy/lib/python3.12/site-packages', 'COLCON': '1', 'MEMORY_PRESSURE_WRITE': 'c29tZSAyMDAwMDAgMjAwMDAwMAA=', 'VTE_VERSION': '7600', 'CMAKE_PREFIX_PATH': '/home/jonatan/ros2_ws/install/articubot_one:/opt/ros/jazzy/opt/gz_sim_vendor:/opt/ros/jazzy/opt/gz_sensors_vendor:/opt/ros/jazzy/opt/gz_physics_vendor:/opt/ros/jazzy/opt/sdformat_vendor:/opt/ros/jazzy/opt/gz_gui_vendor:/opt/ros/jazzy/opt/gz_transport_vendor:/opt/ros/jazzy/opt/gz_rendering_vendor:/opt/ros/jazzy/opt/gz_plugin_vendor:/opt/ros/jazzy/opt/gz_fuel_tools_vendor:/opt/ros/jazzy/opt/gz_msgs_vendor:/opt/ros/jazzy/opt/gz_common_vendor:/opt/ros/jazzy/opt/gz_math_vendor:/opt/ros/jazzy/opt/gz_utils_vendor:/opt/ros/jazzy/opt/gz_tools_vendor:/opt/ros/jazzy/opt/gz_ogre_next_vendor:/opt/ros/jazzy/opt/gz_dartsim_vendor:/opt/ros/jazzy/opt/gz_cmake_vendor'}), 'shell': False}
[0.045326] (articubot_one) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.045568] (articubot_one) StdoutLine: {'line': b'Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.045748] (articubot_one) StdoutLine: {'line': b'   Site: HP-EliteBook-x360-1030-G2\n'}
[0.045990] (articubot_one) StdoutLine: {'line': b'   Build name: (empty)\n'}
[0.046186] (articubot_one) StdoutLine: {'line': b' Add coverage exclude regular expressions.\n'}
[0.046350] (articubot_one) StdoutLine: {'line': b'Create new tag: 20250518-1821 - Experimental\n'}
[0.046506] (articubot_one) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.046753] (articubot_one) StdoutLine: {'line': b'Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.047012] (articubot_one) StdoutLine: {'line': b'Test project /home/jonatan/ros2_ws/build/articubot_one\n'}
[0.047339] (articubot_one) StdoutLine: {'line': b'Constructing a list of tests\n'}
[0.047543] (articubot_one) StdoutLine: {'line': b'Done constructing a list of tests\n'}
[0.047755] (articubot_one) StdoutLine: {'line': b'Updating test list for fixtures\n'}
[0.047950] (articubot_one) StdoutLine: {'line': b'Added 0 tests to meet fixture requirements\n'}
[0.048115] (articubot_one) StdoutLine: {'line': b'Checking test dependency graph...\n'}
[0.048286] (articubot_one) StdoutLine: {'line': b'Checking test dependency graph end\n'}
[0.048443] (articubot_one) StdoutLine: {'line': b'test 1\n'}
[0.048596] (articubot_one) StdoutLine: {'line': b'    Start 1: laser_obstacle_test\n'}
[0.048747] (articubot_one) StdoutLine: {'line': b'\n'}
[0.048904] (articubot_one) StdoutLine: {'line': b'1: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test.txt" "--command" "/usr/bin/python3" "-u" "-m" "pytest" "/home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py" "-o" "cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache" "--junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--junit-prefix=articubot_one"\n'}
[0.049124] (articubot_one) StdoutLine: {'line': b'1: Working Directory: /home/jonatan/ros2_ws/build/articubot_one\n'}
[0.049238] (articubot_one) StdoutLine: {'line': b'1: Test timeout computed to be: 60\n'}
[0.099093] (-) TimerEvent: {}
[0.130562] (articubot_one) StdoutLine: {'line': b"1: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/build/articubot_one':\n"}
[0.130891] (articubot_one) StdoutLine: {'line': b'1:  - /usr/bin/python3 -u -m pytest /home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py -o cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache --junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml --junit-prefix=articubot_one\n'}
[0.199221] (-) TimerEvent: {}
[0.299491] (-) TimerEvent: {}
[0.399766] (-) TimerEvent: {}
[0.500119] (-) TimerEvent: {}
[0.563373] (articubot_one) StdoutLine: {'line': b'1: ============================= test session starts ==============================\n'}
[0.563622] (articubot_one) StdoutLine: {'line': b'1: platform linux -- Python 3.12.3, pytest-7.4.4, pluggy-1.4.0\n'}
[0.569837] (articubot_one) StdoutLine: {'line': b'1: cachedir: /home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache\n'}
[0.570159] (articubot_one) StdoutLine: {'line': b'1: rootdir: /home/jonatan/ros2_ws/src/articubot_one\n'}
[0.570397] (articubot_one) StdoutLine: {'line': b'1: plugins: launch-testing-3.4.4, ament-xmllint-0.17.2, ament-pep257-0.17.2, ament-copyright-0.17.2, ament-flake8-0.17.2, launch-testing-ros-0.26.7, ament-lint-0.17.2, cov-4.1.0, typeguard-4.1.5, colcon-core-0.19.0\n'}
[0.600254] (-) TimerEvent: {}
[0.700656] (-) TimerEvent: {}
[0.793058] (articubot_one) StdoutLine: {'line': b'1: collected 3 items\n'}
[0.794201] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.800781] (-) TimerEvent: {}
[0.899688] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py F.F            [100%]\n'}
[0.900172] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.900411] (articubot_one) StdoutLine: {'line': b'1: =================================== FAILURES ===================================\n'}
[0.900610] (articubot_one) StdoutLine: {'line': b'1: ______________________________ test_node_creation ______________________________\n'}
[0.900789] (-) TimerEvent: {}
[0.901230] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.901511] (articubot_one) StdoutLine: {'line': b'1:     def test_node_creation():\n'}
[0.901732] (articubot_one) StdoutLine: {'line': b'1:         rclpy.init\n'}
[0.901913] (articubot_one) StdoutLine: {'line': b'1:         try :\n'}
[0.902087] (articubot_one) StdoutLine: {'line': b'1: >           node=Obstacle()\n'}
[0.902265] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.902427] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py:13: \n'}
[0.902588] (articubot_one) StdoutLine: {'line': b'1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n'}
[0.903028] (articubot_one) StdoutLine: {'line': b'1: ../../install/articubot_one/lib/python3.12/site-packages/articubot_one/obstacle_avoidance.py:15: in __init__\n'}
[0.903862] (articubot_one) StdoutLine: {'line': b'1:     super().__init__("Laser_Obstacle_Avoidance")\n'}
[0.904116] (articubot_one) StdoutLine: {'line': b'1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n'}
[0.904317] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.904497] (articubot_one) StdoutLine: {'line': b'1: self = <articubot_one.obstacle_avoidance.Obstacle object at 0x7e4a2f3b67e0>\n'}
[0.904696] (articubot_one) StdoutLine: {'line': b"1: node_name = 'Laser_Obstacle_Avoidance'\n"}
[0.904829] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.904958] (articubot_one) StdoutLine: {'line': b'1:     def __init__(\n'}
[0.905145] (articubot_one) StdoutLine: {'line': b'1:         self,\n'}
[0.905313] (articubot_one) StdoutLine: {'line': b'1:         node_name: str,\n'}
[0.905460] (articubot_one) StdoutLine: {'line': b'1:         *,\n'}
[0.905620] (articubot_one) StdoutLine: {'line': b'1:         context: Optional[Context] = None,\n'}
[0.905862] (articubot_one) StdoutLine: {'line': b'1:         cli_args: Optional[List[str]] = None,\n'}
[0.906126] (articubot_one) StdoutLine: {'line': b'1:         namespace: Optional[str] = None,\n'}
[0.906370] (articubot_one) StdoutLine: {'line': b'1:         use_global_arguments: bool = True,\n'}
[0.906557] (articubot_one) StdoutLine: {'line': b'1:         enable_rosout: bool = True,\n'}
[0.906739] (articubot_one) StdoutLine: {'line': b'1:         start_parameter_services: bool = True,\n'}
[0.906949] (articubot_one) StdoutLine: {'line': b'1:         parameter_overrides: Optional[List[Parameter]] = None,\n'}
[0.907196] (articubot_one) StdoutLine: {'line': b'1:         allow_undeclared_parameters: bool = False,\n'}
[0.907470] (articubot_one) StdoutLine: {'line': b'1:         automatically_declare_parameters_from_overrides: bool = False,\n'}
[0.907675] (articubot_one) StdoutLine: {'line': b'1:         enable_logger_service: bool = False\n'}
[0.907884] (articubot_one) StdoutLine: {'line': b'1:     ) -> None:\n'}
[0.908089] (articubot_one) StdoutLine: {'line': b'1:         """\n'}
[0.908261] (articubot_one) StdoutLine: {'line': b'1:         Create a Node.\n'}
[0.908415] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[0.908572] (articubot_one) StdoutLine: {'line': b'1:         :param node_name: A name to give to this node. Validated by :func:`validate_node_name`.\n'}
[0.908760] (articubot_one) StdoutLine: {'line': b'1:         :param context: The context to be associated with, or ``None`` for the default global\n'}
[0.908947] (articubot_one) StdoutLine: {'line': b'1:             context.\n'}
[0.909138] (articubot_one) StdoutLine: {'line': b'1:         :param cli_args: A list of strings of command line args to be used only by this node.\n'}
[0.909318] (articubot_one) StdoutLine: {'line': b'1:             These arguments are used to extract remappings used by the node and other ROS specific\n'}
[0.909445] (articubot_one) StdoutLine: {'line': b'1:             settings, as well as user defined non-ROS arguments.\n'}
[0.909618] (articubot_one) StdoutLine: {'line': b'1:         :param namespace: The namespace to which relative topic and service names will be prefixed.\n'}
[0.909789] (articubot_one) StdoutLine: {'line': b'1:             Validated by :func:`validate_namespace`.\n'}
[0.909975] (articubot_one) StdoutLine: {'line': b'1:         :param use_global_arguments: ``False`` if the node should ignore process-wide command line\n'}
[0.910190] (articubot_one) StdoutLine: {'line': b'1:             args.\n'}
[0.910452] (articubot_one) StdoutLine: {'line': b'1:         :param enable_rosout: ``False`` if the node should ignore rosout logging.\n'}
[0.910660] (articubot_one) StdoutLine: {'line': b'1:         :param start_parameter_services: ``False`` if the node should not create parameter\n'}
[0.910868] (articubot_one) StdoutLine: {'line': b'1:             services.\n'}
[0.911089] (articubot_one) StdoutLine: {'line': b'1:         :param parameter_overrides: A list of overrides for initial values for parameters declared\n'}
[0.911356] (articubot_one) StdoutLine: {'line': b'1:             on the node.\n'}
[0.911553] (articubot_one) StdoutLine: {'line': b'1:         :param allow_undeclared_parameters: True if undeclared parameters are allowed.\n'}
[0.911735] (articubot_one) StdoutLine: {'line': b'1:             This flag affects the behavior of parameter-related operations.\n'}
[0.911922] (articubot_one) StdoutLine: {'line': b'1:         :param automatically_declare_parameters_from_overrides: If True, the "parameter overrides"\n'}
[0.912160] (articubot_one) StdoutLine: {'line': b'1:             will be used to implicitly declare parameters on the node during creation.\n'}
[0.912470] (articubot_one) StdoutLine: {'line': b'1:         :param enable_logger_service: ``True`` if ROS2 services are created to allow external nodes\n'}
[0.912665] (articubot_one) StdoutLine: {'line': b'1:             to get and set logger levels of this node. Otherwise, logger levels are only managed\n'}
[0.912875] (articubot_one) StdoutLine: {'line': b'1:             locally. That is, logger levels cannot be changed remotely.\n'}
[0.913055] (articubot_one) StdoutLine: {'line': b'1:         """\n'}
[0.913260] (articubot_one) StdoutLine: {'line': b'1:         self.__handle = None\n'}
[0.913419] (articubot_one) StdoutLine: {'line': b'1:         self._context = get_default_context() if context is None else context\n'}
[0.913578] (articubot_one) StdoutLine: {'line': b'1:         self._parameters: dict = {}\n'}
[0.913732] (articubot_one) StdoutLine: {'line': b'1:         self._publishers: List[Publisher] = []\n'}
[0.913890] (articubot_one) StdoutLine: {'line': b'1:         self._subscriptions: List[Subscription] = []\n'}
[0.914085] (articubot_one) StdoutLine: {'line': b'1:         self._clients: List[Client] = []\n'}
[0.914229] (articubot_one) StdoutLine: {'line': b'1:         self._services: List[Service] = []\n'}
[0.914357] (articubot_one) StdoutLine: {'line': b'1:         self._timers: List[Timer] = []\n'}
[0.914528] (articubot_one) StdoutLine: {'line': b'1:         self._guards: List[GuardCondition] = []\n'}
[0.914698] (articubot_one) StdoutLine: {'line': b'1:         self.__waitables: List[Waitable] = []\n'}
[0.914867] (articubot_one) StdoutLine: {'line': b'1:         self._default_callback_group = MutuallyExclusiveCallbackGroup()\n'}
[0.915039] (articubot_one) StdoutLine: {'line': b'1:         self._pre_set_parameters_callbacks: List[Callable[[List[Parameter]], List[Parameter]]] = []\n'}
[0.915285] (articubot_one) StdoutLine: {'line': b'1:         self._on_set_parameters_callbacks: \\\n'}
[0.915565] (articubot_one) StdoutLine: {'line': b'1:             List[Callable[[List[Parameter]], SetParametersResult]] = []\n'}
[0.915740] (articubot_one) StdoutLine: {'line': b'1:         self._post_set_parameters_callbacks: List[Callable[[List[Parameter]], None]] = []\n'}
[0.915867] (articubot_one) StdoutLine: {'line': b'1:         self._rate_group = ReentrantCallbackGroup()\n'}
[0.915997] (articubot_one) StdoutLine: {'line': b'1:         self._allow_undeclared_parameters = allow_undeclared_parameters\n'}
[0.916183] (articubot_one) StdoutLine: {'line': b'1:         self._parameter_overrides = {}\n'}
[0.916379] (articubot_one) StdoutLine: {'line': b'1:         self._descriptors = {}\n'}
[0.916569] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[0.916766] (articubot_one) StdoutLine: {'line': b"1:         namespace = namespace or ''\n"}
[0.916956] (articubot_one) StdoutLine: {'line': b'1:         if not self._context.ok():\n'}
[0.917178] (articubot_one) StdoutLine: {'line': b"1: >           raise NotInitializedException('cannot create node')\n"}
[0.917310] (articubot_one) StdoutLine: {'line': b'1: E           rclpy.exceptions.NotInitializedException: rclpy.init() has not been called. msg:cannot create node\n'}
[0.917414] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.917513] (articubot_one) StdoutLine: {'line': b'1: /opt/ros/jazzy/lib/python3.12/site-packages/rclpy/node.py:184: NotInitializedException\n'}
[0.917613] (articubot_one) StdoutLine: {'line': b'1: ________________________________ test_obstacle _________________________________\n'}
[0.917718] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.917874] (articubot_one) StdoutLine: {'line': b'1:     def test_obstacle():\n'}
[0.918030] (articubot_one) StdoutLine: {'line': b'1:         rclpy.init\n'}
[0.918173] (articubot_one) StdoutLine: {'line': b'1:         try :\n'}
[0.918278] (articubot_one) StdoutLine: {'line': b'1: >           node=Obstacle()\n'}
[0.918378] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.918478] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py:33: \n'}
[0.918583] (articubot_one) StdoutLine: {'line': b'1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n'}
[0.918738] (articubot_one) StdoutLine: {'line': b'1: ../../install/articubot_one/lib/python3.12/site-packages/articubot_one/obstacle_avoidance.py:15: in __init__\n'}
[0.918894] (articubot_one) StdoutLine: {'line': b'1:     super().__init__("Laser_Obstacle_Avoidance")\n'}
[0.919049] (articubot_one) StdoutLine: {'line': b'1: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n'}
[0.919182] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.919285] (articubot_one) StdoutLine: {'line': b'1: self = <articubot_one.obstacle_avoidance.Obstacle object at 0x7e4a272e61e0>\n'}
[0.919385] (articubot_one) StdoutLine: {'line': b"1: node_name = 'Laser_Obstacle_Avoidance'\n"}
[0.919486] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.919585] (articubot_one) StdoutLine: {'line': b'1:     def __init__(\n'}
[0.919689] (articubot_one) StdoutLine: {'line': b'1:         self,\n'}
[0.919843] (articubot_one) StdoutLine: {'line': b'1:         node_name: str,\n'}
[0.919998] (articubot_one) StdoutLine: {'line': b'1:         *,\n'}
[0.920152] (articubot_one) StdoutLine: {'line': b'1:         context: Optional[Context] = None,\n'}
[0.920274] (articubot_one) StdoutLine: {'line': b'1:         cli_args: Optional[List[str]] = None,\n'}
[0.920376] (articubot_one) StdoutLine: {'line': b'1:         namespace: Optional[str] = None,\n'}
[0.920475] (articubot_one) StdoutLine: {'line': b'1:         use_global_arguments: bool = True,\n'}
[0.920575] (articubot_one) StdoutLine: {'line': b'1:         enable_rosout: bool = True,\n'}
[0.920678] (articubot_one) StdoutLine: {'line': b'1:         start_parameter_services: bool = True,\n'}
[0.920834] (articubot_one) StdoutLine: {'line': b'1:         parameter_overrides: Optional[List[Parameter]] = None,\n'}
[0.920990] (articubot_one) StdoutLine: {'line': b'1:         allow_undeclared_parameters: bool = False,\n'}
[0.921143] (articubot_one) StdoutLine: {'line': b'1:         automatically_declare_parameters_from_overrides: bool = False,\n'}
[0.921251] (articubot_one) StdoutLine: {'line': b'1:         enable_logger_service: bool = False\n'}
[0.921352] (articubot_one) StdoutLine: {'line': b'1:     ) -> None:\n'}
[0.921488] (articubot_one) StdoutLine: {'line': b'1:         """\n'}
[0.921625] (articubot_one) StdoutLine: {'line': b'1:         Create a Node.\n'}
[0.921789] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[0.921945] (articubot_one) StdoutLine: {'line': b'1:         :param node_name: A name to give to this node. Validated by :func:`validate_node_name`.\n'}
[0.922121] (articubot_one) StdoutLine: {'line': b'1:         :param context: The context to be associated with, or ``None`` for the default global\n'}
[0.922233] (articubot_one) StdoutLine: {'line': b'1:             context.\n'}
[0.922334] (articubot_one) StdoutLine: {'line': b'1:         :param cli_args: A list of strings of command line args to be used only by this node.\n'}
[0.922434] (articubot_one) StdoutLine: {'line': b'1:             These arguments are used to extract remappings used by the node and other ROS specific\n'}
[0.922534] (articubot_one) StdoutLine: {'line': b'1:             settings, as well as user defined non-ROS arguments.\n'}
[0.922637] (articubot_one) StdoutLine: {'line': b'1:         :param namespace: The namespace to which relative topic and service names will be prefixed.\n'}
[0.922794] (articubot_one) StdoutLine: {'line': b'1:             Validated by :func:`validate_namespace`.\n'}
[0.922949] (articubot_one) StdoutLine: {'line': b'1:         :param use_global_arguments: ``False`` if the node should ignore process-wide command line\n'}
[0.923118] (articubot_one) StdoutLine: {'line': b'1:             args.\n'}
[0.923278] (articubot_one) StdoutLine: {'line': b'1:         :param enable_rosout: ``False`` if the node should ignore rosout logging.\n'}
[0.923385] (articubot_one) StdoutLine: {'line': b'1:         :param start_parameter_services: ``False`` if the node should not create parameter\n'}
[0.923485] (articubot_one) StdoutLine: {'line': b'1:             services.\n'}
[0.923585] (articubot_one) StdoutLine: {'line': b'1:         :param parameter_overrides: A list of overrides for initial values for parameters declared\n'}
[0.923684] (articubot_one) StdoutLine: {'line': b'1:             on the node.\n'}
[0.923788] (articubot_one) StdoutLine: {'line': b'1:         :param allow_undeclared_parameters: True if undeclared parameters are allowed.\n'}
[0.923944] (articubot_one) StdoutLine: {'line': b'1:             This flag affects the behavior of parameter-related operations.\n'}
[0.924101] (articubot_one) StdoutLine: {'line': b'1:         :param automatically_declare_parameters_from_overrides: If True, the "parameter overrides"\n'}
[0.924220] (articubot_one) StdoutLine: {'line': b'1:             will be used to implicitly declare parameters on the node during creation.\n'}
[0.924372] (articubot_one) StdoutLine: {'line': b'1:         :param enable_logger_service: ``True`` if ROS2 services are created to allow external nodes\n'}
[0.924485] (articubot_one) StdoutLine: {'line': b'1:             to get and set logger levels of this node. Otherwise, logger levels are only managed\n'}
[0.924587] (articubot_one) StdoutLine: {'line': b'1:             locally. That is, logger levels cannot be changed remotely.\n'}
[0.924687] (articubot_one) StdoutLine: {'line': b'1:         """\n'}
[0.924786] (articubot_one) StdoutLine: {'line': b'1:         self.__handle = None\n'}
[0.924890] (articubot_one) StdoutLine: {'line': b'1:         self._context = get_default_context() if context is None else context\n'}
[0.925045] (articubot_one) StdoutLine: {'line': b'1:         self._parameters: dict = {}\n'}
[0.925212] (articubot_one) StdoutLine: {'line': b'1:         self._publishers: List[Publisher] = []\n'}
[0.925320] (articubot_one) StdoutLine: {'line': b'1:         self._subscriptions: List[Subscription] = []\n'}
[0.925421] (articubot_one) StdoutLine: {'line': b'1:         self._clients: List[Client] = []\n'}
[0.925520] (articubot_one) StdoutLine: {'line': b'1:         self._services: List[Service] = []\n'}
[0.925619] (articubot_one) StdoutLine: {'line': b'1:         self._timers: List[Timer] = []\n'}
[0.925718] (articubot_one) StdoutLine: {'line': b'1:         self._guards: List[GuardCondition] = []\n'}
[0.925821] (articubot_one) StdoutLine: {'line': b'1:         self.__waitables: List[Waitable] = []\n'}
[0.925980] (articubot_one) StdoutLine: {'line': b'1:         self._default_callback_group = MutuallyExclusiveCallbackGroup()\n'}
[0.926171] (articubot_one) StdoutLine: {'line': b'1:         self._pre_set_parameters_callbacks: List[Callable[[List[Parameter]], List[Parameter]]] = []\n'}
[0.926356] (articubot_one) StdoutLine: {'line': b'1:         self._on_set_parameters_callbacks: \\\n'}
[0.926526] (articubot_one) StdoutLine: {'line': b'1:             List[Callable[[List[Parameter]], SetParametersResult]] = []\n'}
[0.926717] (articubot_one) StdoutLine: {'line': b'1:         self._post_set_parameters_callbacks: List[Callable[[List[Parameter]], None]] = []\n'}
[0.926938] (articubot_one) StdoutLine: {'line': b'1:         self._rate_group = ReentrantCallbackGroup()\n'}
[0.927198] (articubot_one) StdoutLine: {'line': b'1:         self._allow_undeclared_parameters = allow_undeclared_parameters\n'}
[0.927425] (articubot_one) StdoutLine: {'line': b'1:         self._parameter_overrides = {}\n'}
[0.927613] (articubot_one) StdoutLine: {'line': b'1:         self._descriptors = {}\n'}
[0.927796] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[0.928006] (articubot_one) StdoutLine: {'line': b"1:         namespace = namespace or ''\n"}
[0.928231] (articubot_one) StdoutLine: {'line': b'1:         if not self._context.ok():\n'}
[0.928483] (articubot_one) StdoutLine: {'line': b"1: >           raise NotInitializedException('cannot create node')\n"}
[0.928680] (articubot_one) StdoutLine: {'line': b'1: E           rclpy.exceptions.NotInitializedException: rclpy.init() has not been called. msg:cannot create node\n'}
[0.928871] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.929055] (articubot_one) StdoutLine: {'line': b'1: /opt/ros/jazzy/lib/python3.12/site-packages/rclpy/node.py:184: NotInitializedException\n'}
[0.929233] (articubot_one) StdoutLine: {'line': b'1: - generated xml file: /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml -\n'}
[0.929392] (articubot_one) StdoutLine: {'line': b'1: =========================== short test summary info ============================\n'}
[0.929551] (articubot_one) StdoutLine: {'line': b'1: FAILED ../../src/articubot_one/test/pytest/test_laserObstacle.py::test_node_creation\n'}
[0.929704] (articubot_one) StdoutLine: {'line': b'1: FAILED ../../src/articubot_one/test/pytest/test_laserObstacle.py::test_obstacle\n'}
[0.929892] (articubot_one) StdoutLine: {'line': b'1: ========================= 2 failed, 1 passed in 0.34s ==========================\n'}
[1.000968] (-) TimerEvent: {}
[1.017897] (articubot_one) StdoutLine: {'line': b'1: -- run_test.py: return code 1\n'}
[1.018277] (articubot_one) StdoutLine: {'line': b"1: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml'\n"}
[1.036045] (articubot_one) StdoutLine: {'line': b'1/6 Test #1: laser_obstacle_test ..............***Failed    0.99 sec\n'}
[1.036507] (articubot_one) StdoutLine: {'line': b'test 2\n'}
[1.036719] (articubot_one) StdoutLine: {'line': b'    Start 2: copyright\n'}
[1.036915] (articubot_one) StdoutLine: {'line': b'\n'}
[1.037129] (articubot_one) StdoutLine: {'line': b'2: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_copyright/copyright.txt" "--command" "/opt/ros/jazzy/bin/ament_copyright" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml"\n'}
[1.037310] (articubot_one) StdoutLine: {'line': b'2: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[1.037441] (articubot_one) StdoutLine: {'line': b'2: Test timeout computed to be: 200\n'}
[1.101115] (-) TimerEvent: {}
[1.119197] (articubot_one) StdoutLine: {'line': b"2: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[1.119412] (articubot_one) StdoutLine: {'line': b'2:  - /opt/ros/jazzy/bin/ament_copyright --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml\n'}
[1.201208] (-) TimerEvent: {}
[1.301466] (-) TimerEvent: {}
[1.387693] (articubot_one) StdoutLine: {'line': b'2: CONTRIBUTING.md: file not found\n'}
[1.387985] (articubot_one) StdoutLine: {'line': b'2: LICENSE: file not found\n'}
[1.388174] (articubot_one) StdoutLine: {'line': b'2: articubot_one/obstacle_avoidance.py: could not find copyright notice\n'}
[1.388301] (articubot_one) StdoutLine: {'line': b'2: launch/ball_tracker.launch.py: could not find copyright notice\n'}
[1.388416] (articubot_one) StdoutLine: {'line': b'2: launch/camera.launch.py: could not find copyright notice\n'}
[1.388536] (articubot_one) StdoutLine: {'line': b'2: launch/joystick.launch.py: could not find copyright notice\n'}
[1.388712] (articubot_one) StdoutLine: {'line': b'2: launch/launch_robot.launch.py: could not find copyright notice\n'}
[1.388915] (articubot_one) StdoutLine: {'line': b'2: launch/launch_sim.launch.py: could not find copyright notice\n'}
[1.389128] (articubot_one) StdoutLine: {'line': b'2: launch/online_async_launch.py: could not find copyright notice\n'}
[1.389257] (articubot_one) StdoutLine: {'line': b'2: launch/rplidar.launch.py: could not find copyright notice\n'}
[1.389375] (articubot_one) StdoutLine: {'line': b'2: launch/rsp.launch.py: could not find copyright notice\n'}
[1.389486] (articubot_one) StdoutLine: {'line': b'2: launch/rviz_gazebo.launch.py: could not find copyright notice\n'}
[1.389597] (articubot_one) StdoutLine: {'line': b'2: test/pytest/test_laserObstacle.py: could not find copyright notice\n'}
[1.389727] (articubot_one) StdoutLine: {'line': b'2: 13 errors, checked 16 files\n'}
[1.401633] (-) TimerEvent: {}
[1.411892] (articubot_one) StdoutLine: {'line': b'2: -- run_test.py: return code 1\n'}
[1.412284] (articubot_one) StdoutLine: {'line': b"2: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml'\n"}
[1.425363] (articubot_one) StdoutLine: {'line': b'2/6 Test #2: copyright ........................***Failed    0.39 sec\n'}
[1.425673] (articubot_one) StdoutLine: {'line': b'test 3\n'}
[1.425842] (articubot_one) StdoutLine: {'line': b'    Start 3: flake8\n'}
[1.426069] (articubot_one) StdoutLine: {'line': b'\n'}
[1.426304] (articubot_one) StdoutLine: {'line': b'3: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_flake8/flake8.txt" "--command" "/opt/ros/jazzy/bin/ament_flake8" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml"\n'}
[1.426560] (articubot_one) StdoutLine: {'line': b'3: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[1.426817] (articubot_one) StdoutLine: {'line': b'3: Test timeout computed to be: 60\n'}
[1.501736] (-) TimerEvent: {}
[1.505788] (articubot_one) StdoutLine: {'line': b"3: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[1.506066] (articubot_one) StdoutLine: {'line': b'3:  - /opt/ros/jazzy/bin/ament_flake8 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml\n'}
[1.601871] (-) TimerEvent: {}
[1.702141] (-) TimerEvent: {}
[1.805124] (-) TimerEvent: {}
[1.905418] (-) TimerEvent: {}
[1.917195] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist\n'}
[1.918089] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.918233] (articubot_one) StdoutLine: {'line': b'3: import math\n'}
[1.918430] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.918665] (articubot_one) StdoutLine: {'line': b'3: import math\n'}
[1.918881] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.920729] (articubot_one) StdoutLine: {'line': b'3: # i am writing down this piece of code with paramters \n'}
[1.922606] (articubot_one) StdoutLine: {'line': b'3:                                                      ^\n'}
[1.923011] (articubot_one) StdoutLine: {'line': b'3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node \n'}
[1.923389] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.923583] (articubot_one) StdoutLine: {'line': b'3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node \n'}
[1.923756] (articubot_one) StdoutLine: {'line': b'3:                                                                                                               ^\n'}
[1.923928] (articubot_one) StdoutLine: {'line': b'3:     def __init__(self) :\n'}
[1.924105] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[1.925594] (articubot_one) StdoutLine: {'line': b'3:         super().__init__("Laser_Obstacle_Avoidance")\n'}
[1.925829] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[1.926026] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[1.926242] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.926472] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[1.926949] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[1.927144] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[1.927334] (articubot_one) StdoutLine: {'line': b'3:                                                    ^\n'}
[1.927516] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[1.927678] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.927843] (articubot_one) StdoutLine: {'line': b'3:         self.threshold=self.get_parameter("threshold_distance").value\n'}
[1.928202] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[1.928389] (articubot_one) StdoutLine: {'line': b'3:         self.threshold=self.get_parameter("threshold_distance").value\n'}
[1.928553] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[1.928714] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[1.929021] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.929202] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[1.929363] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[1.929518] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[1.929673] (articubot_one) StdoutLine: {'line': b'3:                                                  ^\n'}
[1.929848] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[1.930049] (articubot_one) StdoutLine: {'line': b'3:                                                   ^\n'}
[1.930279] (articubot_one) StdoutLine: {'line': b'3:         self.laser_topic=self.get_parameter("laser_scan_topic").value\n'}
[1.930455] (articubot_one) StdoutLine: {'line': b'3:                         ^\n'}
[1.930615] (articubot_one) StdoutLine: {'line': b'3:         self.laser_topic=self.get_parameter("laser_scan_topic").value\n'}
[1.930789] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[1.930990] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[1.931244] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.935262] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[1.936362] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[1.957375] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[1.957601] (articubot_one) StdoutLine: {'line': b'3:                                               ^\n'}
[1.957806] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[1.957980] (articubot_one) StdoutLine: {'line': b'3:                                                ^\n'}
[1.958190] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value\n'}
[1.958382] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[1.958564] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value\n'}
[1.958760] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[1.958954] (articubot_one) StdoutLine: {'line': b"3:         self.frontal_detection_angle_rad = math.radians(self.get_parameter('frontal_detection_angle_deg').value)\n"}
[1.959170] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.959363] (articubot_one) StdoutLine: {'line': b'3:         #create a publisher to the /cmd_vel\n'}
[1.959552] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[1.959741] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_vel_pub = self.create_publisher(Twist,self.cmd_topic, 10)\n'}
[1.959930] (articubot_one) StdoutLine: {'line': b'3:                                                       ^\n'}
[1.960125] (articubot_one) StdoutLine: {'line': b'3:     def laser_callback(self,msg):\n'}
[1.960323] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.960515] (articubot_one) StdoutLine: {'line': b'3:     def laser_callback(self,msg):\n'}
[1.960699] (articubot_one) StdoutLine: {'line': b'3:                            ^\n'}
[1.960879] (articubot_one) StdoutLine: {'line': b'3:   \n'}
[1.961056] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.961262] (articubot_one) StdoutLine: {'line': b'3:         if not(scan_size) :\n'}
[1.961432] (articubot_one) StdoutLine: {'line': b'3:               ^\n'}
[1.961611] (articubot_one) StdoutLine: {'line': b'3:         if not(scan_size) :\n'}
[1.961982] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[1.962344] (articubot_one) StdoutLine: {'line': b'3:             #no laser data \n'}
[1.962555] (articubot_one) StdoutLine: {'line': b'3:             ^\n'}
[1.962776] (articubot_one) StdoutLine: {'line': b'3:             #no laser data \n'}
[1.962999] (articubot_one) StdoutLine: {'line': b'3:                           ^\n'}
[1.963260] (articubot_one) StdoutLine: {'line': b'3:             return \n'}
[1.963484] (articubot_one) StdoutLine: {'line': b'3:                   ^\n'}
[1.963711] (articubot_one) StdoutLine: {'line': b'3:         # the lidar provides angles,angle step (common difference of the angle sequence), distances in meter\n'}
[1.963923] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.964160] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[1.964379] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.964586] (articubot_one) StdoutLine: {'line': b'3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance\n'}
[1.964797] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[1.965001] (articubot_one) StdoutLine: {'line': b'3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance\n'}
[1.965246] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.965564] (articubot_one) StdoutLine: {'line': b"3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance\n"}
[1.965791] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[1.965991] (articubot_one) StdoutLine: {'line': b"3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance\n"}
[1.966230] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.966442] (articubot_one) StdoutLine: {'line': b'3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle \n'}
[1.966947] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.967206] (articubot_one) StdoutLine: {'line': b'3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle \n'}
[1.967414] (articubot_one) StdoutLine: {'line': b'3:                                                                                                                      ^\n'}
[1.967604] (articubot_one) StdoutLine: {'line': b'3:         # we are sweeping across all the angles with the increment \n'}
[1.967799] (articubot_one) StdoutLine: {'line': b'3:                                                                   ^\n'}
[1.967992] (articubot_one) StdoutLine: {'line': b'3:         # while sweeping we compare  only the ranges with the ones in the defined angle \n'}
[1.968268] (articubot_one) StdoutLine: {'line': b'3:                                                                                        ^\n'}
[1.968492] (articubot_one) StdoutLine: {'line': b'3:                  # If the range reading is valid (not inf or nan)\n'}
[1.968695] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[1.968912] (articubot_one) StdoutLine: {'line': b'3:                  # If the range reading is valid (not inf or nan)\n'}
[1.969151] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[1.969364] (articubot_one) StdoutLine: {'line': b'3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):\n'}
[1.969562] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[1.969755] (articubot_one) StdoutLine: {'line': b'3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):\n'}
[1.969956] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[1.970142] (articubot_one) StdoutLine: {'line': b'3:             \n'}
[1.970313] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.970485] (articubot_one) StdoutLine: {'line': b'3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])\n'}
[1.970677] (articubot_one) StdoutLine: {'line': b'3:                      ^\n'}
[1.970866] (articubot_one) StdoutLine: {'line': b'3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])\n'}
[1.971084] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.971314] (articubot_one) StdoutLine: {'line': b'3:         #  To stop the robot from moving ahead when ever it meets an obstacle, it will just go back \n'}
[1.971517] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.971718] (articubot_one) StdoutLine: {'line': b'3:         if obstacle_detected :\n'}
[1.971928] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[1.972144] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')\n"}
[1.972368] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.972567] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')\n"}
[1.972769] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.972997] (articubot_one) StdoutLine: {'line': b'3:            twist.linear.x = 0.0\n'}
[1.973263] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.973455] (articubot_one) StdoutLine: {'line': b'3:            twist.angular.z =0.0\n'}
[1.973661] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.974184] (articubot_one) StdoutLine: {'line': b'3:            twist.angular.z =0.0\n'}
[1.974457] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[1.974644] (articubot_one) StdoutLine: {'line': b'3:            self.cmd_vel_pub.publish(twist)\n'}
[1.974825] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.975006] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[1.975219] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[1.975407] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[1.975590] (articubot_one) StdoutLine: {'line': b'3:                                   ^\n'}
[1.975773] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[1.975959] (articubot_one) StdoutLine: {'line': b'3:                                                           ^\n'}
[1.976172] (articubot_one) StdoutLine: {'line': b'3: def main(args=None):\n'}
[1.976362] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.976539] (articubot_one) StdoutLine: {'line': b'3:         rclpy.spin(node) # Keep the node running and process callbacks\n'}
[1.976716] (articubot_one) StdoutLine: {'line': b'3:                         ^\n'}
[1.976894] (articubot_one) StdoutLine: {'line': b"3:         node.get_logger().info('Smart Obstacle Avoider Node stopped cleanly via KeyboardInterrupt.')\n"}
[1.977089] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.977281] (articubot_one) StdoutLine: {'line': b"3: if __name__ == '__main__':\n"}
[1.977444] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.977619] (articubot_one) StdoutLine: {'line': b'3:     main()    \n'}
[1.977800] (articubot_one) StdoutLine: {'line': b'3:           ^\n'}
[1.977984] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[1.978184] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.978362] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[1.978536] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.978708] (articubot_one) StdoutLine: {'line': b"3:     my_package_name='articubot_one'\n"}
[1.978877] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[1.979057] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[1.979261] (articubot_one) StdoutLine: {'line': b'3:                                                                                   ^\n'}
[1.979453] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[1.979640] (articubot_one) StdoutLine: {'line': b'3:                                                                                            ^\n'}
[1.979826] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[1.980012] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.980218] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[1.980407] (articubot_one) StdoutLine: {'line': b'3:                                                                                     ^\n'}
[1.980572] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[1.980764] (articubot_one) StdoutLine: {'line': b'3:                                                                                              ^\n'}
[1.980948] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[1.981156] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.981350] (articubot_one) StdoutLine: {'line': b'3:     params_path = PythonExpression([\'"\',tracker_params_sim, \'" if "true" == "\', sim_mode, \'" else "\', tracker_params_robot, \'"\'])\n'}
[1.981617] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[1.981842] (articubot_one) StdoutLine: {'line': b'3:     params_path = PythonExpression([\'"\',tracker_params_sim, \'" if "true" == "\', sim_mode, \'" else "\', tracker_params_robot, \'"\'])\n'}
[1.982050] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.982558] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory('ball_tracker'), 'launch', 'ball_tracker.launch.py')]),\n"}
[1.982790] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[1.983004] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'params_file': params_path,\n"}
[1.983243] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[1.983443] (articubot_one) StdoutLine: {'line': b"3:                                     'image_topic': '/camera/image_raw',\n"}
[1.983638] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[1.983831] (articubot_one) StdoutLine: {'line': b"3:                                     'cmd_vel_topic': '/cmd_vel_tracker',\n"}
[1.984025] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[1.984237] (articubot_one) StdoutLine: {'line': b"3:                                     'enable_3d_tracker': 'true'}.items())\n"}
[1.984436] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[1.984624] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[1.984812] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.984997] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[1.985212] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[1.985396] (articubot_one) StdoutLine: {'line': b'3:     return LaunchDescription([\n'}
[1.985579] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.985773] (articubot_one) StdoutLine: {'line': b"3:                 'image_size': [640,480],\n"}
[1.985979] (articubot_one) StdoutLine: {'line': b'3:                                   ^\n'}
[1.986194] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[1.986390] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[1.986553] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.986710] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:5:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[1.986870] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987045] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:6:1: I100 Import statements are in the wrong order. 'import math' should be before 'from geometry_msgs.msg import Twist' and in a different group.\n"}
[1.987251] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987440] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:6:1: I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.\n"}
[1.987650] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.987837] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:9:54: W291 trailing whitespace\n'}
[1.988018] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.988238] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:10:100: E501 line too long (110 > 99 characters)\n'}
[1.988444] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.988636] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:10:111: W291 trailing whitespace\n'}
[1.988833] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.989023] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:14:23: E203 whitespace before ':'\n"}
[1.989246] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.989440] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:15:26: Q000 Double quotes found but single quotes preferred\n'}
[1.989666] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.989910] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:16:1: W293 blank line contains whitespace\n'}
[1.990175] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.990443] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:17:32: Q000 Double quotes found but single quotes preferred\n'}
[1.990985] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.991241] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:17:52: E231 missing whitespace after ','\n"}
[1.991449] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.991634] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:17:100: E501 line too long (102 > 99 characters)\n'}
[1.991821] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.991999] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:18:23: E225 missing whitespace around operator\n'}
[1.992264] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.992502] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:18:43: Q000 Double quotes found but single quotes preferred\n'}
[1.992739] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.992969] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:19:1: W293 blank line contains whitespace\n'}
[1.993223] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.993458] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:20:32: Q000 Double quotes found but single quotes preferred\n'}
[1.993693] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.993928] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:20:50: E231 missing whitespace after ','\n"}
[1.994189] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.994434] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:20:51: Q000 Double quotes found but single quotes preferred\n'}
[1.994673] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.994909] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:21:25: E225 missing whitespace around operator\n'}
[1.995163] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.995408] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:21:45: Q000 Double quotes found but single quotes preferred\n'}
[1.995648] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.995902] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:22:1: W293 blank line contains whitespace\n'}
[1.996153] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.996368] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:23:32: Q000 Double quotes found but single quotes preferred\n'}
[1.996576] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.996760] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:23:47: E231 missing whitespace after ','\n"}
[1.996942] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.997151] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:23:48: Q000 Double quotes found but single quotes preferred\n'}
[1.997316] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.997461] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:24:23: E225 missing whitespace around operator\n'}
[1.997668] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.997866] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:24:43: Q000 Double quotes found but single quotes preferred\n'}
[1.998098] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.998318] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:29:100: E501 line too long (112 > 99 characters)\n'}
[1.998500] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.999213] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:38:9: E265 block comment should start with '# '\n"}
[1.999560] (articubot_one) StdoutLine: {'line': b'3: \n'}
[1.999755] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:39:55: E231 missing whitespace after ','\n"}
[1.999941] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.000139] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:43:5: E303 too many blank lines (2)\n'}
[2.000338] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.000551] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:43:28: E231 missing whitespace after ','\n"}
[2.000757] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.000958] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:47:1: W293 blank line contains whitespace\n'}
[2.001181] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.001389] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:48:15: E275 missing whitespace after keyword\n'}
[2.001591] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.001790] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:48:26: E203 whitespace before ':'\n"}
[2.001991] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.002192] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:49:13: E265 block comment should start with '# '\n"}
[2.002412] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.002604] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:49:27: W291 trailing whitespace\n'}
[2.002786] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.002966] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:50:19: W291 trailing whitespace\n'}
[2.003154] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.003284] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:51:100: E501 line too long (108 > 99 characters)\n'}
[2.003406] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.003530] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:56:1: W293 blank line contains whitespace\n'}
[2.003681] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.003805] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:60:9: E265 block comment should start with '# '\n"}
[2.003987] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.004169] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:60:100: E501 line too long (148 > 99 characters)\n'}
[2.004298] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.004416] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:61:9: E265 block comment should start with '# '\n"}
[2.004535] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.004651] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:61:100: E501 line too long (106 > 99 characters)\n'}
[2.004773] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.004954] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:62:100: E501 line too long (117 > 99 characters)\n'}
[2.005173] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.005367] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:62:118: W291 trailing whitespace\n'}
[2.005517] (-) TimerEvent: {}
[2.005644] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.005832] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:64:67: W291 trailing whitespace\n'}
[2.005970] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.006200] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:65:88: W291 trailing whitespace\n'}
[2.006411] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.006657] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:75:18: E114 indentation is not a multiple of 4 (comment)\n'}
[2.006865] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.007042] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:75:18: E117 over-indented (comment)\n'}
[2.007917] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.008160] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:76:18: E111 indentation is not a multiple of 4\n'}
[2.008359] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.008536] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:76:18: E117 over-indented\n'}
[2.008716] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.008891] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:77:1: W293 blank line contains whitespace\n'}
[2.009121] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.009337] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:78:22: E111 indentation is not a multiple of 4\n'}
[2.009540] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.009736] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:78:100: E501 line too long (104 > 99 characters)\n'}
[2.009941] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.010161] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:86:100: W291 trailing whitespace\n'}
[2.010321] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.010522] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:87:29: E203 whitespace before ':'\n"}
[2.010724] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.010925] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:88:12: E111 indentation is not a multiple of 4\n'}
[2.011136] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.011268] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:88:100: E501 line too long (115 > 99 characters)\n'}
[2.011387] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.011504] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:89:12: E111 indentation is not a multiple of 4\n'}
[2.011622] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.011743] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:90:12: E111 indentation is not a multiple of 4\n'}
[2.011937] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.012132] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:90:29: E225 missing whitespace around operator\n'}
[2.012321] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.012444] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:91:12: E111 indentation is not a multiple of 4\n'}
[2.012562] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.012677] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:12: E111 indentation is not a multiple of 4\n'}
[2.012796] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.012899] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:35: F541 f-string is missing placeholders\n'}
[2.013055] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.013191] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:59: W291 trailing whitespace\n'}
[2.013353] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.013459] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:95:1: E302 expected 2 blank lines, found 1\n'}
[2.013560] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.013662] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:99:25: E261 at least two spaces before inline comment\n'}
[2.013811] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.013963] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:101:100: E501 line too long (100 > 99 characters)\n'}
[2.014134] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.014364] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:116:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[2.014614] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.014807] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:117:11: W291 trailing whitespace\n'}
[2.015004] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.015202] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:2:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[2.015412] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.015970] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:8:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import PythonExpression'\n"}
[2.016227] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.016345] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:13:20: E225 missing whitespace around operator\n'}
[2.016453] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.016608] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:17:83: E231 missing whitespace after ','\n"}
[2.016760] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.016869] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:17:92: E231 missing whitespace after ','\n"}
[2.017025] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.017215] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:17:100: E501 line too long (123 > 99 characters)\n'}
[2.017440] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.017651] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:18:85: E231 missing whitespace after ','\n"}
[2.017864] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.018066] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:18:94: E231 missing whitespace after ','\n"}
[2.018340] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.018542] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:18:100: E501 line too long (127 > 99 characters)\n'}
[2.018732] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.018928] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:20:40: E231 missing whitespace after ','\n"}
[2.019145] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.019296] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:20:100: E501 line too long (129 > 99 characters)\n'}
[2.019435] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.019572] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:24:100: E501 line too long (103 > 99 characters)\n'}
[2.019769] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.019963] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:25:21: E131 continuation line unaligned for hanging indent\n'}
[2.020185] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.020377] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:26:37: E128 continuation line under-indented for visual indent\n'}
[2.020543] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.020718] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:27:37: E128 continuation line under-indented for visual indent\n'}
[2.020885] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.021049] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:28:37: E128 continuation line under-indented for visual indent\n'}
[2.021185] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.021304] (articubot_one) StdoutLine: {'line': b"3: ./launch/camera.launch.py:1:1: F401 'os' imported but unused\n"}
[2.021468] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.021633] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:6:1: E302 expected 2 blank lines, found 1\n'}
[2.021831] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.022114] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:10:5: E303 too many blank lines (3)\n'}
[2.022290] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.022493] (articubot_one) StdoutLine: {'line': b"3: ./launch/camera.launch.py:18:35: E231 missing whitespace after ','\n"}
[2.022727] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.022987] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:22:5: E122 continuation line missing indentation or outdented\n'}
[2.023299] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.023608] (articubot_one) StdoutLine: {'line': b'3: from launch.substitutions import LaunchConfiguration\n'}
[2.023959] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.024271] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[2.024594] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.024815] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[2.025047] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.025266] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[2.025482] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.025688] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[2.025894] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.026101] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[2.026366] (articubot_one) StdoutLine: {'line': b'3:                                                                           ^\n'}
[2.026611] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[2.026846] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[2.027063] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[2.027322] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.027564] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel','/cmd_vel_joy')]\n"}
[2.027797] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[2.028008] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_in','/diff_cont/cmd_vel_unstamped'),\n"}
[2.028289] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[2.028478] (articubot_one) StdoutLine: {'line': b"3:                         ('/cmd_vel_out','/diff_cont/cmd_vel')]\n"}
[2.028661] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[2.028844] (articubot_one) StdoutLine: {'line': b'3:     return LaunchDescription([\n'}
[2.029026] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.029220] (articubot_one) StdoutLine: {'line': b'3:         twist_stamper       \n'}
[2.029406] (articubot_one) StdoutLine: {'line': b'3:                      ^\n'}
[2.029584] (articubot_one) StdoutLine: {'line': b'3:     ])      ^\n'}
[2.029763] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import RegisterEventHandler\n'}
[2.029959] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.030152] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[2.030339] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.030511] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[2.030692] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.030883] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[2.031110] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.031350] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.031589] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.031829] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.032052] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[2.032367] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.032652] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[2.032856] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[2.033039] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[2.033252] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[2.033431] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[2.033610] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[2.033803] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.033976] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[2.034176] (articubot_one) StdoutLine: {'line': b'3:                                                                              ^\n'}
[2.034359] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[2.034534] (articubot_one) StdoutLine: {'line': b'3:                                                                                       ^\n'}
[2.034708] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[2.034897] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.035085] (articubot_one) StdoutLine: {'line': b'3:             package="twist_mux",\n'}
[2.035326] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[2.035646] (articubot_one) StdoutLine: {'line': b'3:             executable="twist_mux",\n'}
[2.035839] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[2.036039] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]\n"}
[2.036320] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[2.036538] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[2.036757] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.036962] (articubot_one) StdoutLine: {'line': b"3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])\n"}
[2.037270] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.037454] (articubot_one) StdoutLine: {'line': b"3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])\n"}
[2.037636] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.037832] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[2.038011] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[2.038216] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[2.038399] (articubot_one) StdoutLine: {'line': b'3:                                                                                             ^\n'}
[2.038575] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[2.038760] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.038934] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[2.039123] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.039368] (articubot_one) StdoutLine: {'line': b'3:         executable="ros2_control_node",\n'}
[2.039592] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.039812] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[2.040038] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.040305] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[2.040557] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.040798] (articubot_one) StdoutLine: {'line': b'3:         arguments=["diff_cont"],\n'}
[2.041010] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.041247] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[2.041451] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.041658] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[2.041862] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.042063] (articubot_one) StdoutLine: {'line': b'3:         arguments=["joint_broad"],\n'}
[2.042294] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.042496] (articubot_one) StdoutLine: {'line': b"3:     # Code for delaying a node (I haven't tested how effective it is)\n"}
[2.042692] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.042891] (articubot_one) StdoutLine: {'line': b'3:     # \n'}
[2.043100] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[2.043320] (articubot_one) StdoutLine: {'line': b'3:     # Launch them all!\n'}
[2.043517] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.043716] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument\n'}
[2.043919] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.044150] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[2.044418] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.044625] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[2.044817] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.045014] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[2.045251] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.045488] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.045702] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.045972] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.046198] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[2.046423] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.046633] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[2.046839] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[2.047050] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[2.047293] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[2.047511] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[2.047736] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'\n"}
[2.047960] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[2.048223] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'\n"}
[2.048493] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[2.048734] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[2.048982] (articubot_one) StdoutLine: {'line': b'3:                                                                              ^\n'}
[2.049276] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[2.049511] (articubot_one) StdoutLine: {'line': b'3:                                                                                       ^\n'}
[2.049710] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[2.049927] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.050164] (articubot_one) StdoutLine: {'line': b'3:             package="twist_mux",\n'}
[2.050388] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[2.050619] (articubot_one) StdoutLine: {'line': b'3:             executable="twist_mux",\n'}
[2.050838] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[2.051042] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]\n"}
[2.051273] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[2.051478] (articubot_one) StdoutLine: {'line': b'3:     default_world = os.path.join(\n'}
[2.051697] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.051902] (articubot_one) StdoutLine: {'line': b'3:         )    \n'}
[2.052115] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[2.052343] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[2.052572] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.052775] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[2.052983] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[2.053202] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[2.053424] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.053638] (articubot_one) StdoutLine: {'line': b"3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.\n"}
[2.053868] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.054091] (articubot_one) StdoutLine: {'line': b'3:     diff_drive_spawner = Node(\n'}
[2.054325] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.054530] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[2.054735] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.054946] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[2.055173] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.055393] (articubot_one) StdoutLine: {'line': b'3:         arguments=["diff_cont"],\n'}
[2.055594] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.055795] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[2.055999] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.056226] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[2.056461] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.056674] (articubot_one) StdoutLine: {'line': b'3:         arguments=["joint_broad"],\n'}
[2.056923] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.057187] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.057458] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.057688] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.057894] (articubot_one) StdoutLine: {'line': b'3:                                                                           ^\n'}
[2.058105] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.058321] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[2.058528] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.058728] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.058951] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[2.059185] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.059404] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[2.059610] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.059830] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_image",\n'}
[2.060044] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.060276] (articubot_one) StdoutLine: {'line': b'3:         executable="image_bridge",\n'}
[2.060488] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.060715] (articubot_one) StdoutLine: {'line': b'3:         arguments=["/camera/image_raw"]\n'}
[2.060928] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.061163] (articubot_one) StdoutLine: {'line': b"3:     # Code for delaying a node (I haven't tested how effective it is)\n"}
[2.061398] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.061593] (articubot_one) StdoutLine: {'line': b'3:     # \n'}
[2.061784] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[2.061972] (articubot_one) StdoutLine: {'line': b'3:     # Launch them all!\n'}
[2.062178] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.062372] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[2.062561] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.062752] (articubot_one) StdoutLine: {'line': b'3:     default_params_file = os.path.join(get_package_share_directory("articubot_one"),\n'}
[2.062954] (articubot_one) StdoutLine: {'line': b'3:                                                                    ^\n'}
[2.063157] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[2.063353] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.063539] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:3:1: I100 Import statements are in the wrong order. 'from launch.substitutions import LaunchConfiguration' should be before 'from launch_ros.actions import Node'\n"}
[2.063730] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.063917] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:4:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration'\n"}
[2.064121] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.064328] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:6:1: I100 Import statements are in the wrong order. 'import os' should be before 'from launch.actions import DeclareLaunchArgument' and in a different group.\n"}
[2.064544] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.064791] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:7:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[2.065038] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.065350] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:9:1: E302 expected 2 blank lines, found 1\n'}
[2.065600] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.065862] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:12:75: E231 missing whitespace after ','\n"}
[2.066098] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.066328] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:12:84: E231 missing whitespace after ','\n"}
[2.066570] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.066794] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:12:100: E501 line too long (100 > 99 characters)\n'}
[2.066973] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.067166] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:25:36: E231 missing whitespace after ','\n"}
[2.067353] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.067532] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:32:39: E231 missing whitespace after ','\n"}
[2.067715] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.067887] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:33:40: E231 missing whitespace after ','\n"}
[2.068062] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.068289] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:37:5: E303 too many blank lines (2)\n'}
[2.068604] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.068822] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:44:22: W291 trailing whitespace\n'}
[2.069028] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.069257] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:45:7: W292 no newline at end of file\n'}
[2.069472] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.069679] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:10:1: I100 Import statements are in the wrong order. 'from launch.actions import RegisterEventHandler' should be before 'from launch.substitutions import Command'\n"}
[2.069875] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.070067] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:17:1: E303 too many blank lines (3)\n'}
[2.070310] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.070476] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:20:5: E303 too many blank lines (2)\n'}
[2.070655] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.070815] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:20:100: E501 line too long (110 > 99 characters)\n'}
[2.070985] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.071168] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:23:17: E225 missing whitespace around operator\n'}
[2.071341] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.071498] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:23:33: E261 at least two spaces before inline comment\n'}
[2.071662] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.071815] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:23:34: E262 inline comment should start with '# '\n"}
[2.071982] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.072177] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:27:62: E231 missing whitespace after ','\n"}
[2.072371] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.072560] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:27:71: E231 missing whitespace after ','\n"}
[2.072761] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.072962] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:38:5: E303 too many blank lines (2)\n'}
[2.073211] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.073441] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:38:78: E231 missing whitespace after ','\n"}
[2.073684] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.073950] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:38:87: E231 missing whitespace after ','\n"}
[2.074239] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.074479] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:38:100: E501 line too long (104 > 99 characters)\n'}
[2.074662] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.074835] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:40:21: Q000 Double quotes found but single quotes preferred\n'}
[2.074999] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.075179] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:41:24: Q000 Double quotes found but single quotes preferred\n'}
[2.075347] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.075510] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:43:40: E231 missing whitespace after ','\n"}
[2.075674] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.075845] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:46:1: W293 blank line contains whitespace\n'}
[2.076020] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.076220] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:49:5: E303 too many blank lines (4)\n'}
[2.076396] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.076568] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:49:100: E501 line too long (104 > 99 characters)\n'}
[2.076745] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.076915] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:51:84: E231 missing whitespace after ','\n"}
[2.077095] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.077308] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:51:93: E231 missing whitespace after ','\n"}
[2.077606] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.077809] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:51:100: E501 line too long (115 > 99 characters)\n'}
[2.078005] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.078256] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:54:17: Q000 Double quotes found but single quotes preferred\n'}
[2.078497] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.078711] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:55:20: Q000 Double quotes found but single quotes preferred\n'}
[2.078919] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.079201] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:63:17: Q000 Double quotes found but single quotes preferred\n'}
[2.079423] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.079590] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:64:20: Q000 Double quotes found but single quotes preferred\n'}
[2.079765] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.079948] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:65:20: Q000 Double quotes found but single quotes preferred\n'}
[2.080142] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.080326] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:76:17: Q000 Double quotes found but single quotes preferred\n'}
[2.080501] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.080684] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:77:20: Q000 Double quotes found but single quotes preferred\n'}
[2.080888] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.081122] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:78:20: Q000 Double quotes found but single quotes preferred\n'}
[2.081381] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.081613] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:89:5: E303 too many blank lines (2)\n'}
[2.081863] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.082104] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:90:6: W291 trailing whitespace\n'}
[2.082381] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.082642] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:107:5: E303 too many blank lines (3)\n'}
[2.082830] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.082996] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[2.083194] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.083372] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:15:1: E303 too many blank lines (3)\n'}
[2.083544] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.083707] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:18:5: E303 too many blank lines (2)\n'}
[2.083882] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.084047] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:18:100: E501 line too long (110 > 99 characters)\n'}
[2.084239] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.084388] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:21:17: E225 missing whitespace around operator\n'}
[2.084543] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.084695] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:21:33: E261 at least two spaces before inline comment\n'}
[2.084850] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.085003] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:21:34: E262 inline comment should start with '# '\n"}
[2.085229] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.085440] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:25:62: E231 missing whitespace after ','\n"}
[2.085632] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.085840] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:25:71: E231 missing whitespace after ','\n"}
[2.086027] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.086271] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:31:62: E231 missing whitespace after ','\n"}
[2.086506] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.086740] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:31:71: E231 missing whitespace after ','\n"}
[2.086939] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.087209] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:35:78: E231 missing whitespace after ','\n"}
[2.087403] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.087570] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:35:87: E231 missing whitespace after ','\n"}
[2.087747] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.087920] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:35:100: E501 line too long (104 > 99 characters)\n'}
[2.088101] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.088275] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:37:21: Q000 Double quotes found but single quotes preferred\n'}
[2.088457] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.088646] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:38:24: Q000 Double quotes found but single quotes preferred\n'}
[2.088816] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.088983] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:40:40: E231 missing whitespace after ','\n"}
[2.089192] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.089427] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:44:5: E303 too many blank lines (2)\n'}
[2.090567] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.090963] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:48:10: W291 trailing whitespace\n'}
[2.091215] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.091379] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:49:1: W293 blank line contains whitespace\n'}
[2.091536] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.091687] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:62:21: E131 continuation line unaligned for hanging indent\n'}
[2.091847] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.092043] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:62:100: E501 line too long (104 > 99 characters)\n'}
[2.092249] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.092424] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:65:100: E501 line too long (126 > 99 characters)\n'}
[2.092593] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.092765] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:73:5: E303 too many blank lines (2)\n'}
[2.092935] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.093117] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:74:17: Q000 Double quotes found but single quotes preferred\n'}
[2.093328] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.093485] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:75:20: Q000 Double quotes found but single quotes preferred\n'}
[2.093663] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.093837] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:76:20: Q000 Double quotes found but single quotes preferred\n'}
[2.094012] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.094241] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:80:17: Q000 Double quotes found but single quotes preferred\n'}
[2.094490] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.094690] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:81:20: Q000 Double quotes found but single quotes preferred\n'}
[2.094887] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.095096] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:82:20: Q000 Double quotes found but single quotes preferred\n'}
[2.095248] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.095386] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:86:5: E303 too many blank lines (2)\n'}
[2.095582] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.095775] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:86:75: E231 missing whitespace after ','\n"}
[2.095970] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.096211] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:86:84: E231 missing whitespace after ','\n"}
[2.096396] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.096562] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:86:100: E501 line too long (101 > 99 characters)\n'}
[2.096694] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.096861] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:88:17: Q000 Double quotes found but single quotes preferred\n'}
[2.096979] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.097151] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:89:20: Q000 Double quotes found but single quotes preferred\n'}
[2.097285] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.097410] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:98:17: Q000 Double quotes found but single quotes preferred\n'}
[2.097534] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.097737] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:99:20: Q000 Double quotes found but single quotes preferred\n'}
[2.097955] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.098204] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:100:20: Q000 Double quotes found but single quotes preferred\n'}
[2.098417] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.098645] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:105:5: E303 too many blank lines (3)\n'}
[2.098910] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.099181] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:106:6: W291 trailing whitespace\n'}
[2.099481] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.099637] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:123:5: E303 too many blank lines (3)\n'}
[2.099817] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.099972] (articubot_one) StdoutLine: {'line': b"3: ./launch/online_async_launch.py:8:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'from launch_ros.actions import Node'\n"}
[2.100151] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.100350] (articubot_one) StdoutLine: {'line': b'3: ./launch/online_async_launch.py:15:68: Q000 Double quotes found but single quotes preferred\n'}
[2.100529] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.100699] (articubot_one) StdoutLine: {'line': b"3: ./launch/rplidar.launch.py:1:1: F401 'os' imported but unused\n"}
[2.100872] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.101040] (articubot_one) StdoutLine: {'line': b"3: ./launch/rplidar.launch.py:2:1: I201 Missing newline between import groups. 'from launch import LaunchDescription' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[2.101197] (articubot_one) StdoutLine: {'line': b'3: from launch import LaunchDescription\n'}
[2.101328] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.101500] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[2.101671] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.101850] (articubot_one) StdoutLine: {'line': b"3:                 'serial_port': '/dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.3:1.0-port0',\n"}
[2.102021] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.102211] (articubot_one) StdoutLine: {'line': b'3: from launch.substitutions import LaunchConfiguration, Command\n'}
[2.102382] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.102549] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[2.102718] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.102885] (articubot_one) StdoutLine: {'line': b'3: import xacro\n'}
[2.103052] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.103281] (articubot_one) StdoutLine: {'line': b"3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')\n"}
[2.103558] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[2.103756] (articubot_one) StdoutLine: {'line': b"3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')\n"}
[2.103958] (articubot_one) StdoutLine: {'line': b'3:                                                     ^\n'}
[2.104156] (articubot_one) StdoutLine: {'line': b"3:     robot_description_config = Command(['xacro ', xacro_file, ' use_ros2_control:=', use_ros2_control, ' sim_mode:=', use_sim_time])\n"}
[2.104306] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.104504] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[2.104699] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.104893] (articubot_one) StdoutLine: {'line': b'3:     # Launch!\n'}
[2.105094] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.105277] (articubot_one) StdoutLine: {'line': b'3: import xacro\n'}
[2.105400] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.105565] (-) TimerEvent: {}
[2.105671] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[2.105830] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.106053] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument\n'}
[2.106300] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.106526] (articubot_one) StdoutLine: {'line': b'3: from launch.conditions import IfCondition, UnlessCondition\n'}
[2.106728] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.106994] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[2.107306] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.107577] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[2.107836] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.107993] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.108174] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.108339] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.108535] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[2.108711] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[2.108882] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[2.109052] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[2.109207] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[2.109383] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[2.109554] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[2.109726] (articubot_one) StdoutLine: {'line': b'3:         )    \n'}
[2.109894] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[2.110072] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[2.110216] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.110339] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[2.110511] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[2.110679] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[2.110850] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.111020] (articubot_one) StdoutLine: {'line': b"3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.\n"}
[2.111263] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[2.111528] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.111675] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.111820] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[2.112018] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[2.112206] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[2.112409] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[2.112605] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[2.112801] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[2.112998] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[2.113191] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[2.113338] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[2.113481] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.113625] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.113769] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.113966] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.114184] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[2.114392] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[2.114594] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[2.114811] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[2.115004] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[2.115310] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[2.115562] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[2.115811] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[2.116053] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[2.116275] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.116471] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.116661] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.116880] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[2.117101] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[2.117262] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[2.117463] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[2.117660] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[2.117859] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[2.118056] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[2.118227] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[2.118376] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[2.118586] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[2.118784] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[2.118983] (articubot_one) StdoutLine: {'line': b'3:        \n'}
[2.119209] (articubot_one) StdoutLine: {'line': b'3:                                                                                            ^\n'}
[2.119471] (articubot_one) StdoutLine: {'line': b"3:     package='ros_gz_bridge',\n"}
[2.119667] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.119864] (articubot_one) StdoutLine: {'line': b"3:     executable='parameter_bridge',\n"}
[2.120060] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.120225] (articubot_one) StdoutLine: {'line': b'3:     arguments=[\n'}
[2.120425] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.120621] (articubot_one) StdoutLine: {'line': b"3:           '/odom@nav_msgs/msg/Odometry@gz.msgs.Odometry',\n"}
[2.120830] (articubot_one) StdoutLine: {'line': b'3:           ^\n'}
[2.121026] (articubot_one) StdoutLine: {'line': b"3:          '/scan@sensor_msgs/msg/LaserScan@gz.msgs.LaserScan',\n"}
[2.121205] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[2.121353] (articubot_one) StdoutLine: {'line': b"3:     output='screen'\n"}
[2.121551] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.121694] (articubot_one) StdoutLine: {'line': b'3: )\n'}
[2.121836] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.121978] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_image",\n'}
[2.122197] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[2.122398] (articubot_one) StdoutLine: {'line': b'3:         executable="image_bridge",\n'}
[2.122541] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.122743] (articubot_one) StdoutLine: {'line': b'3:         arguments=["/camera/image_raw"]\n'}
[2.122948] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[2.123201] (articubot_one) StdoutLine: {'line': b'3:     #Adding rviz plugin\n'}
[2.123419] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[2.123740] (articubot_one) StdoutLine: {'line': b"3:     share_dir=get_package_share_directory('articubot_one')\n"}
[2.123988] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[2.124280] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[2.124488] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.124670] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[2.124856] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.125058] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[2.125267] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.125445] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[2.125618] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.125791] (articubot_one) StdoutLine: {'line': b'3: from sensor_msgs.msg import LaserScan\n'}
[2.125965] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.126187] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[2.126396] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.126542] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[2.126753] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.126948] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[2.127168] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[2.127420] (articubot_one) StdoutLine: {'line': b'3: from articubot_one.obstacle_avoidance import Obstacle \n'}
[2.127569] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.127765] (articubot_one) StdoutLine: {'line': b'3: from articubot_one.obstacle_avoidance import Obstacle \n'}
[2.127963] (articubot_one) StdoutLine: {'line': b'3:                                                      ^\n'}
[2.128160] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[2.128314] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.128513] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[2.128710] (articubot_one) StdoutLine: {'line': b'3:        ^\n'}
[2.128907] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[2.129111] (articubot_one) StdoutLine: {'line': b'3:             ^\n'}
[2.129265] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[2.129410] (articubot_one) StdoutLine: {'line': b'3:                               ^\n'}
[2.129608] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[2.129803] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[2.130001] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[2.130189] (articubot_one) StdoutLine: {'line': b'3:                            ^\n'}
[2.130336] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[2.130550] (articubot_one) StdoutLine: {'line': b'3:                                                                          ^\n'}
[2.130748] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[2.130954] (articubot_one) StdoutLine: {'line': b'3:                            ^\n'}
[2.131166] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[2.131356] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[2.131554] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[2.131742] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.132041] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[2.132307] (articubot_one) StdoutLine: {'line': b'3:        ^\n'}
[2.132576] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[2.132804] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[2.132984] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[2.133194] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[2.133386] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[2.133601] (articubot_one) StdoutLine: {'line': b'3:        ^\n'}
[2.133806] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[2.134004] (articubot_one) StdoutLine: {'line': b'3:             ^\n'}
[2.134206] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[2.134411] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[2.134609] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[2.134824] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[2.135023] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[2.135262] (articubot_one) StdoutLine: {'line': b'3:                   ^\n'}
[2.135475] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[2.135598] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[2.135721] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[2.135904] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[2.136095] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[2.136229] (articubot_one) StdoutLine: {'line': b'3:                                      ^\n'}
[2.136354] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[2.136537] (articubot_one) StdoutLine: {'line': b'3:                           ^\n'}
[2.136718] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[2.136900] (articubot_one) StdoutLine: {'line': b'3:                                               ^\n'}
[2.137093] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[2.137231] (articubot_one) StdoutLine: {'line': b'3:                                                    ^\n'}
[2.137349] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[2.137468] (articubot_one) StdoutLine: {'line': b'3:                                                             ^\n'}
[2.137584] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.137700] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[2.137817] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.137939] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[2.138139] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.138330] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[2.138522] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.138711] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[2.138859] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[2.139032] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[2.139187] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[2.139397] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[2.139618] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[2.139822] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[2.140005] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[2.140221] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[2.140491] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[2.140724] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[2.140970] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[2.141255] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[2.141410] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[2.141570] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[2.141725] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[2.141881] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[2.142094] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[2.142296] (articubot_one) StdoutLine: {'line': b'3:                                                    ^\n'}
[2.142469] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[2.142641] (articubot_one) StdoutLine: {'line': b'3:                                                     ^\n'}
[2.142812] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[2.142983] (articubot_one) StdoutLine: {'line': b'3:                                                               ^\n'}
[2.143169] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "/scan"\n'}
[2.143348] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[2.143532] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.143702] (articubot_one) StdoutLine: {'line': b'3: ./launch/rplidar.launch.py:5:1: E302 expected 2 blank lines, found 1\n'}
[2.143873] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.144042] (articubot_one) StdoutLine: {'line': b'3: ./launch/rplidar.launch.py:14:100: E501 line too long (113 > 99 characters)\n'}
[2.144274] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.144541] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:6:1: I101 Imported names are in the wrong order. Should be Command, LaunchConfiguration\n'}
[2.144739] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.144933] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:7:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration, Command'\n"}
[2.145158] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.145307] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:10:1: F401 'xacro' imported but unused\n"}
[2.145504] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.145696] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:21:39: E231 missing whitespace after ','\n"}
[2.145893] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.146095] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:21:53: E231 missing whitespace after ','\n"}
[2.146277] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.146398] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:23:100: E501 line too long (132 > 99 characters)\n'}
[2.146567] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.146686] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:24:1: W293 blank line contains whitespace\n'}
[2.146805] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.146923] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:35:5: E303 too many blank lines (2)\n'}
[2.147102] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.147281] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:2:1: I201 Missing newline between import groups. 'import xacro' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[2.147454] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.147638] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:3:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'import xacro'\n"}
[2.147875] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.148123] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[2.148353] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.148540] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:12:1: I100 Import statements are in the wrong order. 'from launch.conditions import IfCondition, UnlessCondition' should be before 'from launch_ros.actions import Node'\n"}
[2.148832] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.149104] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:18:5: E303 too many blank lines (2)\n'}
[2.149415] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.149634] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:18:100: E501 line too long (110 > 99 characters)\n'}
[2.149791] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.149945] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:21:17: E225 missing whitespace around operator\n'}
[2.150111] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.150277] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:21:33: E261 at least two spaces before inline comment\n'}
[2.150463] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.150639] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:21:34: E262 inline comment should start with '# '\n"}
[2.150812] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.150982] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:25:62: E231 missing whitespace after ','\n"}
[2.151206] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.151492] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:25:71: E231 missing whitespace after ','\n"}
[2.151705] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.151913] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:33:10: W291 trailing whitespace\n'}
[2.152154] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.152317] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:34:1: W293 blank line contains whitespace\n'}
[2.152526] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.152733] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:47:21: E131 continuation line unaligned for hanging indent\n'}
[2.152954] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.153193] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:47:100: E501 line too long (104 > 99 characters)\n'}
[2.153345] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.153468] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:50:100: E501 line too long (126 > 99 characters)\n'}
[2.153639] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.153990] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:58:5: Q001 Single quote multiline found but double quotes preferred\n'}
[2.154178] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.154291] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:58:5: E303 too many blank lines (2)\n'}
[2.154394] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.154495] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:59:100: E501 line too long (101 > 99 characters)\n'}
[2.154600] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.154756] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:72:5: E122 continuation line missing indentation or outdented\n'}
[2.154913] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.155068] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:73:5: E122 continuation line missing indentation or outdented\n'}
[2.155198] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.155299] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:74:5: E122 continuation line missing indentation or outdented\n'}
[2.155446] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.155600] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:77:11: E131 continuation line unaligned for hanging indent\n'}
[2.155757] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.155979] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:78:10: E131 continuation line unaligned for hanging indent\n'}
[2.156271] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.156507] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:81:5: E122 continuation line missing indentation or outdented\n'}
[2.156714] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.156924] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:82:1: E122 continuation line missing indentation or outdented\n'}
[2.157181] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.157424] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:85:17: Q000 Double quotes found but single quotes preferred\n'}
[2.157636] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.157763] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:86:20: Q000 Double quotes found but single quotes preferred\n'}
[2.157891] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.158022] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:87:20: Q000 Double quotes found but single quotes preferred\n'}
[2.158212] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.158405] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:89:5: E265 block comment should start with '# '\n"}
[2.158605] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.158794] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:90:14: E225 missing whitespace around operator\n'}
[2.158999] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.159286] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:96:1: W293 blank line contains whitespace\n'}
[2.159547] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.159803] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:136:1: W293 blank line contains whitespace\n'}
[2.160053] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.160312] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:140:1: W293 blank line contains whitespace\n'}
[2.160526] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.160762] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:144:1: W293 blank line contains whitespace\n'}
[2.161012] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.161229] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:5:1: F401 'sensor_msgs.msg.LaserScan' imported but unused\n"}
[2.161419] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.161602] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:6:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[2.161788] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.161971] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:6:1: F401 'geometry_msgs.msg.Twist' imported but unused\n"}
[2.162166] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.162286] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:6:36: W291 trailing whitespace\n'}
[2.162398] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.162507] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:8:1: I100 Import statements are in the wrong order. 'from articubot_one.obstacle_avoidance import Obstacle' should be before 'from geometry_msgs.msg import Twist'\n"}
[2.162619] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.162727] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:8:54: W291 trailing whitespace\n'}
[2.162835] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.162943] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:10:1: E302 expected 2 blank lines, found 1\n'}
[2.163052] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.163258] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:12:8: E203 whitespace before ':'\n"}
[2.163446] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.163628] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:13:13: E225 missing whitespace around operator\n'}
[2.163815] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.164007] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:15:31: E225 missing whitespace around operator\n'}
[2.164250] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.164500] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:15:33: Q000 Double quotes found but single quotes preferred\n'}
[2.164731] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.164886] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:17:28: E231 missing whitespace after ','\n"}
[2.165012] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.165169] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:19:74: W291 trailing whitespace\n'}
[2.165291] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.165411] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:20:28: E231 missing whitespace after ','\n"}
[2.165662] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.165891] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:22:12: E203 whitespace before ':'\n"}
[2.166104] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.166250] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:24:1: E302 expected 2 blank lines, found 0\n'}
[2.166369] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.166482] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:26:8: E203 whitespace before ':'\n"}
[2.166591] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.166697] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:28:12: E203 whitespace before ':'\n"}
[2.166803] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.166909] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:30:1: E302 expected 2 blank lines, found 0\n'}
[2.167016] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.167181] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:32:8: E203 whitespace before ':'\n"}
[2.167441] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.167696] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:33:13: E225 missing whitespace around operator\n'}
[2.167955] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.168236] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:34:9: E265 block comment should start with '# '\n"}
[2.168480] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.168698] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:35:18: E225 missing whitespace around operator\n'}
[2.168900] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.169146] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:36:19: E225 missing whitespace around operator\n'}
[2.169365] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.169480] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:36:39: Q000 Double quotes found but single quotes preferred\n'}
[2.169592] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.169701] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:18: E225 missing whitespace around operator\n'}
[2.169812] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.169921] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:38: Q000 Double quotes found but single quotes preferred\n'}
[2.170031] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.170165] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:38:27: E225 missing whitespace around operator\n'}
[2.170280] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.170388] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:38:47: Q000 Double quotes found but single quotes preferred\n'}
[2.170498] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.170605] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:39:52: W291 trailing whitespace\n'}
[2.170715] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.170821] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:40:61: W291 trailing whitespace\n'}
[2.170928] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.171033] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:41:36: E231 missing whitespace after ','\n"}
[2.171178] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.171290] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:41:43: E203 whitespace before ','\n"}
[2.171399] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.171507] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:41:44: E231 missing whitespace after ','\n"}
[2.171615] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.171721] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:41:45: Q000 Double quotes found but single quotes preferred\n'}
[2.171830] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.171937] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:41:45: F541 f-string is missing placeholders\n'}
[2.172111] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.172313] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:42:37: E231 missing whitespace after ','\n"}
[2.172536] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.172786] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:42:44: Q000 Double quotes found but single quotes preferred\n'}
[2.173017] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.173213] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:42:44: F541 f-string is missing placeholders\n'}
[2.173337] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.173448] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:43:36: E231 missing whitespace after ','\n"}
[2.173559] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.173718] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:43:43: Q000 Double quotes found but single quotes preferred\n'}
[2.173944] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.174206] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:43:43: F541 f-string is missing placeholders\n'}
[2.174383] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.174590] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:44:45: E231 missing whitespace after ','\n"}
[2.174820] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.175026] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:44:52: E231 missing whitespace after ','\n"}
[2.175249] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.175395] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:44:53: F541 f-string is missing placeholders\n'}
[2.175513] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.175676] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:45:63: W291 trailing whitespace\n'}
[2.175842] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.176027] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:47:26: E225 missing whitespace around operator\n'}
[2.176289] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.176510] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "/scan"\n'}
[2.176714] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[2.176915] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "/cmd_vel"\n'}
[2.177134] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[2.177326] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[2.177508] (articubot_one) StdoutLine: {'line': b'3:                                          ^\n'}
[2.177690] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[2.177872] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[2.178066] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[2.178281] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[2.178407] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[2.178569] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[2.178730] (articubot_one) StdoutLine: {'line': b'3: 7     E111 indentation is not a multiple of 4\n'}
[2.178893] (articubot_one) StdoutLine: {'line': b'3: 1     E114 indentation is not a multiple of 4 (comment)\n'}
[2.179055] (articubot_one) StdoutLine: {'line': b'3: 2     E117 over-indented (comment)\n'}
[2.179186] (articubot_one) StdoutLine: {'line': b'3: 6     E122 continuation line missing indentation or outdented\n'}
[2.179296] (articubot_one) StdoutLine: {'line': b'3: 3     E128 continuation line under-indented for visual indent\n'}
[2.179400] (articubot_one) StdoutLine: {'line': b'3: 5     E131 continuation line unaligned for hanging indent\n'}
[2.179503] (articubot_one) StdoutLine: {'line': b"3: 11    E203 whitespace before ':'\n"}
[2.179606] (articubot_one) StdoutLine: {'line': b'3: 18    E225 missing whitespace around operator\n'}
[2.179714] (articubot_one) StdoutLine: {'line': b"3: 44    E231 missing whitespace after ','\n"}
[2.179875] (articubot_one) StdoutLine: {'line': b'3: 4     E261 at least two spaces before inline comment\n'}
[2.180037] (articubot_one) StdoutLine: {'line': b"3: 3     E262 inline comment should start with '# '\n"}
[2.180213] (articubot_one) StdoutLine: {'line': b"3: 6     E265 block comment should start with '# '\n"}
[2.180330] (articubot_one) StdoutLine: {'line': b'3: 1     E275 missing whitespace after keyword\n'}
[2.180491] (articubot_one) StdoutLine: {'line': b'3: 7     E302 expected 2 blank lines, found 1\n'}
[2.180602] (articubot_one) StdoutLine: {'line': b'3: 19    E303 too many blank lines (2)\n'}
[2.180710] (articubot_one) StdoutLine: {'line': b'3: 1     E305 expected 2 blank lines after class or function definition, found 1\n'}
[2.180836] (articubot_one) StdoutLine: {'line': b'3: 30    E501 line too long (110 > 99 characters)\n'}
[2.181042] (articubot_one) StdoutLine: {'line': b"3: 5     F401 'os' imported but unused\n"}
[2.181259] (articubot_one) StdoutLine: {'line': b'3: 5     F541 f-string is missing placeholders\n'}
[2.181479] (articubot_one) StdoutLine: {'line': b"3: 13    I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[2.181674] (articubot_one) StdoutLine: {'line': b'3: 3     I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[2.181851] (articubot_one) StdoutLine: {'line': b"3: 5     I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.\n"}
[2.182124] (articubot_one) StdoutLine: {'line': b'3: 45    Q000 Double quotes found but single quotes preferred\n'}
[2.182421] (articubot_one) StdoutLine: {'line': b'3: 1     Q001 Single quote multiline found but double quotes preferred\n'}
[2.182668] (articubot_one) StdoutLine: {'line': b'3: 22    W291 trailing whitespace\n'}
[2.182925] (articubot_one) StdoutLine: {'line': b'3: 1     W292 no newline at end of file\n'}
[2.183101] (articubot_one) StdoutLine: {'line': b'3: 14    W293 blank line contains whitespace\n'}
[2.183282] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:47:29: Q000 Double quotes found but single quotes preferred\n'}
[2.183459] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.183623] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:48:29: Q000 Double quotes found but single quotes preferred\n'}
[2.183797] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.183963] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:49:42: W291 trailing whitespace\n'}
[2.184144] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.184309] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:50:12: E203 whitespace before ':'\n"}
[2.184466] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.184621] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:54:12: E225 missing whitespace around operator\n'}
[2.184777] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.184934] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:54:24: E203 whitespace before ':'\n"}
[2.185108] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.185372] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.185592] (articubot_one) StdoutLine: {'line': b'3: 15 files checked\n'}
[2.185795] (articubot_one) StdoutLine: {'line': b'3: 282 errors\n'}
[2.185993] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.186183] (articubot_one) StdoutLine: {'line': b"3: 'E'-type errors: 168\n"}
[2.186335] (articubot_one) StdoutLine: {'line': b"3: 'F'-type errors: 10\n"}
[2.186480] (articubot_one) StdoutLine: {'line': b"3: 'I'-type errors: 21\n"}
[2.186679] (articubot_one) StdoutLine: {'line': b"3: 'Q'-type errors: 46\n"}
[2.186878] (articubot_one) StdoutLine: {'line': b"3: 'W'-type errors: 37\n"}
[2.187083] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.187274] (articubot_one) StdoutLine: {'line': b'3: Checked files:\n'}
[2.187402] (articubot_one) StdoutLine: {'line': b'3: \n'}
[2.187578] (articubot_one) StdoutLine: {'line': b'3: * ./setup.py\n'}
[2.187707] (articubot_one) StdoutLine: {'line': b'3: * ./test/pytest/test_laserObstacle.py\n'}
[2.187836] (articubot_one) StdoutLine: {'line': b'3: * ./articubot_one/obstacle_avoidance.py\n'}
[2.187963] (articubot_one) StdoutLine: {'line': b'3: * ./articubot_one/__init__.py\n'}
[2.188145] (articubot_one) StdoutLine: {'line': b'3: * ./launch/joystick.launch.py\n'}
[2.188329] (articubot_one) StdoutLine: {'line': b'3: * ./launch/online_async_launch.py\n'}
[2.188502] (articubot_one) StdoutLine: {'line': b'3: * ./launch/ball_tracker.launch.py\n'}
[2.188678] (articubot_one) StdoutLine: {'line': b'3: * ./launch/localization_launch.py\n'}
[2.188865] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rviz_gazebo.launch.py\n'}
[2.189040] (articubot_one) StdoutLine: {'line': b'3: * ./launch/navigation_launch.py\n'}
[2.189198] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rsp.launch.py\n'}
[2.189356] (articubot_one) StdoutLine: {'line': b'3: * ./launch/launch_robot.launch.py\n'}
[2.189602] (articubot_one) StdoutLine: {'line': b'3: * ./launch/camera.launch.py\n'}
[2.189815] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rplidar.launch.py\n'}
[2.190008] (articubot_one) StdoutLine: {'line': b'3: * ./launch/launch_sim.launch.py\n'}
[2.190312] (articubot_one) StdoutLine: {'line': b'3: -- run_test.py: return code 1\n'}
[2.190564] (articubot_one) StdoutLine: {'line': b"3: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml'\n"}
[2.190817] (articubot_one) StdoutLine: {'line': b'3/6 Test #3: flake8 ...........................***Failed    0.60 sec\n'}
[2.191099] (articubot_one) StdoutLine: {'line': b'test 4\n'}
[2.191293] (articubot_one) StdoutLine: {'line': b'    Start 4: lint_cmake\n'}
[2.191457] (articubot_one) StdoutLine: {'line': b'\n'}
[2.191620] (articubot_one) StdoutLine: {'line': b'4: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/jazzy/bin/ament_lint_cmake" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml"\n'}
[2.191831] (articubot_one) StdoutLine: {'line': b'4: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[2.192015] (articubot_one) StdoutLine: {'line': b'4: Test timeout computed to be: 60\n'}
[2.192225] (articubot_one) StdoutLine: {'line': b"4: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[2.192406] (articubot_one) StdoutLine: {'line': b'4:  - /opt/ros/jazzy/bin/ament_lint_cmake --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml\n'}
[2.205703] (-) TimerEvent: {}
[2.272538] (articubot_one) StdoutLine: {'line': b'4: CMakeLists.txt:40: Line ends in whitespace [whitespace/eol]\n'}
[2.272746] (articubot_one) StdoutLine: {'line': b'4: CMakeLists.txt:55: Line ends in whitespace [whitespace/eol]\n'}
[2.272920] (articubot_one) StdoutLine: {'line': b'4: \n'}
[2.273087] (articubot_one) StdoutLine: {'line': b'4: \n'}
[2.273257] (articubot_one) StdoutLine: {'line': b'4: 2 errors\n'}
[2.292520] (articubot_one) StdoutLine: {'line': b'4: -- run_test.py: return code 1\n'}
[2.292823] (articubot_one) StdoutLine: {'line': b"4: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml'\n"}
[2.305838] (-) TimerEvent: {}
[2.308175] (articubot_one) StdoutLine: {'line': b'4/6 Test #4: lint_cmake .......................***Failed    0.29 sec\n'}
[2.308594] (articubot_one) StdoutLine: {'line': b'test 5\n'}
[2.308720] (articubot_one) StdoutLine: {'line': b'    Start 5: pep257\n'}
[2.308853] (articubot_one) StdoutLine: {'line': b'\n'}
[2.309028] (articubot_one) StdoutLine: {'line': b'5: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_pep257/pep257.txt" "--command" "/opt/ros/jazzy/bin/ament_pep257" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml"\n'}
[2.309206] (articubot_one) StdoutLine: {'line': b'5: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[2.309330] (articubot_one) StdoutLine: {'line': b'5: Test timeout computed to be: 60\n'}
[2.386681] (articubot_one) StdoutLine: {'line': b"5: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[2.386947] (articubot_one) StdoutLine: {'line': b'5:  - /opt/ros/jazzy/bin/ament_pep257 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml\n'}
[2.405967] (-) TimerEvent: {}
[2.506212] (-) TimerEvent: {}
[2.578456] (articubot_one) StdoutLine: {'line': b'5: checking ./articubot_one/__init__.py\n'}
[2.578752] (articubot_one) StdoutLine: {'line': b'5: checking ./articubot_one/obstacle_avoidance.py\n'}
[2.578970] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/ball_tracker.launch.py\n'}
[2.579207] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/camera.launch.py\n'}
[2.579393] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/joystick.launch.py\n'}
[2.579567] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/launch_robot.launch.py\n'}
[2.579746] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/launch_sim.launch.py\n'}
[2.579922] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/localization_launch.py\n'}
[2.580092] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/navigation_launch.py\n'}
[2.580267] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/online_async_launch.py\n'}
[2.580423] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rplidar.launch.py\n'}
[2.580579] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rsp.launch.py\n'}
[2.580736] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rviz_gazebo.launch.py\n'}
[2.580893] (articubot_one) StdoutLine: {'line': b'5: checking ./setup.py\n'}
[2.581050] (articubot_one) StdoutLine: {'line': b'5: checking ./test/pytest/test_laserObstacle.py\n'}
[2.581235] (articubot_one) StdoutLine: {'line': b'5: No problems found\n'}
[2.605737] (articubot_one) StdoutLine: {'line': b'5: -- run_test.py: return code 0\n'}
[2.606039] (articubot_one) StdoutLine: {'line': b"5: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml'\n"}
[2.606239] (-) TimerEvent: {}
[2.622870] (articubot_one) StdoutLine: {'line': b'5/6 Test #5: pep257 ...........................   Passed    0.31 sec\n'}
[2.623274] (articubot_one) StdoutLine: {'line': b'test 6\n'}
[2.623499] (articubot_one) StdoutLine: {'line': b'    Start 6: xmllint\n'}
[2.623624] (articubot_one) StdoutLine: {'line': b'\n'}
[2.623730] (articubot_one) StdoutLine: {'line': b'6: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_xmllint/xmllint.txt" "--command" "/opt/ros/jazzy/bin/ament_xmllint" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml"\n'}
[2.623944] (articubot_one) StdoutLine: {'line': b'6: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[2.624134] (articubot_one) StdoutLine: {'line': b'6: Test timeout computed to be: 60\n'}
[2.702464] (articubot_one) StdoutLine: {'line': b"6: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[2.702736] (articubot_one) StdoutLine: {'line': b'6:  - /opt/ros/jazzy/bin/ament_xmllint --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml\n'}
[2.706363] (-) TimerEvent: {}
[2.806846] (-) TimerEvent: {}
[2.907239] (-) TimerEvent: {}
[3.007627] (-) TimerEvent: {}
[3.108185] (-) TimerEvent: {}
[3.208943] (-) TimerEvent: {}
[3.309490] (-) TimerEvent: {}
[3.410015] (-) TimerEvent: {}
[3.510590] (-) TimerEvent: {}
[3.611407] (-) TimerEvent: {}
[3.711999] (-) TimerEvent: {}
[3.812628] (-) TimerEvent: {}
[3.913516] (-) TimerEvent: {}
[4.014343] (-) TimerEvent: {}
[4.115303] (-) TimerEvent: {}
[4.131749] (articubot_one) StdoutLine: {'line': b"6: File 'package.xml' is valid\n"}
[4.132650] (articubot_one) StdoutLine: {'line': b'6: \n'}
[4.133125] (articubot_one) StdoutLine: {'line': b'6: No problems found\n'}
[4.184425] (articubot_one) StdoutLine: {'line': b'6: -- run_test.py: return code 0\n'}
[4.185296] (articubot_one) StdoutLine: {'line': b"6: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml'\n"}
[4.215487] (-) TimerEvent: {}
[4.225496] (articubot_one) StdoutLine: {'line': b'6/6 Test #6: xmllint ..........................   Passed    1.60 sec\n'}
[4.227571] (articubot_one) StdoutLine: {'line': b'\n'}
[4.228966] (articubot_one) StdoutLine: {'line': b'33% tests passed\x1b[0;0m, \x1b[0;31m4 tests failed\x1b[0;0m out of 6\n'}
[4.229835] (articubot_one) StdoutLine: {'line': b'\n'}
[4.230526] (articubot_one) StdoutLine: {'line': b'Label Time Summary:\n'}
[4.231316] (articubot_one) StdoutLine: {'line': b'copyright     =   0.39 sec*proc (1 test)\n'}
[4.231947] (articubot_one) StdoutLine: {'line': b'flake8        =   0.60 sec*proc (1 test)\n'}
[4.232547] (articubot_one) StdoutLine: {'line': b'lint_cmake    =   0.29 sec*proc (1 test)\n'}
[4.233130] (articubot_one) StdoutLine: {'line': b'linter        =   3.19 sec*proc (5 tests)\n'}
[4.233852] (articubot_one) StdoutLine: {'line': b'pep257        =   0.31 sec*proc (1 test)\n'}
[4.234516] (articubot_one) StdoutLine: {'line': b'pytest        =   0.99 sec*proc (1 test)\n'}
[4.235184] (articubot_one) StdoutLine: {'line': b'xmllint       =   1.60 sec*proc (1 test)\n'}
[4.235877] (articubot_one) StdoutLine: {'line': b'\n'}
[4.236563] (articubot_one) StdoutLine: {'line': b'Total Test time (real) =   4.18 sec\n'}
[4.237214] (articubot_one) StdoutLine: {'line': b'\n'}
[4.237889] (articubot_one) StdoutLine: {'line': b'The following tests FAILED:\n'}
[4.238679] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  1 - laser_obstacle_test (Failed)\x1b[0;0m\n'}
[4.239550] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  2 - copyright (Failed)\x1b[0;0m\n'}
[4.240214] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  3 - flake8 (Failed)\x1b[0;0m\n'}
[4.240894] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  4 - lint_cmake (Failed)\x1b[0;0m\n'}
[4.247523] (articubot_one) StderrLine: {'line': b'Errors while running CTest\n'}
[4.248470] (articubot_one) StderrLine: {'line': b'Output from these tests are in: /home/jonatan/ros2_ws/build/articubot_one/Testing/Temporary/LastTest.log\n'}
[4.249156] (articubot_one) StderrLine: {'line': b'Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.\n'}
[4.255945] (articubot_one) CommandEnded: {'returncode': 8}
[4.257288] (articubot_one) TestFailure: {'identifier': 'articubot_one'}
[4.257397] (articubot_one) JobEnded: {'identifier': 'articubot_one', 'rc': 0}
[4.260277] (-) EventReactorShutdown: {}
