[0.000000] (-) TimerEvent: {}
[0.000877] (articubot_one) JobQueued: {'identifier': 'articubot_one', 'dependencies': OrderedDict({'articubot_one': '/home/jonatan/ros2_ws/install/articubot_one'})}
[0.000954] (articubot_one) JobStarted: {'identifier': 'articubot_one'}
[0.027275] (articubot_one) Command: {'cmd': ['/usr/bin/ctest', '-C', 'Release', '-D', 'ExperimentalTest', '--no-compress-output', '-V', '--force-new-ctest-process'], 'cwd': '/home/jonatan/ros2_ws/build/articubot_one', 'env': OrderedDict({'GJS_DEBUG_TOPICS': 'JS ERROR;JS LOG', 'XDG_ACTIVATION_TOKEN': '2ddf9c17-5cf4-48ad-bc40-f39f8ecbfeb7', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'jonatan', 'GZ_CONFIG_PATH': '/opt/ros/jazzy/opt/gz_sim_vendor/share/gz:/opt/ros/jazzy/opt/sdformat_vendor/share/gz:/opt/ros/jazzy/opt/gz_gui_vendor/share/gz:/opt/ros/jazzy/opt/gz_transport_vendor/share/gz:/opt/ros/jazzy/opt/gz_rendering_vendor/share/gz:/opt/ros/jazzy/opt/gz_plugin_vendor/share/gz:/opt/ros/jazzy/opt/gz_fuel_tools_vendor/share/gz:/opt/ros/jazzy/opt/gz_msgs_vendor/share/gz:/opt/ros/jazzy/opt/gz_common_vendor/share/gz', 'XDG_SESSION_TYPE': 'wayland', 'CLUTTER_DISABLE_MIPMAPPED_TEXT': '1', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/opt/ros/jazzy/opt/gz_sim_vendor/lib:/opt/ros/jazzy/opt/gz_sensors_vendor/lib:/opt/ros/jazzy/opt/gz_physics_vendor/lib:/opt/ros/jazzy/opt/sdformat_vendor/lib:/opt/ros/jazzy/opt/rviz_ogre_vendor/lib:/opt/ros/jazzy/lib/x86_64-linux-gnu:/opt/ros/jazzy/opt/gz_gui_vendor/lib:/opt/ros/jazzy/opt/gz_transport_vendor/lib:/opt/ros/jazzy/opt/gz_rendering_vendor/lib:/opt/ros/jazzy/opt/gz_plugin_vendor/lib:/opt/ros/jazzy/opt/gz_fuel_tools_vendor/lib:/opt/ros/jazzy/opt/gz_msgs_vendor/lib:/opt/ros/jazzy/opt/gz_common_vendor/lib:/opt/ros/jazzy/opt/gz_math_vendor/lib:/opt/ros/jazzy/opt/gz_utils_vendor/lib:/opt/ros/jazzy/opt/gz_tools_vendor/lib:/opt/ros/jazzy/opt/gz_ogre_next_vendor/lib:/opt/ros/jazzy/opt/gz_dartsim_vendor/lib:/opt/ros/jazzy/opt/gz_cmake_vendor/lib:/opt/ros/jazzy/lib', 'LESS': '-R', 'HOME': '/home/jonatan', 'OLDPWD': '/home/jonatan', 'DESKTOP_SESSION': 'ubuntu', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'ZSH': '/home/jonatan/.oh-my-zsh', 'GIO_LAUNCHED_DESKTOP_FILE': '/usr/share/applications/terminator.desktop', 'ROS_PYTHON_VERSION': '3', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'GTK_MODULES': 'gail:atk-bridge', 'PAGER': 'less', 'PS1': '\\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$', 'MANAGERPID': '2008', 'P9K_TTY': 'old', 'SYSTEMD_EXEC_PID': '2272', 'GSM_SKIP_SSH_AGENT_WORKAROUND': 'true', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'GIO_LAUNCHED_DESKTOP_FILE_PID': '3097', 'WAYLAND_DISPLAY': 'wayland-0', 'ROS_DISTRO': 'jazzy', 'LOGNAME': 'jonatan', '_P9K_SSH_TTY': '/dev/pts/2', 'JOURNAL_STREAM': '9:19463', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'MEMORY_PRESSURE_WATCH': '/sys/fs/cgroup/user.slice/user-1000.slice/user@1000.service/session.slice/org.gnome.Shell@wayland.service/memory.pressure', 'XDG_SESSION_CLASS': 'user', 'USERNAME': 'jonatan', 'TERM': 'xterm-256color', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'PATH': '/opt/ros/jazzy/opt/gz_msgs_vendor/bin:/opt/ros/jazzy/opt/gz_tools_vendor/bin:/opt/ros/jazzy/opt/gz_ogre_next_vendor/bin:/opt/ros/jazzy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin', 'SESSION_MANAGER': 'local/HP-EliteBook-x360-1030-G2:@/tmp/.ICE-unix/2219,unix/HP-EliteBook-x360-1030-G2:/tmp/.ICE-unix/2219', 'INVOCATION_ID': '1d5efdbd10c34d46a8570a6c200c5332', 'XDG_MENU_PREFIX': 'gnome-', 'GNOME_SETUP_DISPLAY': ':1', 'XDG_RUNTIME_DIR': '/run/user/1000', 'DISPLAY': ':0', 'LANG': 'en_US.UTF-8', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'XMODIFIERS': '@im=ibus', 'XDG_SESSION_DESKTOP': 'ubuntu', 'XAUTHORITY': '/run/user/1000/.mutter-Xwaylandauth.DBMW62', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:', 'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh', 'AMENT_PREFIX_PATH': '/home/jonatan/ros2_ws/install/articubot_one:/opt/ros/jazzy', 'SHELL': '/usr/bin/zsh', 'TERMINATOR_UUID': 'urn:uuid:0947d2af-0509-4362-9f98-b841aba16eb4', 'QT_ACCESSIBILITY': '1', 'GDMSESSION': 'ubuntu', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'IGN_GAZEBO_RESOURCE_PATH': '/opt/ros/jazzy/share', 'GJS_DEBUG_OUTPUT': 'stderr', 'P9K_SSH': '0', 'ROS_AUTOMATIC_DISCOVERY_RANGE': 'SUBNET', 'QT_IM_MODULE': 'ibus', 'PWD': '/home/jonatan/ros2_ws/build/articubot_one', 'LC_ALL': 'en_US.UTF-8', '_P9K_TTY': '/dev/pts/2', 'XDG_DATA_DIRS': '/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'PYTHONPATH': '/home/jonatan/ros2_ws/install/articubot_one/lib/python3.12/site-packages:/opt/ros/jazzy/lib/python3.12/site-packages', 'COLCON': '1', 'MEMORY_PRESSURE_WRITE': 'c29tZSAyMDAwMDAgMjAwMDAwMAA=', 'VTE_VERSION': '7600', 'CMAKE_PREFIX_PATH': '/home/jonatan/ros2_ws/install/articubot_one:/opt/ros/jazzy/opt/gz_sim_vendor:/opt/ros/jazzy/opt/gz_sensors_vendor:/opt/ros/jazzy/opt/gz_physics_vendor:/opt/ros/jazzy/opt/sdformat_vendor:/opt/ros/jazzy/opt/gz_gui_vendor:/opt/ros/jazzy/opt/gz_transport_vendor:/opt/ros/jazzy/opt/gz_rendering_vendor:/opt/ros/jazzy/opt/gz_plugin_vendor:/opt/ros/jazzy/opt/gz_fuel_tools_vendor:/opt/ros/jazzy/opt/gz_msgs_vendor:/opt/ros/jazzy/opt/gz_common_vendor:/opt/ros/jazzy/opt/gz_math_vendor:/opt/ros/jazzy/opt/gz_utils_vendor:/opt/ros/jazzy/opt/gz_tools_vendor:/opt/ros/jazzy/opt/gz_ogre_next_vendor:/opt/ros/jazzy/opt/gz_dartsim_vendor:/opt/ros/jazzy/opt/gz_cmake_vendor'}), 'shell': False}
[0.038245] (articubot_one) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.038767] (articubot_one) StdoutLine: {'line': b'Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.038923] (articubot_one) StdoutLine: {'line': b'   Site: HP-EliteBook-x360-1030-G2\n'}
[0.039066] (articubot_one) StdoutLine: {'line': b'   Build name: (empty)\n'}
[0.039207] (articubot_one) StdoutLine: {'line': b' Add coverage exclude regular expressions.\n'}
[0.039369] (articubot_one) StdoutLine: {'line': b'Create new tag: 20250518-1848 - Experimental\n'}
[0.039545] (articubot_one) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.039722] (articubot_one) StdoutLine: {'line': b'Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.040073] (articubot_one) StdoutLine: {'line': b'Test project /home/jonatan/ros2_ws/build/articubot_one\n'}
[0.040225] (articubot_one) StdoutLine: {'line': b'Constructing a list of tests\n'}
[0.040368] (articubot_one) StdoutLine: {'line': b'Done constructing a list of tests\n'}
[0.040510] (articubot_one) StdoutLine: {'line': b'Updating test list for fixtures\n'}
[0.040664] (articubot_one) StdoutLine: {'line': b'Added 0 tests to meet fixture requirements\n'}
[0.040807] (articubot_one) StdoutLine: {'line': b'Checking test dependency graph...\n'}
[0.040948] (articubot_one) StdoutLine: {'line': b'Checking test dependency graph end\n'}
[0.041081] (articubot_one) StdoutLine: {'line': b'test 1\n'}
[0.041201] (articubot_one) StdoutLine: {'line': b'    Start 1: laser_obstacle_test\n'}
[0.041283] (articubot_one) StdoutLine: {'line': b'\n'}
[0.041365] (articubot_one) StdoutLine: {'line': b'1: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test.txt" "--command" "/usr/bin/python3" "-u" "-m" "pytest" "/home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py" "-o" "cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache" "--junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--junit-prefix=articubot_one"\n'}
[0.041464] (articubot_one) StdoutLine: {'line': b'1: Working Directory: /home/jonatan/ros2_ws/build/articubot_one\n'}
[0.041546] (articubot_one) StdoutLine: {'line': b'1: Test timeout computed to be: 360\n'}
[0.099710] (-) TimerEvent: {}
[0.112596] (articubot_one) StdoutLine: {'line': b"1: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/build/articubot_one':\n"}
[0.112825] (articubot_one) StdoutLine: {'line': b'1:  - /usr/bin/python3 -u -m pytest /home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py -o cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache --junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml --junit-prefix=articubot_one\n'}
[0.199822] (-) TimerEvent: {}
[0.300027] (-) TimerEvent: {}
[0.400196] (-) TimerEvent: {}
[0.500387] (-) TimerEvent: {}
[0.539823] (articubot_one) StdoutLine: {'line': b'1: ============================= test session starts ==============================\n'}
[0.540009] (articubot_one) StdoutLine: {'line': b'1: platform linux -- Python 3.12.3, pytest-7.4.4, pluggy-1.4.0\n'}
[0.544677] (articubot_one) StdoutLine: {'line': b'1: cachedir: /home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache\n'}
[0.544842] (articubot_one) StdoutLine: {'line': b'1: rootdir: /home/jonatan/ros2_ws/src/articubot_one\n'}
[0.544943] (articubot_one) StdoutLine: {'line': b'1: plugins: launch-testing-3.4.4, ament-xmllint-0.17.2, ament-pep257-0.17.2, ament-copyright-0.17.2, ament-flake8-0.17.2, launch-testing-ros-0.26.7, ament-lint-0.17.2, cov-4.1.0, typeguard-4.1.5, colcon-core-0.19.0\n'}
[0.600528] (-) TimerEvent: {}
[0.700719] (-) TimerEvent: {}
[0.750153] (articubot_one) StdoutLine: {'line': b'1: collected 2 items\n'}
[0.750730] (articubot_one) StdoutLine: {'line': b'1: \n'}
[0.800808] (-) TimerEvent: {}
[0.901438] (-) TimerEvent: {}
[1.001996] (-) TimerEvent: {}
[1.102288] (-) TimerEvent: {}
[1.202882] (-) TimerEvent: {}
[1.303419] (-) TimerEvent: {}
[1.403962] (-) TimerEvent: {}
[1.504576] (-) TimerEvent: {}
[1.604940] (-) TimerEvent: {}
[1.705551] (-) TimerEvent: {}
[1.805897] (-) TimerEvent: {}
[1.906484] (-) TimerEvent: {}
[2.007086] (-) TimerEvent: {}
[2.107656] (-) TimerEvent: {}
[2.208279] (-) TimerEvent: {}
[2.308928] (-) TimerEvent: {}
[2.409546] (-) TimerEvent: {}
[2.510143] (-) TimerEvent: {}
[2.610714] (-) TimerEvent: {}
[2.711302] (-) TimerEvent: {}
[2.811896] (-) TimerEvent: {}
[2.912442] (-) TimerEvent: {}
[3.012781] (-) TimerEvent: {}
[3.113248] (-) TimerEvent: {}
[3.213797] (-) TimerEvent: {}
[3.314243] (-) TimerEvent: {}
[3.414860] (-) TimerEvent: {}
[3.515210] (-) TimerEvent: {}
[3.615554] (-) TimerEvent: {}
[3.716182] (-) TimerEvent: {}
[3.816512] (-) TimerEvent: {}
[3.917102] (-) TimerEvent: {}
[4.017603] (-) TimerEvent: {}
[4.118165] (-) TimerEvent: {}
[4.218738] (-) TimerEvent: {}
[4.319266] (-) TimerEvent: {}
[4.419806] (-) TimerEvent: {}
[4.520366] (-) TimerEvent: {}
[4.620843] (-) TimerEvent: {}
[4.721392] (-) TimerEvent: {}
[4.821739] (-) TimerEvent: {}
[4.922004] (-) TimerEvent: {}
[4.930441] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py .F             [100%]\n'}
[4.931898] (articubot_one) StdoutLine: {'line': b'1: \n'}
[4.932332] (articubot_one) StdoutLine: {'line': b'1: =================================== FAILURES ===================================\n'}
[4.932610] (articubot_one) StdoutLine: {'line': b'1: ___________________________ test_obstacle_parameters ___________________________\n'}
[4.933136] (articubot_one) StdoutLine: {'line': b'1: \n'}
[4.933493] (articubot_one) StdoutLine: {'line': b'1: obstacle_node = (<articubot_one.obstacle_avoidance.Obstacle object at 0x7f5aaf8aea20>, <rclpy.executors.SingleThreadedExecutor object at 0x7f5ab0889a60>)\n'}
[4.933810] (articubot_one) StdoutLine: {'line': b'1: \n'}
[4.934147] (articubot_one) StdoutLine: {'line': b'1:     def test_obstacle_parameters(obstacle_node):\n'}
[4.934469] (articubot_one) StdoutLine: {'line': b'1:         """Test ROS parameters after the node has had a chance to spin."""\n'}
[4.934808] (articubot_one) StdoutLine: {'line': b'1:         node, executor = obstacle_node\n'}
[4.935134] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[4.935339] (articubot_one) StdoutLine: {'line': b'1:         # Now access parameters after the node has spun briefly\n'}
[4.935520] (articubot_one) StdoutLine: {'line': b'1:         # Note: Getting parameters this way works if they are declared\n'}
[4.935701] (articubot_one) StdoutLine: {'line': b'1:         # and have default values, or if they are set externally\n'}
[4.935880] (articubot_one) StdoutLine: {'line': b'1:         # AND the node has spun to receive them.\n'}
[4.936093] (articubot_one) StdoutLine: {'line': b'1:         try:\n'}
[4.936287] (articubot_one) StdoutLine: {'line': b'1:             # Use the correct ROS 2 way to get parameter values\n'}
[4.936463] (articubot_one) StdoutLine: {'line': b"1:             threshold = node.get_parameter('threshold_distance').value\n"}
[4.936638] (articubot_one) StdoutLine: {'line': b"1:             scan_topic = node.get_parameter('laser_scan_topic').value\n"}
[4.936812] (articubot_one) StdoutLine: {'line': b"1:             cmd_topic = node.get_parameter('cmd_vel_topic').value\n"}
[4.936988] (articubot_one) StdoutLine: {'line': b"1:             front_sector_angle = node.get_parameter('frontal_detection_angle_deg').value\n"}
[4.937238] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[4.937425] (articubot_one) StdoutLine: {'line': b'1:             # assert the values are correct as expected\n'}
[4.937606] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(threshold, float), f"expect the threshold to be a float"\n'}
[4.937783] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(scan_topic, str), f"expect the scan topic to be a string"\n'}
[4.937994] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"\n'}
[4.938229] (articubot_one) StdoutLine: {'line': b"1:             assert isinstance(front_sector_angle, float), f'expect the angle of sector to be a float'\n"}
[4.938433] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[4.938624] (articubot_one) StdoutLine: {'line': b'1:             # 2- check if the values of the parameters are correct\n'}
[4.938817] (articubot_one) StdoutLine: {'line': b"1:             # These values should match what's set in your launch file or node defaults\n"}
[4.939037] (articubot_one) StdoutLine: {'line': b'1:             assert threshold == 0.5\n'}
[4.939254] (articubot_one) StdoutLine: {'line': b'1: >           assert scan_topic == "scan"\n'}
[4.939447] (articubot_one) StdoutLine: {'line': b"1: E           AssertionError: assert '/scan' == 'scan'\n"}
[4.939637] (articubot_one) StdoutLine: {'line': b'1: E             - scan\n'}
[4.939825] (articubot_one) StdoutLine: {'line': b'1: E             + /scan\n'}
[4.940026] (articubot_one) StdoutLine: {'line': b'1: E             ? +\n'}
[4.940242] (articubot_one) StdoutLine: {'line': b'1: \n'}
[4.940436] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py:84: AssertionError\n'}
[4.940630] (articubot_one) StdoutLine: {'line': b'1: \n'}
[4.940823] (articubot_one) StdoutLine: {'line': b'1: During handling of the above exception, another exception occurred:\n'}
[4.941032] (articubot_one) StdoutLine: {'line': b'1: \n'}
[4.941276] (articubot_one) StdoutLine: {'line': b'1: obstacle_node = (<articubot_one.obstacle_avoidance.Obstacle object at 0x7f5aaf8aea20>, <rclpy.executors.SingleThreadedExecutor object at 0x7f5ab0889a60>)\n'}
[4.941471] (articubot_one) StdoutLine: {'line': b'1: \n'}
[4.941661] (articubot_one) StdoutLine: {'line': b'1:     def test_obstacle_parameters(obstacle_node):\n'}
[4.941847] (articubot_one) StdoutLine: {'line': b'1:         """Test ROS parameters after the node has had a chance to spin."""\n'}
[4.942075] (articubot_one) StdoutLine: {'line': b'1:         node, executor = obstacle_node\n'}
[4.942299] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[4.942494] (articubot_one) StdoutLine: {'line': b'1:         # Now access parameters after the node has spun briefly\n'}
[4.942685] (articubot_one) StdoutLine: {'line': b'1:         # Note: Getting parameters this way works if they are declared\n'}
[4.942876] (articubot_one) StdoutLine: {'line': b'1:         # and have default values, or if they are set externally\n'}
[4.943104] (articubot_one) StdoutLine: {'line': b'1:         # AND the node has spun to receive them.\n'}
[4.943313] (articubot_one) StdoutLine: {'line': b'1:         try:\n'}
[4.943501] (articubot_one) StdoutLine: {'line': b'1:             # Use the correct ROS 2 way to get parameter values\n'}
[4.943690] (articubot_one) StdoutLine: {'line': b"1:             threshold = node.get_parameter('threshold_distance').value\n"}
[4.943877] (articubot_one) StdoutLine: {'line': b"1:             scan_topic = node.get_parameter('laser_scan_topic').value\n"}
[4.944089] (articubot_one) StdoutLine: {'line': b"1:             cmd_topic = node.get_parameter('cmd_vel_topic').value\n"}
[4.944296] (articubot_one) StdoutLine: {'line': b"1:             front_sector_angle = node.get_parameter('frontal_detection_angle_deg').value\n"}
[4.944485] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[4.944674] (articubot_one) StdoutLine: {'line': b'1:             # assert the values are correct as expected\n'}
[4.944863] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(threshold, float), f"expect the threshold to be a float"\n'}
[4.945100] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(scan_topic, str), f"expect the scan topic to be a string"\n'}
[4.945314] (articubot_one) StdoutLine: {'line': b'1:             assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"\n'}
[4.945505] (articubot_one) StdoutLine: {'line': b"1:             assert isinstance(front_sector_angle, float), f'expect the angle of sector to be a float'\n"}
[4.945695] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[4.945885] (articubot_one) StdoutLine: {'line': b'1:             # 2- check if the values of the parameters are correct\n'}
[4.946134] (articubot_one) StdoutLine: {'line': b"1:             # These values should match what's set in your launch file or node defaults\n"}
[4.946346] (articubot_one) StdoutLine: {'line': b'1:             assert threshold == 0.5\n'}
[4.946562] (articubot_one) StdoutLine: {'line': b'1:             assert scan_topic == "scan"\n'}
[4.946751] (articubot_one) StdoutLine: {'line': b'1:             assert cmd_topic == "cmd_vel"\n'}
[4.946938] (articubot_one) StdoutLine: {'line': b'1:             assert front_sector_angle == 60.0\n'}
[4.947170] (articubot_one) StdoutLine: {'line': b'1:     \n'}
[4.947363] (articubot_one) StdoutLine: {'line': b'1:         except rclpy.exceptions.ParameterNotDeclaredException as e:\n'}
[4.947563] (articubot_one) StdoutLine: {'line': b'1:             pytest.fail(f"Parameter not declared: {e}")\n'}
[4.947755] (articubot_one) StdoutLine: {'line': b'1:         except Exception as e:\n'}
[4.947946] (articubot_one) StdoutLine: {'line': b'1: >           pytest.fail(f"Error getting parameter: {e}")\n'}
[4.948166] (articubot_one) StdoutLine: {'line': b"1: E           Failed: Error getting parameter: assert '/scan' == 'scan'\n"}
[4.948363] (articubot_one) StdoutLine: {'line': b'1: E             - scan\n'}
[4.948550] (articubot_one) StdoutLine: {'line': b'1: E             + /scan\n'}
[4.948735] (articubot_one) StdoutLine: {'line': b'1: E             ? +\n'}
[4.948919] (articubot_one) StdoutLine: {'line': b'1: \n'}
[4.949135] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py:91: Failed\n'}
[4.949335] (articubot_one) StdoutLine: {'line': b'1: ---------------------------- Captured stderr setup -----------------------------\n'}
[4.949526] (articubot_one) StdoutLine: {'line': b'1: [INFO] [1747594140.378281690] [Laser_Obstacle_Avoidance]: Subscribing to laser scan on: /scan\n'}
[4.949717] (articubot_one) StdoutLine: {'line': b'1: [INFO] [1747594140.379873485] [Laser_Obstacle_Avoidance]: Publishing velocity commands on: /cmd_vel\n'}
[4.949908] (articubot_one) StdoutLine: {'line': b'1: - generated xml file: /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml -\n'}
[4.950163] (articubot_one) StdoutLine: {'line': b'1: =========================== short test summary info ============================\n'}
[4.950372] (articubot_one) StdoutLine: {'line': b'1: FAILED ../../src/articubot_one/test/pytest/test_laserObstacle.py::test_obstacle_parameters\n'}
[4.950565] (articubot_one) StdoutLine: {'line': b'1: ========================= 1 failed, 1 passed in 4.39s ==========================\n'}
[5.022162] (-) TimerEvent: {}
[5.122761] (-) TimerEvent: {}
[5.190347] (articubot_one) StdoutLine: {'line': b'1: -- run_test.py: return code 1\n'}
[5.191212] (articubot_one) StdoutLine: {'line': b"1: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml'\n"}
[5.214347] (articubot_one) StdoutLine: {'line': b'1/6 Test #1: laser_obstacle_test ..............***Failed    5.17 sec\n'}
[5.215242] (articubot_one) StdoutLine: {'line': b'test 2\n'}
[5.215471] (articubot_one) StdoutLine: {'line': b'    Start 2: copyright\n'}
[5.215674] (articubot_one) StdoutLine: {'line': b'\n'}
[5.215872] (articubot_one) StdoutLine: {'line': b'2: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_copyright/copyright.txt" "--command" "/opt/ros/jazzy/bin/ament_copyright" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml"\n'}
[5.216158] (articubot_one) StdoutLine: {'line': b'2: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[5.216356] (articubot_one) StdoutLine: {'line': b'2: Test timeout computed to be: 200\n'}
[5.222937] (-) TimerEvent: {}
[5.323130] (-) TimerEvent: {}
[5.346159] (articubot_one) StdoutLine: {'line': b"2: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[5.346348] (articubot_one) StdoutLine: {'line': b'2:  - /opt/ros/jazzy/bin/ament_copyright --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml\n'}
[5.423260] (-) TimerEvent: {}
[5.523464] (-) TimerEvent: {}
[5.599876] (articubot_one) StdoutLine: {'line': b'2: CONTRIBUTING.md: file not found\n'}
[5.600095] (articubot_one) StdoutLine: {'line': b'2: LICENSE: file not found\n'}
[5.600197] (articubot_one) StdoutLine: {'line': b'2: articubot_one/obstacle_avoidance.py: could not find copyright notice\n'}
[5.600283] (articubot_one) StdoutLine: {'line': b'2: launch/ball_tracker.launch.py: could not find copyright notice\n'}
[5.600365] (articubot_one) StdoutLine: {'line': b'2: launch/camera.launch.py: could not find copyright notice\n'}
[5.600445] (articubot_one) StdoutLine: {'line': b'2: launch/joystick.launch.py: could not find copyright notice\n'}
[5.600526] (articubot_one) StdoutLine: {'line': b'2: launch/launch_robot.launch.py: could not find copyright notice\n'}
[5.600606] (articubot_one) StdoutLine: {'line': b'2: launch/launch_sim.launch.py: could not find copyright notice\n'}
[5.600685] (articubot_one) StdoutLine: {'line': b'2: launch/online_async_launch.py: could not find copyright notice\n'}
[5.600765] (articubot_one) StdoutLine: {'line': b'2: launch/rplidar.launch.py: could not find copyright notice\n'}
[5.600844] (articubot_one) StdoutLine: {'line': b'2: launch/rsp.launch.py: could not find copyright notice\n'}
[5.600923] (articubot_one) StdoutLine: {'line': b'2: launch/rviz_gazebo.launch.py: could not find copyright notice\n'}
[5.601024] (articubot_one) StdoutLine: {'line': b'2: test/pytest/test_laserObstacle.py: could not find copyright notice\n'}
[5.601145] (articubot_one) StdoutLine: {'line': b'2: 13 errors, checked 16 files\n'}
[5.615593] (articubot_one) StdoutLine: {'line': b'2: -- run_test.py: return code 1\n'}
[5.615850] (articubot_one) StdoutLine: {'line': b"2: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml'\n"}
[5.623569] (-) TimerEvent: {}
[5.626944] (articubot_one) StdoutLine: {'line': b'2/6 Test #2: copyright ........................***Failed    0.41 sec\n'}
[5.627404] (articubot_one) StdoutLine: {'line': b'test 3\n'}
[5.627540] (articubot_one) StdoutLine: {'line': b'    Start 3: flake8\n'}
[5.627632] (articubot_one) StdoutLine: {'line': b'\n'}
[5.627719] (articubot_one) StdoutLine: {'line': b'3: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_flake8/flake8.txt" "--command" "/opt/ros/jazzy/bin/ament_flake8" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml"\n'}
[5.627818] (articubot_one) StdoutLine: {'line': b'3: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[5.627908] (articubot_one) StdoutLine: {'line': b'3: Test timeout computed to be: 60\n'}
[5.701706] (articubot_one) StdoutLine: {'line': b"3: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[5.701897] (articubot_one) StdoutLine: {'line': b'3:  - /opt/ros/jazzy/bin/ament_flake8 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml\n'}
[5.723701] (-) TimerEvent: {}
[5.823888] (-) TimerEvent: {}
[5.924082] (-) TimerEvent: {}
[6.025063] (-) TimerEvent: {}
[6.092044] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist\n'}
[6.092315] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.092503] (articubot_one) StdoutLine: {'line': b'3: import math\n'}
[6.092677] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.095202] (articubot_one) StdoutLine: {'line': b'3: import math\n'}
[6.095492] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.095714] (articubot_one) StdoutLine: {'line': b'3: # i am writing down this piece of code with paramters \n'}
[6.097037] (articubot_one) StdoutLine: {'line': b'3:                                                      ^\n'}
[6.098032] (articubot_one) StdoutLine: {'line': b'3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node \n'}
[6.098286] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.101287] (articubot_one) StdoutLine: {'line': b'3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node \n'}
[6.101499] (articubot_one) StdoutLine: {'line': b'3:                                                                                                               ^\n'}
[6.101690] (articubot_one) StdoutLine: {'line': b'3:     def __init__(self) :\n'}
[6.101878] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[6.102093] (articubot_one) StdoutLine: {'line': b'3:         super().__init__("Laser_Obstacle_Avoidance")\n'}
[6.102291] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[6.102479] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.102664] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.102848] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[6.103052] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[6.103272] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[6.103467] (articubot_one) StdoutLine: {'line': b'3:                                                    ^\n'}
[6.103654] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[6.103844] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.104055] (articubot_one) StdoutLine: {'line': b'3:         self.threshold=self.get_parameter("threshold_distance").value\n'}
[6.104230] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[6.104420] (articubot_one) StdoutLine: {'line': b'3:         self.threshold=self.get_parameter("threshold_distance").value\n'}
[6.104615] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[6.104812] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.105007] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.120915] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[6.121137] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[6.121307] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[6.121467] (articubot_one) StdoutLine: {'line': b'3:                                                  ^\n'}
[6.121625] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[6.121782] (articubot_one) StdoutLine: {'line': b'3:                                                   ^\n'}
[6.121937] (articubot_one) StdoutLine: {'line': b'3:         self.laser_topic=self.get_parameter("laser_scan_topic").value\n'}
[6.122112] (articubot_one) StdoutLine: {'line': b'3:                         ^\n'}
[6.122271] (articubot_one) StdoutLine: {'line': b'3:         self.laser_topic=self.get_parameter("laser_scan_topic").value\n'}
[6.122430] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[6.122583] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.122741] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.122898] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[6.123484] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[6.123677] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[6.123851] (articubot_one) StdoutLine: {'line': b'3:                                               ^\n'}
[6.124021] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[6.124196] (articubot_one) StdoutLine: {'line': b'3:                                                ^\n'}
[6.124352] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value\n'}
[6.124512] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[6.124673] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value\n'}
[6.124830] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[6.124988] (articubot_one) StdoutLine: {'line': b"3:         self.frontal_detection_angle_rad = math.radians(self.get_parameter('frontal_detection_angle_deg').value)\n"}
[6.125171] (-) TimerEvent: {}
[6.125207] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.125367] (articubot_one) StdoutLine: {'line': b'3:         #create a publisher to the /cmd_vel\n'}
[6.125523] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[6.125681] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_vel_pub = self.create_publisher(Twist,self.cmd_topic, 10)\n'}
[6.125834] (articubot_one) StdoutLine: {'line': b'3:                                                       ^\n'}
[6.125994] (articubot_one) StdoutLine: {'line': b'3:     def laser_callback(self,msg):\n'}
[6.126176] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.126333] (articubot_one) StdoutLine: {'line': b'3:     def laser_callback(self,msg):\n'}
[6.126492] (articubot_one) StdoutLine: {'line': b'3:                            ^\n'}
[6.126655] (articubot_one) StdoutLine: {'line': b'3:   \n'}
[6.126810] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.126980] (articubot_one) StdoutLine: {'line': b'3:         if not(scan_size) :\n'}
[6.127164] (articubot_one) StdoutLine: {'line': b'3:               ^\n'}
[6.127327] (articubot_one) StdoutLine: {'line': b'3:         if not(scan_size) :\n'}
[6.127481] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[6.127637] (articubot_one) StdoutLine: {'line': b'3:             #no laser data \n'}
[6.127799] (articubot_one) StdoutLine: {'line': b'3:             ^\n'}
[6.127970] (articubot_one) StdoutLine: {'line': b'3:             #no laser data \n'}
[6.128157] (articubot_one) StdoutLine: {'line': b'3:                           ^\n'}
[6.128317] (articubot_one) StdoutLine: {'line': b'3:             return \n'}
[6.128473] (articubot_one) StdoutLine: {'line': b'3:                   ^\n'}
[6.128635] (articubot_one) StdoutLine: {'line': b'3:         # the lidar provides angles,angle step (common difference of the angle sequence), distances in meter\n'}
[6.128797] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.128957] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.129136] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.129297] (articubot_one) StdoutLine: {'line': b'3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance\n'}
[6.129458] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[6.129617] (articubot_one) StdoutLine: {'line': b'3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance\n'}
[6.129780] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.129935] (articubot_one) StdoutLine: {'line': b"3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance\n"}
[6.130117] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[6.130292] (articubot_one) StdoutLine: {'line': b"3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance\n"}
[6.130453] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.130615] (articubot_one) StdoutLine: {'line': b'3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle \n'}
[6.130782] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.130934] (articubot_one) StdoutLine: {'line': b'3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle \n'}
[6.131110] (articubot_one) StdoutLine: {'line': b'3:                                                                                                                      ^\n'}
[6.131277] (articubot_one) StdoutLine: {'line': b'3:         # we are sweeping across all the angles with the increment \n'}
[6.131438] (articubot_one) StdoutLine: {'line': b'3:                                                                   ^\n'}
[6.131598] (articubot_one) StdoutLine: {'line': b'3:         # while sweeping we compare  only the ranges with the ones in the defined angle \n'}
[6.131753] (articubot_one) StdoutLine: {'line': b'3:                                                                                        ^\n'}
[6.131914] (articubot_one) StdoutLine: {'line': b'3:                  # If the range reading is valid (not inf or nan)\n'}
[6.132088] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.132264] (articubot_one) StdoutLine: {'line': b'3:                  # If the range reading is valid (not inf or nan)\n'}
[6.132424] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.132581] (articubot_one) StdoutLine: {'line': b'3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):\n'}
[6.132738] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.132897] (articubot_one) StdoutLine: {'line': b'3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):\n'}
[6.133076] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.133246] (articubot_one) StdoutLine: {'line': b'3:             \n'}
[6.133409] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.133567] (articubot_one) StdoutLine: {'line': b'3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])\n'}
[6.133755] (articubot_one) StdoutLine: {'line': b'3:                      ^\n'}
[6.133919] (articubot_one) StdoutLine: {'line': b'3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])\n'}
[6.134094] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.134260] (articubot_one) StdoutLine: {'line': b'3:         #  To stop the robot from moving ahead when ever it meets an obstacle, it will just go back \n'}
[6.134413] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.134569] (articubot_one) StdoutLine: {'line': b'3:         if obstacle_detected :\n'}
[6.134722] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.134875] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')\n"}
[6.135079] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.135243] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')\n"}
[6.135398] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.135562] (articubot_one) StdoutLine: {'line': b'3:            twist.linear.x = 0.0\n'}
[6.135716] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.135878] (articubot_one) StdoutLine: {'line': b'3:            twist.angular.z =0.0\n'}
[6.136039] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.136213] (articubot_one) StdoutLine: {'line': b'3:            twist.angular.z =0.0\n'}
[6.136375] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.136540] (articubot_one) StdoutLine: {'line': b'3:            self.cmd_vel_pub.publish(twist)\n'}
[6.136694] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.136853] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[6.137019] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.137187] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[6.137339] (articubot_one) StdoutLine: {'line': b'3:                                   ^\n'}
[6.137495] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[6.137646] (articubot_one) StdoutLine: {'line': b'3:                                                           ^\n'}
[6.137836] (articubot_one) StdoutLine: {'line': b'3: def main(args=None):\n'}
[6.137992] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.138175] (articubot_one) StdoutLine: {'line': b'3:         rclpy.spin(node) # Keep the node running and process callbacks\n'}
[6.138336] (articubot_one) StdoutLine: {'line': b'3:                         ^\n'}
[6.138487] (articubot_one) StdoutLine: {'line': b"3:         node.get_logger().info('Smart Obstacle Avoider Node stopped cleanly via KeyboardInterrupt.')\n"}
[6.138646] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.138837] (articubot_one) StdoutLine: {'line': b"3: if __name__ == '__main__':\n"}
[6.139033] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.139234] (articubot_one) StdoutLine: {'line': b'3:     main()    \n'}
[6.139423] (articubot_one) StdoutLine: {'line': b'3:           ^\n'}
[6.139611] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.139799] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.139986] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[6.140191] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.140366] (articubot_one) StdoutLine: {'line': b"3:     my_package_name='articubot_one'\n"}
[6.140526] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.140679] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[6.140832] (articubot_one) StdoutLine: {'line': b'3:                                                                                   ^\n'}
[6.140986] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[6.141158] (articubot_one) StdoutLine: {'line': b'3:                                                                                            ^\n'}
[6.141316] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[6.141467] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.141628] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[6.141779] (articubot_one) StdoutLine: {'line': b'3:                                                                                     ^\n'}
[6.141944] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[6.142122] (articubot_one) StdoutLine: {'line': b'3:                                                                                              ^\n'}
[6.142281] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[6.142437] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.142588] (articubot_one) StdoutLine: {'line': b'3:     params_path = PythonExpression([\'"\',tracker_params_sim, \'" if "true" == "\', sim_mode, \'" else "\', tracker_params_robot, \'"\'])\n'}
[6.142743] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.142898] (articubot_one) StdoutLine: {'line': b'3:     params_path = PythonExpression([\'"\',tracker_params_sim, \'" if "true" == "\', sim_mode, \'" else "\', tracker_params_robot, \'"\'])\n'}
[6.143067] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.143235] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory('ball_tracker'), 'launch', 'ball_tracker.launch.py')]),\n"}
[6.143392] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.143553] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'params_file': params_path,\n"}
[6.143721] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.143879] (articubot_one) StdoutLine: {'line': b"3:                                     'image_topic': '/camera/image_raw',\n"}
[6.144041] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.144208] (articubot_one) StdoutLine: {'line': b"3:                                     'cmd_vel_topic': '/cmd_vel_tracker',\n"}
[6.144366] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.144518] (articubot_one) StdoutLine: {'line': b"3:                                     'enable_3d_tracker': 'true'}.items())\n"}
[6.144671] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.144827] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[6.144985] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.145159] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.145318] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.145469] (articubot_one) StdoutLine: {'line': b'3:     return LaunchDescription([\n'}
[6.145624] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.145783] (articubot_one) StdoutLine: {'line': b"3:                 'image_size': [640,480],\n"}
[6.145951] (articubot_one) StdoutLine: {'line': b'3:                                   ^\n'}
[6.146125] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.146290] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.146442] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.146602] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:5:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[6.146764] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.146916] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:6:1: I100 Import statements are in the wrong order. 'import math' should be before 'from geometry_msgs.msg import Twist' and in a different group.\n"}
[6.147091] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.147258] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:6:1: I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.\n"}
[6.147427] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.147581] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:9:54: W291 trailing whitespace\n'}
[6.147747] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.147903] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:10:100: E501 line too long (110 > 99 characters)\n'}
[6.148079] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.148249] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:10:111: W291 trailing whitespace\n'}
[6.148407] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.148564] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:14:23: E203 whitespace before ':'\n"}
[6.148719] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.148876] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:15:26: Q000 Double quotes found but single quotes preferred\n'}
[6.149042] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.149204] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:16:1: W293 blank line contains whitespace\n'}
[6.149358] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.149508] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:17:32: Q000 Double quotes found but single quotes preferred\n'}
[6.149657] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.149808] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:17:52: E231 missing whitespace after ','\n"}
[6.149965] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.150136] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:17:100: E501 line too long (102 > 99 characters)\n'}
[6.150295] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.150449] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:18:23: E225 missing whitespace around operator\n'}
[6.150603] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.150767] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:18:43: Q000 Double quotes found but single quotes preferred\n'}
[6.150928] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.151096] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:19:1: W293 blank line contains whitespace\n'}
[6.151263] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.151416] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:20:32: Q000 Double quotes found but single quotes preferred\n'}
[6.151580] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.151732] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:20:50: E231 missing whitespace after ','\n"}
[6.151892] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.152056] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:20:51: Q000 Double quotes found but single quotes preferred\n'}
[6.152224] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.152370] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:21:25: E225 missing whitespace around operator\n'}
[6.152532] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.152685] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:21:45: Q000 Double quotes found but single quotes preferred\n'}
[6.152837] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.152989] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:22:1: W293 blank line contains whitespace\n'}
[6.153175] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.153333] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:23:32: Q000 Double quotes found but single quotes preferred\n'}
[6.153483] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.153634] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:23:47: E231 missing whitespace after ','\n"}
[6.153797] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.153950] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:23:48: Q000 Double quotes found but single quotes preferred\n'}
[6.154138] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.154309] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:24:23: E225 missing whitespace around operator\n'}
[6.154472] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.154631] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:24:43: Q000 Double quotes found but single quotes preferred\n'}
[6.154787] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.154942] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:29:100: E501 line too long (112 > 99 characters)\n'}
[6.155117] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.155280] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:38:9: E265 block comment should start with '# '\n"}
[6.155443] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.155606] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:39:55: E231 missing whitespace after ','\n"}
[6.155765] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.155927] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:43:5: E303 too many blank lines (2)\n'}
[6.158410] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.158672] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:43:28: E231 missing whitespace after ','\n"}
[6.158840] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.159006] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:47:1: W293 blank line contains whitespace\n'}
[6.159200] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.159357] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:48:15: E275 missing whitespace after keyword\n'}
[6.159522] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.159678] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:48:26: E203 whitespace before ':'\n"}
[6.159855] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.160012] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:49:13: E265 block comment should start with '# '\n"}
[6.160290] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.160457] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:49:27: W291 trailing whitespace\n'}
[6.160616] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.160776] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:50:19: W291 trailing whitespace\n'}
[6.160933] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.161151] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:51:100: E501 line too long (108 > 99 characters)\n'}
[6.161404] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.161602] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:56:1: W293 blank line contains whitespace\n'}
[6.161793] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.161988] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:60:9: E265 block comment should start with '# '\n"}
[6.162212] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.162405] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:60:100: E501 line too long (148 > 99 characters)\n'}
[6.162596] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.162789] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:61:9: E265 block comment should start with '# '\n"}
[6.162979] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.163224] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:61:100: E501 line too long (106 > 99 characters)\n'}
[6.163389] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.163553] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:62:100: E501 line too long (117 > 99 characters)\n'}
[6.163713] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.163869] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:62:118: W291 trailing whitespace\n'}
[6.164037] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.164210] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:64:67: W291 trailing whitespace\n'}
[6.164367] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.164525] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:65:88: W291 trailing whitespace\n'}
[6.164687] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.164842] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:75:18: E114 indentation is not a multiple of 4 (comment)\n'}
[6.165005] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.165180] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:75:18: E117 over-indented (comment)\n'}
[6.165355] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.165527] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:76:18: E111 indentation is not a multiple of 4\n'}
[6.165701] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.165872] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:76:18: E117 over-indented\n'}
[6.166193] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.166374] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:77:1: W293 blank line contains whitespace\n'}
[6.166537] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.166699] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:78:22: E111 indentation is not a multiple of 4\n'}
[6.166857] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.167025] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:78:100: E501 line too long (104 > 99 characters)\n'}
[6.167206] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.167363] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:86:100: W291 trailing whitespace\n'}
[6.167524] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.167683] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:87:29: E203 whitespace before ':'\n"}
[6.167846] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.168002] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:88:12: E111 indentation is not a multiple of 4\n'}
[6.168176] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.168337] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:88:100: E501 line too long (115 > 99 characters)\n'}
[6.168499] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.168653] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:89:12: E111 indentation is not a multiple of 4\n'}
[6.168808] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.168970] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:90:12: E111 indentation is not a multiple of 4\n'}
[6.169147] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.169311] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:90:29: E225 missing whitespace around operator\n'}
[6.169472] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.169628] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:91:12: E111 indentation is not a multiple of 4\n'}
[6.169791] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.169952] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:12: E111 indentation is not a multiple of 4\n'}
[6.170137] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.170298] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:35: F541 f-string is missing placeholders\n'}
[6.170464] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.170630] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:59: W291 trailing whitespace\n'}
[6.170792] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.170953] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:95:1: E302 expected 2 blank lines, found 1\n'}
[6.171128] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.171290] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:99:25: E261 at least two spaces before inline comment\n'}
[6.171454] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.171608] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:101:100: E501 line too long (100 > 99 characters)\n'}
[6.171767] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.172105] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:116:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[6.172288] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.172443] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:117:11: W291 trailing whitespace\n'}
[6.172606] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.172766] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:2:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.172949] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.173129] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:8:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import PythonExpression'\n"}
[6.173298] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.173462] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:13:20: E225 missing whitespace around operator\n'}
[6.173652] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.173806] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:17:83: E231 missing whitespace after ','\n"}
[6.173970] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.174141] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:17:92: E231 missing whitespace after ','\n"}
[6.174306] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.174496] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:17:100: E501 line too long (123 > 99 characters)\n'}
[6.174687] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.174875] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:18:85: E231 missing whitespace after ','\n"}
[6.175079] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.175275] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:18:94: E231 missing whitespace after ','\n"}
[6.175485] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.175674] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:18:100: E501 line too long (127 > 99 characters)\n'}
[6.175863] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.176064] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:20:40: E231 missing whitespace after ','\n"}
[6.176236] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.176398] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:20:100: E501 line too long (129 > 99 characters)\n'}
[6.176553] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.176706] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:24:100: E501 line too long (103 > 99 characters)\n'}
[6.176861] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.177011] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:25:21: E131 continuation line unaligned for hanging indent\n'}
[6.177190] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.177340] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:26:37: E128 continuation line under-indented for visual indent\n'}
[6.177504] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.177661] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:27:37: E128 continuation line under-indented for visual indent\n'}
[6.177824] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.177975] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:28:37: E128 continuation line under-indented for visual indent\n'}
[6.178146] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.178298] (articubot_one) StdoutLine: {'line': b"3: ./launch/camera.launch.py:1:1: F401 'os' imported but unused\n"}
[6.178445] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.178595] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:6:1: E302 expected 2 blank lines, found 1\n'}
[6.178760] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.178914] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:10:5: E303 too many blank lines (3)\n'}
[6.179085] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.179248] (articubot_one) StdoutLine: {'line': b"3: ./launch/camera.launch.py:18:35: E231 missing whitespace after ','\n"}
[6.179404] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.179559] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:22:5: E122 continuation line missing indentation or outdented\n'}
[6.179731] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.179888] (articubot_one) StdoutLine: {'line': b'3: from launch.substitutions import LaunchConfiguration\n'}
[6.180053] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.180216] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[6.180373] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.180525] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[6.180684] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.180836] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.180989] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.181164] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.181327] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.181484] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[6.181637] (articubot_one) StdoutLine: {'line': b'3:                                                                           ^\n'}
[6.181793] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[6.181953] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[6.182125] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[6.182286] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.182439] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel','/cmd_vel_joy')]\n"}
[6.182758] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[6.182936] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_in','/diff_cont/cmd_vel_unstamped'),\n"}
[6.183127] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[6.183305] (articubot_one) StdoutLine: {'line': b"3:                         ('/cmd_vel_out','/diff_cont/cmd_vel')]\n"}
[6.183646] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.183814] (articubot_one) StdoutLine: {'line': b'3:     return LaunchDescription([\n'}
[6.183976] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.184164] (articubot_one) StdoutLine: {'line': b'3:         twist_stamper       \n'}
[6.184328] (articubot_one) StdoutLine: {'line': b'3:                      ^\n'}
[6.184494] (articubot_one) StdoutLine: {'line': b'3:     ])      ^\n'}
[6.184655] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import RegisterEventHandler\n'}
[6.184811] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.184960] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.185132] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.185281] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.185435] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.185598] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.185764] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.185912] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.186077] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.186238] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.186387] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[6.186539] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.186685] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[6.186834] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.186981] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.187149] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.187307] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.187455] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.187608] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.187753] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.187909] (articubot_one) StdoutLine: {'line': b'3:                                                                              ^\n'}
[6.188078] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.188241] (articubot_one) StdoutLine: {'line': b'3:                                                                                       ^\n'}
[6.188397] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.188551] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.188740] (articubot_one) StdoutLine: {'line': b'3:             package="twist_mux",\n'}
[6.188905] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.189075] (articubot_one) StdoutLine: {'line': b'3:             executable="twist_mux",\n'}
[6.189242] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[6.189398] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]\n"}
[6.189554] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.189713] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.189866] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.190030] (articubot_one) StdoutLine: {'line': b"3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])\n"}
[6.190208] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.190364] (articubot_one) StdoutLine: {'line': b"3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])\n"}
[6.190505] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.190697] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[6.190880] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[6.191068] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[6.191252] (articubot_one) StdoutLine: {'line': b'3:                                                                                             ^\n'}
[6.191429] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[6.191605] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.191779] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.191937] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.192121] (articubot_one) StdoutLine: {'line': b'3:         executable="ros2_control_node",\n'}
[6.192298] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.192480] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.192657] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.192819] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.192972] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.193149] (articubot_one) StdoutLine: {'line': b'3:         arguments=["diff_cont"],\n'}
[6.193307] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.193463] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.193619] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.193770] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.193928] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.194097] (articubot_one) StdoutLine: {'line': b'3:         arguments=["joint_broad"],\n'}
[6.194263] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.194416] (articubot_one) StdoutLine: {'line': b"3:     # Code for delaying a node (I haven't tested how effective it is)\n"}
[6.194568] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.194724] (articubot_one) StdoutLine: {'line': b'3:     # \n'}
[6.194876] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[6.195039] (articubot_one) StdoutLine: {'line': b'3:     # Launch them all!\n'}
[6.195204] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.195362] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument\n'}
[6.195512] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.195664] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.195826] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.195986] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.196181] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.196347] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.196519] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.196687] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.196868] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.197055] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.197225] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[6.197399] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.197557] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[6.197715] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.197879] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.198041] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.198211] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.198372] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'\n"}
[6.198528] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.198681] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'\n"}
[6.198838] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.198992] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.199166] (articubot_one) StdoutLine: {'line': b'3:                                                                              ^\n'}
[6.199331] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.199486] (articubot_one) StdoutLine: {'line': b'3:                                                                                       ^\n'}
[6.199638] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.199797] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.199951] (articubot_one) StdoutLine: {'line': b'3:             package="twist_mux",\n'}
[6.200123] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.200284] (articubot_one) StdoutLine: {'line': b'3:             executable="twist_mux",\n'}
[6.200442] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[6.200598] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]\n"}
[6.200776] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.200930] (articubot_one) StdoutLine: {'line': b'3:     default_world = os.path.join(\n'}
[6.201102] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.201262] (articubot_one) StdoutLine: {'line': b'3:         )    \n'}
[6.201419] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[6.201570] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.201722] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.201876] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.202043] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.202213] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.202366] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.202532] (articubot_one) StdoutLine: {'line': b"3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.\n"}
[6.202691] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.202841] (articubot_one) StdoutLine: {'line': b'3:     diff_drive_spawner = Node(\n'}
[6.202998] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.203174] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.203331] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.203483] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.203638] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.203795] (articubot_one) StdoutLine: {'line': b'3:         arguments=["diff_cont"],\n'}
[6.203957] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.204137] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.204300] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.204455] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.204615] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.204771] (articubot_one) StdoutLine: {'line': b'3:         arguments=["joint_broad"],\n'}
[6.204922] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.205090] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.205253] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.205408] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.205568] (articubot_one) StdoutLine: {'line': b'3:                                                                           ^\n'}
[6.205721] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.205875] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[6.206055] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.206230] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.206384] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.206540] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.206696] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.206878] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.207060] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_image",\n'}
[6.207218] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.207362] (articubot_one) StdoutLine: {'line': b'3:         executable="image_bridge",\n'}
[6.207518] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.207665] (articubot_one) StdoutLine: {'line': b'3:         arguments=["/camera/image_raw"]\n'}
[6.207813] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.207968] (articubot_one) StdoutLine: {'line': b"3:     # Code for delaying a node (I haven't tested how effective it is)\n"}
[6.208137] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.208287] (articubot_one) StdoutLine: {'line': b'3:     # \n'}
[6.208443] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[6.208592] (articubot_one) StdoutLine: {'line': b'3:     # Launch them all!\n'}
[6.208739] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.208892] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.209057] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.209226] (articubot_one) StdoutLine: {'line': b'3:     default_params_file = os.path.join(get_package_share_directory("articubot_one"),\n'}
[6.209377] (articubot_one) StdoutLine: {'line': b'3:                                                                    ^\n'}
[6.209529] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[6.209678] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.209831] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:3:1: I100 Import statements are in the wrong order. 'from launch.substitutions import LaunchConfiguration' should be before 'from launch_ros.actions import Node'\n"}
[6.210044] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.210210] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:4:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration'\n"}
[6.210378] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.210538] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:6:1: I100 Import statements are in the wrong order. 'import os' should be before 'from launch.actions import DeclareLaunchArgument' and in a different group.\n"}
[6.210703] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.210859] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:7:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.211030] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.211197] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:9:1: E302 expected 2 blank lines, found 1\n'}
[6.211360] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.211521] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:12:75: E231 missing whitespace after ','\n"}
[6.211678] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.211834] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:12:84: E231 missing whitespace after ','\n"}
[6.211993] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.212173] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:12:100: E501 line too long (100 > 99 characters)\n'}
[6.212338] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.212494] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:25:36: E231 missing whitespace after ','\n"}
[6.212649] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.212801] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:32:39: E231 missing whitespace after ','\n"}
[6.212956] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.213132] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:33:40: E231 missing whitespace after ','\n"}
[6.213291] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.213445] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:37:5: E303 too many blank lines (2)\n'}
[6.213600] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.213759] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:44:22: W291 trailing whitespace\n'}
[6.213918] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.214098] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:45:7: W292 no newline at end of file\n'}
[6.214274] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.214433] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:10:1: I100 Import statements are in the wrong order. 'from launch.actions import RegisterEventHandler' should be before 'from launch.substitutions import Command'\n"}
[6.214606] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.214764] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:17:1: E303 too many blank lines (3)\n'}
[6.214919] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.215088] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:20:5: E303 too many blank lines (2)\n'}
[6.215254] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.215414] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:20:100: E501 line too long (110 > 99 characters)\n'}
[6.215575] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.215729] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:23:17: E225 missing whitespace around operator\n'}
[6.215891] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.216059] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:23:33: E261 at least two spaces before inline comment\n'}
[6.216230] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.216386] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:23:34: E262 inline comment should start with '# '\n"}
[6.216542] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.216703] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:27:62: E231 missing whitespace after ','\n"}
[6.216854] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.217009] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:27:71: E231 missing whitespace after ','\n"}
[6.217197] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.217355] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:38:5: E303 too many blank lines (2)\n'}
[6.217519] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.217674] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:38:78: E231 missing whitespace after ','\n"}
[6.217831] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.217988] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:38:87: E231 missing whitespace after ','\n"}
[6.218166] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.218328] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:38:100: E501 line too long (104 > 99 characters)\n'}
[6.218488] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.218650] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:40:21: Q000 Double quotes found but single quotes preferred\n'}
[6.218803] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.218959] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:41:24: Q000 Double quotes found but single quotes preferred\n'}
[6.219139] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.219301] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:43:40: E231 missing whitespace after ','\n"}
[6.219462] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.219617] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:46:1: W293 blank line contains whitespace\n'}
[6.219777] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.219933] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:49:5: E303 too many blank lines (4)\n'}
[6.220105] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.220270] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:49:100: E501 line too long (104 > 99 characters)\n'}
[6.220429] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.220588] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:51:84: E231 missing whitespace after ','\n"}
[6.220744] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.220903] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:51:93: E231 missing whitespace after ','\n"}
[6.221075] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.221243] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:51:100: E501 line too long (115 > 99 characters)\n'}
[6.221404] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.221563] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:54:17: Q000 Double quotes found but single quotes preferred\n'}
[6.221720] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.221881] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:55:20: Q000 Double quotes found but single quotes preferred\n'}
[6.222068] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.222232] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:63:17: Q000 Double quotes found but single quotes preferred\n'}
[6.222392] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.222552] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:64:20: Q000 Double quotes found but single quotes preferred\n'}
[6.222712] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.222867] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:65:20: Q000 Double quotes found but single quotes preferred\n'}
[6.223045] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.223214] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:76:17: Q000 Double quotes found but single quotes preferred\n'}
[6.223375] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.223524] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:77:20: Q000 Double quotes found but single quotes preferred\n'}
[6.223680] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.223840] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:78:20: Q000 Double quotes found but single quotes preferred\n'}
[6.223993] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.224172] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:89:5: E303 too many blank lines (2)\n'}
[6.224333] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.224489] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:90:6: W291 trailing whitespace\n'}
[6.224645] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.224803] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:107:5: E303 too many blank lines (3)\n'}
[6.224963] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.225144] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[6.225307] (-) TimerEvent: {}
[6.225342] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.225497] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:15:1: E303 too many blank lines (3)\n'}
[6.225654] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.225804] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:18:5: E303 too many blank lines (2)\n'}
[6.225954] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.226156] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:18:100: E501 line too long (110 > 99 characters)\n'}
[6.226315] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.226471] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:21:17: E225 missing whitespace around operator\n'}
[6.226623] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.226776] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:21:33: E261 at least two spaces before inline comment\n'}
[6.226966] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.227171] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:21:34: E262 inline comment should start with '# '\n"}
[6.227363] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.227549] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:25:62: E231 missing whitespace after ','\n"}
[6.227738] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.227925] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:25:71: E231 missing whitespace after ','\n"}
[6.228130] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.228323] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:31:62: E231 missing whitespace after ','\n"}
[6.228511] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.228696] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:31:71: E231 missing whitespace after ','\n"}
[6.228852] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.229003] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:35:78: E231 missing whitespace after ','\n"}
[6.229186] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.229346] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:35:87: E231 missing whitespace after ','\n"}
[6.229505] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.229661] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:35:100: E501 line too long (104 > 99 characters)\n'}
[6.229823] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.229980] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:37:21: Q000 Double quotes found but single quotes preferred\n'}
[6.230151] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.230308] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:38:24: Q000 Double quotes found but single quotes preferred\n'}
[6.230471] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.230622] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:40:40: E231 missing whitespace after ','\n"}
[6.230783] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.230934] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:44:5: E303 too many blank lines (2)\n'}
[6.231107] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.231266] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:48:10: W291 trailing whitespace\n'}
[6.231425] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.231580] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:49:1: W293 blank line contains whitespace\n'}
[6.231730] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.231887] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:62:21: E131 continuation line unaligned for hanging indent\n'}
[6.232061] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.232224] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:62:100: E501 line too long (104 > 99 characters)\n'}
[6.232377] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.232528] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:65:100: E501 line too long (126 > 99 characters)\n'}
[6.232683] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.232836] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:73:5: E303 too many blank lines (2)\n'}
[6.232987] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.233160] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:74:17: Q000 Double quotes found but single quotes preferred\n'}
[6.233319] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.233474] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:75:20: Q000 Double quotes found but single quotes preferred\n'}
[6.233633] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.233789] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:76:20: Q000 Double quotes found but single quotes preferred\n'}
[6.233939] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.234109] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:80:17: Q000 Double quotes found but single quotes preferred\n'}
[6.234274] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.234430] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:81:20: Q000 Double quotes found but single quotes preferred\n'}
[6.234586] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.234740] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:82:20: Q000 Double quotes found but single quotes preferred\n'}
[6.234896] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.235062] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:86:5: E303 too many blank lines (2)\n'}
[6.235227] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.235380] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:86:75: E231 missing whitespace after ','\n"}
[6.235541] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.235693] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:86:84: E231 missing whitespace after ','\n"}
[6.235861] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.236028] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:86:100: E501 line too long (101 > 99 characters)\n'}
[6.236201] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.236360] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:88:17: Q000 Double quotes found but single quotes preferred\n'}
[6.236516] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.236671] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:89:20: Q000 Double quotes found but single quotes preferred\n'}
[6.236828] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.236988] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:98:17: Q000 Double quotes found but single quotes preferred\n'}
[6.237162] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.237312] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:99:20: Q000 Double quotes found but single quotes preferred\n'}
[6.237462] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.237614] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:100:20: Q000 Double quotes found but single quotes preferred\n'}
[6.237764] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.237913] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:105:5: E303 too many blank lines (3)\n'}
[6.238076] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.238234] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:106:6: W291 trailing whitespace\n'}
[6.238385] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.238530] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:123:5: E303 too many blank lines (3)\n'}
[6.238683] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.238830] (articubot_one) StdoutLine: {'line': b"3: ./launch/online_async_launch.py:8:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'from launch_ros.actions import Node'\n"}
[6.238985] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.239149] (articubot_one) StdoutLine: {'line': b'3: ./launch/online_async_launch.py:15:68: Q000 Double quotes found but single quotes preferred\n'}
[6.239302] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.239452] (articubot_one) StdoutLine: {'line': b"3: ./launch/rplidar.launch.py:1:1: F401 'os' imported but unused\n"}
[6.239599] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.239750] (articubot_one) StdoutLine: {'line': b"3: ./launch/rplidar.launch.py:2:1: I201 Missing newline between import groups. 'from launch import LaunchDescription' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.239901] (articubot_one) StdoutLine: {'line': b'3: from launch import LaunchDescription\n'}
[6.240062] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.240217] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.240366] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.240518] (articubot_one) StdoutLine: {'line': b"3:                 'serial_port': '/dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.3:1.0-port0',\n"}
[6.240667] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.240819] (articubot_one) StdoutLine: {'line': b'3: from launch.substitutions import LaunchConfiguration, Command\n'}
[6.240966] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.241137] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[6.241293] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.241440] (articubot_one) StdoutLine: {'line': b'3: import xacro\n'}
[6.241591] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.241740] (articubot_one) StdoutLine: {'line': b"3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')\n"}
[6.241890] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[6.242071] (articubot_one) StdoutLine: {'line': b"3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')\n"}
[6.242230] (articubot_one) StdoutLine: {'line': b'3:                                                     ^\n'}
[6.242381] (articubot_one) StdoutLine: {'line': b"3:     robot_description_config = Command(['xacro ', xacro_file, ' use_ros2_control:=', use_ros2_control, ' sim_mode:=', use_sim_time])\n"}
[6.242529] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.242679] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.242842] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.243045] (articubot_one) StdoutLine: {'line': b'3:     # Launch!\n'}
[6.243206] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.243356] (articubot_one) StdoutLine: {'line': b'3: import xacro\n'}
[6.243514] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.243665] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.243823] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.243982] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument\n'}
[6.244159] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.244316] (articubot_one) StdoutLine: {'line': b'3: from launch.conditions import IfCondition, UnlessCondition\n'}
[6.244472] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.244627] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.244782] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.244935] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.245116] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.245281] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.245436] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.245595] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.245753] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[6.245918] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.246085] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[6.246248] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.246400] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.246552] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.246693] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.246833] (articubot_one) StdoutLine: {'line': b'3:         )    \n'}
[6.247054] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[6.247234] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.247394] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.247560] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.247717] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.247885] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.248057] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.248228] (articubot_one) StdoutLine: {'line': b"3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.\n"}
[6.248403] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.248564] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.248722] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.248881] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[6.249049] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.249212] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.249370] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[6.249523] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[6.249679] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[6.249836] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[6.250004] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[6.250185] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.250343] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.250491] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.250646] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.250834] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.251030] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[6.251232] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.251420] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.251608] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[6.251795] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[6.251982] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[6.252173] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[6.252335] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[6.252490] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.252639] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.252791] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.252944] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.253120] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.253278] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[6.253435] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.253585] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.253739] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[6.253895] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[6.254061] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[6.254227] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[6.254381] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[6.254535] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.254687] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.254844] (articubot_one) StdoutLine: {'line': b'3:        \n'}
[6.254999] (articubot_one) StdoutLine: {'line': b'3:                                                                                            ^\n'}
[6.255186] (articubot_one) StdoutLine: {'line': b"3:     package='ros_gz_bridge',\n"}
[6.255345] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.255505] (articubot_one) StdoutLine: {'line': b"3:     executable='parameter_bridge',\n"}
[6.255665] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.255816] (articubot_one) StdoutLine: {'line': b'3:     arguments=[\n'}
[6.255984] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.256154] (articubot_one) StdoutLine: {'line': b"3:           '/odom@nav_msgs/msg/Odometry@gz.msgs.Odometry',\n"}
[6.256312] (articubot_one) StdoutLine: {'line': b'3:           ^\n'}
[6.256460] (articubot_one) StdoutLine: {'line': b"3:          '/scan@sensor_msgs/msg/LaserScan@gz.msgs.LaserScan',\n"}
[6.256615] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[6.256768] (articubot_one) StdoutLine: {'line': b"3:     output='screen'\n"}
[6.256920] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.257088] (articubot_one) StdoutLine: {'line': b'3: )\n'}
[6.257253] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.257410] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_image",\n'}
[6.257562] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.257716] (articubot_one) StdoutLine: {'line': b'3:         executable="image_bridge",\n'}
[6.257876] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.258036] (articubot_one) StdoutLine: {'line': b'3:         arguments=["/camera/image_raw"]\n'}
[6.258206] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.258359] (articubot_one) StdoutLine: {'line': b'3:     #Adding rviz plugin\n'}
[6.258519] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.258675] (articubot_one) StdoutLine: {'line': b"3:     share_dir=get_package_share_directory('articubot_one')\n"}
[6.258830] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.258988] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.259166] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.259325] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.259481] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.259640] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.259802] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.259997] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.260186] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.260503] (articubot_one) StdoutLine: {'line': b'3: import time \n'}
[6.260658] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.260809] (articubot_one) StdoutLine: {'line': b'3: import time \n'}
[6.260971] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.261147] (articubot_one) StdoutLine: {'line': b'3: import time \n'}
[6.261302] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.261458] (articubot_one) StdoutLine: {'line': b'3: from rclpy.executors import SingleThreadedExecutor\n'}
[6.261610] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.261765] (articubot_one) StdoutLine: {'line': b'3: from sensor_msgs.msg import LaserScan\n'}
[6.261923] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.262090] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[6.262254] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.262411] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[6.262564] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.262727] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[6.262885] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[6.263080] (articubot_one) StdoutLine: {'line': b'3: from articubot_one.obstacle_avoidance import Obstacle \n'}
[6.263250] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.263408] (articubot_one) StdoutLine: {'line': b'3: from articubot_one.obstacle_avoidance import Obstacle \n'}
[6.263571] (articubot_one) StdoutLine: {'line': b'3:                                                      ^\n'}
[6.263733] (articubot_one) StdoutLine: {'line': b"3: @pytest.fixture(scope='module')\n"}
[6.263892] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.264059] (articubot_one) StdoutLine: {'line': b'3: @pytest.fixture\n'}
[6.264229] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.264385] (articubot_one) StdoutLine: {'line': b'3:              executor.spin_once(0.1) # Spin briefly to process events\n'}
[6.264537] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.264699] (articubot_one) StdoutLine: {'line': b'3:              executor.spin_once(0.1) # Spin briefly to process events\n'}
[6.264865] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.265027] (articubot_one) StdoutLine: {'line': b'3:              executor.spin_once(0.1) # Spin briefly to process events\n'}
[6.265201] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.265363] (articubot_one) StdoutLine: {'line': b'3:         yield node, executor # Yield the node and executor\n'}
[6.265525] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.265681] (articubot_one) StdoutLine: {'line': b'3:              executor.shutdown()\n'}
[6.265830] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.265985] (articubot_one) StdoutLine: {'line': b'3:              executor.shutdown()\n'}
[6.266159] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.266318] (articubot_one) StdoutLine: {'line': b'3:     assert node.get_name() == "Laser_Obstacle_Avoidance"\n'}
[6.266470] (articubot_one) StdoutLine: {'line': b'3:                               ^\n'}
[6.266626] (articubot_one) StdoutLine: {'line': b"3:     assert node.laser_sub.topic_name == '/scan' # Often includes the leading slash in ROS 2\n"}
[6.266801] (articubot_one) StdoutLine: {'line': b'3:                                                ^\n'}
[6.266961] (articubot_one) StdoutLine: {'line': b"3:     assert node.cmd_vel_pub.topic_name == '/cmd_vel' # Often includes the leading slash\n"}
[6.267143] (articubot_one) StdoutLine: {'line': b'3:                                                     ^\n'}
[6.267317] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold, float), f"expect the threshold to be a float"\n'}
[6.267513] (articubot_one) StdoutLine: {'line': b'3:                                              ^\n'}
[6.267708] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold, float), f"expect the threshold to be a float"\n'}
[6.267903] (articubot_one) StdoutLine: {'line': b'3:                                              ^\n'}
[6.268115] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic, str), f"expect the scan topic to be a string"\n'}
[6.268317] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[6.268512] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic, str), f"expect the scan topic to be a string"\n'}
[6.268676] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[6.268872] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"\n'}
[6.269084] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[6.269287] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"\n'}
[6.269483] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[6.269682] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle, float), f'expect the angle of sector to be a float'\n"}
[6.269841] (articubot_one) StdoutLine: {'line': b'3:                                                       ^\n'}
[6.270001] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic == "scan"\n'}
[6.270185] (articubot_one) StdoutLine: {'line': b'3:                              ^\n'}
[6.270354] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.270515] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.270672] (articubot_one) StdoutLine: {'line': b'3:         pytest.fail(f"Parameter not declared: {e}")\n'}
[6.270832] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.270993] (articubot_one) StdoutLine: {'line': b'3:         pytest.fail(f"Error getting parameter: {e}")\n'}
[6.271177] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.271344] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.271503] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.271666] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.271824] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.271983] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.272159] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.272325] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.272486] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.272645] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.272804] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.272967] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.273146] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.273307] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.273466] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.273623] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.273783] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.273938] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.274117] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.274277] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.274438] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.274601] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.274762] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.274920] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.275094] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.275260] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.275425] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.275580] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.275741] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.275902] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.276078] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.276249] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.276408] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.276569] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.276734] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.276906] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.277073] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.277244] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.277397] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.277577] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.277734] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.277911] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.278092] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.278261] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.278427] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.278589] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.278746] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.278953] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.279120] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.279280] (articubot_one) StdoutLine: {'line': b"3: '''    ^\n"}
[6.279433] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.279585] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.279744] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.279900] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.280077] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.280238] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.280388] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.280543] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.280691] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.280841] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.281002] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.281176] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.281341] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.281510] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.281664] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.281823] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.281976] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.282147] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.282303] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.282465] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.282625] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.282785] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.282936] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.283103] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.283267] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.283425] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.283585] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.283745] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.283899] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.284067] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.284241] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.284395] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.284550] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.284704] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.284855] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.285050] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.285228] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.285384] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.285535] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.285710] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.285894] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.286097] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.286293] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.286481] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.286669] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.286856] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.287054] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.287250] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.287409] (articubot_one) StdoutLine: {'line': b"3: '''    ^\n"}
[6.287591] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.287746] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.287897] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.288112] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.288275] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.288435] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.288593] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.288755] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.288918] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.289094] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.289270] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.289437] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.289598] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.289766] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.289935] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.290121] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.290286] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.290442] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.290602] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.290758] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.290910] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.291087] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.291254] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.291405] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.291560] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.291711] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.291864] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.292024] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.292197] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.292353] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.292508] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.292665] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.292836] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.292990] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.293165] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.293325] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.293486] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.293637] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.293794] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.293946] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.294119] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.294290] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.294463] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.294624] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.294776] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.294937] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.295108] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.295275] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.295429] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.295590] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.295747] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.295903] (articubot_one) StdoutLine: {'line': b'3:          \n'}
[6.296073] (articubot_one) StdoutLine: {'line': b'3:                   ^\n'}
[6.296240] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.296394] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.296544] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.296693] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.296853] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.297006] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.297183] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.297338] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.297502] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.297659] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.297814] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.297979] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.298154] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.298320] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.298471] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.298627] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.298793] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.298953] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.299149] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.299329] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.299499] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.299664] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.299830] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.299998] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.300183] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.300362] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.300531] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.300696] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.300893] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.301081] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.301248] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.301405] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.301559] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.301718] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.301880] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.302069] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.302240] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.302397] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.302554] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.302707] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.302861] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.303036] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.303208] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.303378] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.303541] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.303700] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.303861] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.304035] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.304205] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.304360] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.304514] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.304666] (articubot_one) StdoutLine: {'line': b'3:       ^\n'}
[6.304818] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.304981] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.305158] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.305321] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.305476] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.305636] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.305795] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.305954] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.306131] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.306296] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.306455] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.306613] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.306769] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.306929] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.307115] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.307283] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.307437] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.307589] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.307740] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.307892] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.308057] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.308219] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.308374] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.308529] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.308682] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.308835] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.308983] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.309148] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.309304] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.309454] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.309603] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.309757] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.309905] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.310066] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.310230] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.310381] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.310532] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.310685] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.310835] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.310989] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.311166] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.311322] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.311484] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.311637] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.311782] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.311931] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.312103] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.312263] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.312412] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.312566] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.312718] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.312868] (articubot_one) StdoutLine: {'line': b'3:          \n'}
[6.313026] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[6.313192] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.313346] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.313498] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.313651] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.313800] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.313951] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.314118] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.314278] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.314433] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.314587] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.314743] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.314894] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.315061] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.315220] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.315375] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.315529] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.315676] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.315831] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.315984] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.316153] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.316307] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.316455] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.316605] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.316779] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.316930] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.317099] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.317249] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.317432] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.317614] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.317793] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.317967] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.318208] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.318398] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.318589] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.318778] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.318966] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.319175] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.319366] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.319554] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.319743] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.319903] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.320069] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.320230] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.320385] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.320537] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.320695] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.320845] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.321002] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.321170] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.321326] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.321493] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.321642] (articubot_one) StdoutLine: {'line': b'3:          \n'}
[6.321797] (articubot_one) StdoutLine: {'line': b'3:        ^\n'}
[6.321948] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.322125] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.322281] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.322439] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.322592] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.322744] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.322902] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.323071] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.323237] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.323392] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.323549] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.323701] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.323854] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.324006] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.324180] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.324335] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.324490] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.324646] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.324801] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.324952] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.325120] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.325297] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.325449] (-) TimerEvent: {}
[6.325484] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.325638] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.325796] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.325950] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.326125] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.326294] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.326450] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.326608] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.326771] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.326924] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.327103] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.327268] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.327428] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.327584] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.327742] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.327897] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.328070] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.328244] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.328396] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.328562] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.328728] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.328927] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.329107] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.329265] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.329411] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.329562] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.329709] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.329859] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.330008] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.330178] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.330329] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.330477] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.330627] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.330773] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.330923] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.331090] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.331244] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.331396] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.331543] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.331694] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.331842] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.331992] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.332162] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.332313] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.332462] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.332610] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.332768] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.332925] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.333094] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.333255] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.333415] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.333569] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.333728] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.333879] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.334045] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.334211] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.334371] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.334525] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.334680] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.334832] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.334970] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.335163] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.335330] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.335507] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.335667] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.335823] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.335980] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.336154] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.336316] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.336469] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.336626] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.336777] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.336931] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.337105] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.337268] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.337417] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.337579] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.337738] (articubot_one) StdoutLine: {'line': b"3: '''       ^\n"}
[6.337891] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.338058] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.338223] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.338395] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.338584] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.338773] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.338962] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.339169] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.339370] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.339551] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.339709] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.339863] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.340022] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.340188] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.340340] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.340495] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.340645] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.340801] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.340952] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.341128] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.341286] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.341440] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.341597] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.341750] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.341904] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.342071] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.342243] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.342402] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.342558] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.342723] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.342884] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.343056] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.343222] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.343379] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.343531] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.343685] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.343838] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.343995] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.344168] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.344325] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.344482] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.344639] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.344793] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.344957] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.345133] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.345291] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.345447] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.345609] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.345757] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.345918] (articubot_one) StdoutLine: {'line': b'3:    ^\n'}
[6.346088] (articubot_one) StdoutLine: {'line': b'3: 9     E111 indentation is not a multiple of 4\n'}
[6.346253] (articubot_one) StdoutLine: {'line': b'3: 1     E114 indentation is not a multiple of 4 (comment)\n'}
[6.346410] (articubot_one) StdoutLine: {'line': b'3: 4     E117 over-indented (comment)\n'}
[6.346568] (articubot_one) StdoutLine: {'line': b'3: 6     E122 continuation line missing indentation or outdented\n'}
[6.346723] (articubot_one) StdoutLine: {'line': b'3: 3     E128 continuation line under-indented for visual indent\n'}
[6.346884] (articubot_one) StdoutLine: {'line': b'3: 5     E131 continuation line unaligned for hanging indent\n'}
[6.347053] (articubot_one) StdoutLine: {'line': b"3: 3     E203 whitespace before ':'\n"}
[6.347225] (articubot_one) StdoutLine: {'line': b'3: 9     E225 missing whitespace around operator\n'}
[6.347385] (articubot_one) StdoutLine: {'line': b"3: 36    E231 missing whitespace after ','\n"}
[6.347541] (articubot_one) StdoutLine: {'line': b'3: 8     E261 at least two spaces before inline comment\n'}
[6.347702] (articubot_one) StdoutLine: {'line': b"3: 3     E262 inline comment should start with '# '\n"}
[6.347859] (articubot_one) StdoutLine: {'line': b"3: 5     E265 block comment should start with '# '\n"}
[6.348022] (articubot_one) StdoutLine: {'line': b'3: 1     E275 missing whitespace after keyword\n'}
[6.348195] (articubot_one) StdoutLine: {'line': b'3: 6     E302 expected 2 blank lines, found 1\n'}
[6.348350] (articubot_one) StdoutLine: {'line': b'3: 20    E303 too many blank lines (2)\n'}
[6.348500] (articubot_one) StdoutLine: {'line': b'3: 1     E305 expected 2 blank lines after class or function definition, found 1\n'}
[6.348659] (articubot_one) StdoutLine: {'line': b'3: 30    E501 line too long (110 > 99 characters)\n'}
[6.348810] (articubot_one) StdoutLine: {'line': b"3: 5     F401 'os' imported but unused\n"}
[6.348963] (articubot_one) StdoutLine: {'line': b'3: 5     F541 f-string is missing placeholders\n'}
[6.349137] (articubot_one) StdoutLine: {'line': b"3: 14    I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[6.349313] (articubot_one) StdoutLine: {'line': b'3: 3     I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[6.349468] (articubot_one) StdoutLine: {'line': b"3: 7     I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.\n"}
[6.349625] (articubot_one) StdoutLine: {'line': b'3: 44    Q000 Double quotes found but single quotes preferred\n'}
[6.349781] (articubot_one) StdoutLine: {'line': b'3: 2     Q001 Single quote multiline found but double quotes preferred\n'}
[6.349935] (articubot_one) StdoutLine: {'line': b'3: 24    W291 trailing whitespace\n'}
[6.350136] (articubot_one) StdoutLine: {'line': b'3: 2     W292 no newline at end of file\n'}
[6.350324] (articubot_one) StdoutLine: {'line': b'3: 14    W293 blank line contains whitespace\n'}
[6.350481] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.350634] (articubot_one) StdoutLine: {'line': b'3: ./launch/rplidar.launch.py:5:1: E302 expected 2 blank lines, found 1\n'}
[6.350797] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.350964] (articubot_one) StdoutLine: {'line': b'3: ./launch/rplidar.launch.py:14:100: E501 line too long (113 > 99 characters)\n'}
[6.351148] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.351309] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:6:1: I101 Imported names are in the wrong order. Should be Command, LaunchConfiguration\n'}
[6.351467] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.351627] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:7:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration, Command'\n"}
[6.351787] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.351944] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:10:1: F401 'xacro' imported but unused\n"}
[6.352123] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.352281] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:21:39: E231 missing whitespace after ','\n"}
[6.352438] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.352593] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:21:53: E231 missing whitespace after ','\n"}
[6.352745] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.352901] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:23:100: E501 line too long (132 > 99 characters)\n'}
[6.353066] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.353235] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:24:1: W293 blank line contains whitespace\n'}
[6.353398] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.353556] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:35:5: E303 too many blank lines (2)\n'}
[6.353716] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.353868] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:2:1: I201 Missing newline between import groups. 'import xacro' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.354067] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.354246] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:3:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'import xacro'\n"}
[6.354437] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.354626] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[6.354817] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.355004] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:12:1: I100 Import statements are in the wrong order. 'from launch.conditions import IfCondition, UnlessCondition' should be before 'from launch_ros.actions import Node'\n"}
[6.355227] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.355414] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:18:5: E303 too many blank lines (2)\n'}
[6.355576] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.355732] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:18:100: E501 line too long (110 > 99 characters)\n'}
[6.355888] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.356055] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:21:17: E225 missing whitespace around operator\n'}
[6.356220] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.356376] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:21:33: E261 at least two spaces before inline comment\n'}
[6.356528] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.356686] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:21:34: E262 inline comment should start with '# '\n"}
[6.356838] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.356990] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:25:62: E231 missing whitespace after ','\n"}
[6.357164] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.357318] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:25:71: E231 missing whitespace after ','\n"}
[6.357474] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.357628] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:33:10: W291 trailing whitespace\n'}
[6.357783] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.357934] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:34:1: W293 blank line contains whitespace\n'}
[6.358111] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.358274] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:47:21: E131 continuation line unaligned for hanging indent\n'}
[6.358448] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.358602] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:47:100: E501 line too long (104 > 99 characters)\n'}
[6.358758] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.358924] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:50:100: E501 line too long (126 > 99 characters)\n'}
[6.359110] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.359280] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:58:5: Q001 Single quote multiline found but double quotes preferred\n'}
[6.359447] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.359614] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:58:5: E303 too many blank lines (2)\n'}
[6.359776] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.359944] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:59:100: E501 line too long (101 > 99 characters)\n'}
[6.360127] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.360299] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:72:5: E122 continuation line missing indentation or outdented\n'}
[6.360469] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.360636] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:73:5: E122 continuation line missing indentation or outdented\n'}
[6.360957] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.361149] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:74:5: E122 continuation line missing indentation or outdented\n'}
[6.361315] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.361472] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:77:11: E131 continuation line unaligned for hanging indent\n'}
[6.361627] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.361792] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:78:10: E131 continuation line unaligned for hanging indent\n'}
[6.361947] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.362133] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:81:5: E122 continuation line missing indentation or outdented\n'}
[6.362292] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.362445] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:82:1: E122 continuation line missing indentation or outdented\n'}
[6.362601] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.362758] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:85:17: Q000 Double quotes found but single quotes preferred\n'}
[6.362905] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.363081] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:86:20: Q000 Double quotes found but single quotes preferred\n'}
[6.363239] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.363396] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:87:20: Q000 Double quotes found but single quotes preferred\n'}
[6.363552] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.363708] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:89:5: E265 block comment should start with '# '\n"}
[6.363866] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.364043] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:90:14: E225 missing whitespace around operator\n'}
[6.364218] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.364378] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:96:1: W293 blank line contains whitespace\n'}
[6.364535] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.364687] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:136:1: W293 blank line contains whitespace\n'}
[6.364853] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.365003] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:140:1: W293 blank line contains whitespace\n'}
[6.365183] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.365337] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:144:1: W293 blank line contains whitespace\n'}
[6.365486] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.365638] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:5:1: I100 Import statements are in the wrong order. 'import time' should be before 'import rclpy' and in a different group.\n"}
[6.365794] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.365954] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:5:1: I201 Missing newline between import groups. 'import time' is identified as Stdlib and 'import rclpy' is identified as Third Party.\n"}
[6.366129] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.366279] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:5:12: W291 trailing whitespace\n'}
[6.366430] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.366572] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:6:1: I201 Missing newline between import groups. 'from rclpy.executors import SingleThreadedExecutor' is identified as Third Party and 'import time' is identified as Stdlib.\n"}
[6.366736] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.366886] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:7:1: F401 'sensor_msgs.msg.LaserScan' imported but unused\n"}
[6.367052] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.367221] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:8:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[6.367376] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.367522] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:8:1: F401 'geometry_msgs.msg.Twist' imported but unused\n"}
[6.367677] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.367824] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:8:36: W291 trailing whitespace\n'}
[6.367984] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.368168] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:10:1: I100 Import statements are in the wrong order. 'from articubot_one.obstacle_avoidance import Obstacle' should be before 'from geometry_msgs.msg import Twist'\n"}
[6.368335] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.368488] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:10:54: W291 trailing whitespace\n'}
[6.368642] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.368802] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:12:1: E302 expected 2 blank lines, found 1\n'}
[6.368967] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.369147] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:19:1: E302 expected 2 blank lines, found 1\n'}
[6.369306] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.369460] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:14: E111 indentation is not a multiple of 4\n'}
[6.369613] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.369801] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:14: E117 over-indented\n'}
[6.369992] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.370200] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:37: E261 at least two spaces before inline comment\n'}
[6.370393] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.370581] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:39:29: E261 at least two spaces before inline comment\n'}
[6.370765] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.370939] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:46:14: E111 indentation is not a multiple of 4\n'}
[6.371150] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.371341] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:46:14: E117 over-indented\n'}
[6.371531] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.371720] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:52:31: Q000 Double quotes found but single quotes preferred\n'}
[6.371903] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.372072] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:55:48: E261 at least two spaces before inline comment\n'}
[6.372241] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.372392] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:57:53: E261 at least two spaces before inline comment\n'}
[6.372549] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.372699] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:76:46: Q000 Double quotes found but single quotes preferred\n'}
[6.372852] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.373006] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:76:46: F541 f-string is missing placeholders\n'}
[6.373180] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.373337] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:77:45: Q000 Double quotes found but single quotes preferred\n'}
[6.373502] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.373656] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:77:45: F541 f-string is missing placeholders\n'}
[6.373809] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.373963] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:78:44: Q000 Double quotes found but single quotes preferred\n'}
[6.374139] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.374298] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:78:44: F541 f-string is missing placeholders\n'}
[6.374455] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.374607] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:79:55: F541 f-string is missing placeholders\n'}
[6.374766] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.374925] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:84:30: Q000 Double quotes found but single quotes preferred\n'}
[6.375101] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.375258] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:85:29: Q000 Double quotes found but single quotes preferred\n'}
[6.375413] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.375565] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:89:21: Q000 Double quotes found but single quotes preferred\n'}
[6.375718] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.375869] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:91:21: Q000 Double quotes found but single quotes preferred\n'}
[6.376182] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.376359] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:96:1: Q001 Single quote multiline found but double quotes preferred\n'}
[6.376521] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.376678] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:96:1: E303 too many blank lines (4)\n'}
[6.376834] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.376985] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:106:74: W291 trailing whitespace\n'}
[6.377171] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.377329] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:126:52: W291 trailing whitespace\n'}
[6.377484] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.377631] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:127:61: W291 trailing whitespace\n'}
[6.377782] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.377930] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:132:63: W291 trailing whitespace\n'}
[6.378102] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.378260] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:136:42: W291 trailing whitespace\n'}
[6.378410] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.378563] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:144:4: W291 trailing whitespace\n'}
[6.378713] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.378864] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:144:8: W292 no newline at end of file\n'}
[6.379029] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.379200] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.379372] (articubot_one) StdoutLine: {'line': b'3: 15 files checked\n'}
[6.379531] (articubot_one) StdoutLine: {'line': b'3: 270 errors\n'}
[6.379690] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.379850] (articubot_one) StdoutLine: {'line': b"3: 'E'-type errors: 150\n"}
[6.380006] (articubot_one) StdoutLine: {'line': b"3: 'F'-type errors: 10\n"}
[6.380188] (articubot_one) StdoutLine: {'line': b"3: 'I'-type errors: 24\n"}
[6.380342] (articubot_one) StdoutLine: {'line': b"3: 'Q'-type errors: 46\n"}
[6.380501] (articubot_one) StdoutLine: {'line': b"3: 'W'-type errors: 40\n"}
[6.380659] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.380821] (articubot_one) StdoutLine: {'line': b'3: Checked files:\n'}
[6.380971] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.381140] (articubot_one) StdoutLine: {'line': b'3: * ./setup.py\n'}
[6.381294] (articubot_one) StdoutLine: {'line': b'3: * ./test/pytest/test_laserObstacle.py\n'}
[6.381451] (articubot_one) StdoutLine: {'line': b'3: * ./articubot_one/obstacle_avoidance.py\n'}
[6.381602] (articubot_one) StdoutLine: {'line': b'3: * ./articubot_one/__init__.py\n'}
[6.381746] (articubot_one) StdoutLine: {'line': b'3: * ./launch/joystick.launch.py\n'}
[6.381895] (articubot_one) StdoutLine: {'line': b'3: * ./launch/online_async_launch.py\n'}
[6.382063] (articubot_one) StdoutLine: {'line': b'3: * ./launch/ball_tracker.launch.py\n'}
[6.382229] (articubot_one) StdoutLine: {'line': b'3: * ./launch/localization_launch.py\n'}
[6.382396] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rviz_gazebo.launch.py\n'}
[6.382555] (articubot_one) StdoutLine: {'line': b'3: * ./launch/navigation_launch.py\n'}
[6.382710] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rsp.launch.py\n'}
[6.382858] (articubot_one) StdoutLine: {'line': b'3: * ./launch/launch_robot.launch.py\n'}
[6.383000] (articubot_one) StdoutLine: {'line': b'3: * ./launch/camera.launch.py\n'}
[6.383119] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rplidar.launch.py\n'}
[6.383207] (articubot_one) StdoutLine: {'line': b'3: * ./launch/launch_sim.launch.py\n'}
[6.383288] (articubot_one) StdoutLine: {'line': b'3: -- run_test.py: return code 1\n'}
[6.383370] (articubot_one) StdoutLine: {'line': b"3: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml'\n"}
[6.383451] (articubot_one) StdoutLine: {'line': b'3/6 Test #3: flake8 ...........................***Failed    0.56 sec\n'}
[6.383532] (articubot_one) StdoutLine: {'line': b'test 4\n'}
[6.383612] (articubot_one) StdoutLine: {'line': b'    Start 4: lint_cmake\n'}
[6.383691] (articubot_one) StdoutLine: {'line': b'\n'}
[6.383771] (articubot_one) StdoutLine: {'line': b'4: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/jazzy/bin/ament_lint_cmake" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml"\n'}
[6.383860] (articubot_one) StdoutLine: {'line': b'4: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[6.383940] (articubot_one) StdoutLine: {'line': b'4: Test timeout computed to be: 60\n'}
[6.384032] (articubot_one) StdoutLine: {'line': b"4: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[6.384126] (articubot_one) StdoutLine: {'line': b'4:  - /opt/ros/jazzy/bin/ament_lint_cmake --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml\n'}
[6.384210] (articubot_one) StdoutLine: {'line': b'4: CMakeLists.txt:40: Line ends in whitespace [whitespace/eol]\n'}
[6.384291] (articubot_one) StdoutLine: {'line': b'4: CMakeLists.txt:55: Line ends in whitespace [whitespace/eol]\n'}
[6.384372] (articubot_one) StdoutLine: {'line': b'4: \n'}
[6.384464] (articubot_one) StdoutLine: {'line': b'4: \n'}
[6.384545] (articubot_one) StdoutLine: {'line': b'4: 2 errors\n'}
[6.384627] (articubot_one) StdoutLine: {'line': b'4: -- run_test.py: return code 1\n'}
[6.384708] (articubot_one) StdoutLine: {'line': b"4: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml'\n"}
[6.388531] (articubot_one) StdoutLine: {'line': b'4/6 Test #4: lint_cmake .......................***Failed    0.21 sec\n'}
[6.388705] (articubot_one) StdoutLine: {'line': b'test 5\n'}
[6.388800] (articubot_one) StdoutLine: {'line': b'    Start 5: pep257\n'}
[6.388886] (articubot_one) StdoutLine: {'line': b'\n'}
[6.388971] (articubot_one) StdoutLine: {'line': b'5: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_pep257/pep257.txt" "--command" "/opt/ros/jazzy/bin/ament_pep257" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml"\n'}
[6.389087] (articubot_one) StdoutLine: {'line': b'5: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[6.389176] (articubot_one) StdoutLine: {'line': b'5: Test timeout computed to be: 60\n'}
[6.425592] (-) TimerEvent: {}
[6.460809] (articubot_one) StdoutLine: {'line': b"5: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[6.460998] (articubot_one) StdoutLine: {'line': b'5:  - /opt/ros/jazzy/bin/ament_pep257 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml\n'}
[6.525719] (-) TimerEvent: {}
[6.625916] (-) TimerEvent: {}
[6.633491] (articubot_one) StdoutLine: {'line': b'5: checking ./articubot_one/__init__.py\n'}
[6.633671] (articubot_one) StdoutLine: {'line': b'5: checking ./articubot_one/obstacle_avoidance.py\n'}
[6.633765] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/ball_tracker.launch.py\n'}
[6.633849] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/camera.launch.py\n'}
[6.633930] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/joystick.launch.py\n'}
[6.634089] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/launch_robot.launch.py\n'}
[6.634180] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/launch_sim.launch.py\n'}
[6.634261] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/localization_launch.py\n'}
[6.634341] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/navigation_launch.py\n'}
[6.634420] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/online_async_launch.py\n'}
[6.634499] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rplidar.launch.py\n'}
[6.634578] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rsp.launch.py\n'}
[6.634657] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rviz_gazebo.launch.py\n'}
[6.634735] (articubot_one) StdoutLine: {'line': b'5: checking ./setup.py\n'}
[6.634827] (articubot_one) StdoutLine: {'line': b'5: checking ./test/pytest/test_laserObstacle.py\n'}
[6.634911] (articubot_one) StdoutLine: {'line': b'5: No problems found\n'}
[6.655229] (articubot_one) StdoutLine: {'line': b'5: -- run_test.py: return code 0\n'}
[6.655736] (articubot_one) StdoutLine: {'line': b"5: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml'\n"}
[6.666678] (articubot_one) StdoutLine: {'line': b'5/6 Test #5: pep257 ...........................   Passed    0.28 sec\n'}
[6.667056] (articubot_one) StdoutLine: {'line': b'test 6\n'}
[6.667204] (articubot_one) StdoutLine: {'line': b'    Start 6: xmllint\n'}
[6.667294] (articubot_one) StdoutLine: {'line': b'\n'}
[6.667380] (articubot_one) StdoutLine: {'line': b'6: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_xmllint/xmllint.txt" "--command" "/opt/ros/jazzy/bin/ament_xmllint" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml"\n'}
[6.667478] (articubot_one) StdoutLine: {'line': b'6: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[6.667560] (articubot_one) StdoutLine: {'line': b'6: Test timeout computed to be: 60\n'}
[6.726055] (-) TimerEvent: {}
[6.745881] (articubot_one) StdoutLine: {'line': b"6: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[6.746152] (articubot_one) StdoutLine: {'line': b'6:  - /opt/ros/jazzy/bin/ament_xmllint --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml\n'}
[6.826113] (-) TimerEvent: {}
[6.926293] (-) TimerEvent: {}
[7.026596] (-) TimerEvent: {}
[7.126944] (-) TimerEvent: {}
[7.227204] (-) TimerEvent: {}
[7.327462] (-) TimerEvent: {}
[7.427755] (-) TimerEvent: {}
[7.528107] (-) TimerEvent: {}
[7.628363] (-) TimerEvent: {}
[7.728705] (-) TimerEvent: {}
[7.829064] (-) TimerEvent: {}
[7.929365] (-) TimerEvent: {}
[8.029653] (-) TimerEvent: {}
[8.129994] (-) TimerEvent: {}
[8.230304] (-) TimerEvent: {}
[8.330662] (-) TimerEvent: {}
[8.431031] (-) TimerEvent: {}
[8.531350] (-) TimerEvent: {}
[8.631814] (-) TimerEvent: {}
[8.732181] (-) TimerEvent: {}
[8.832523] (-) TimerEvent: {}
[8.841943] (articubot_one) StdoutLine: {'line': b"6: File 'package.xml' is valid\n"}
[8.842522] (articubot_one) StdoutLine: {'line': b'6: \n'}
[8.842926] (articubot_one) StdoutLine: {'line': b'6: No problems found\n'}
[8.874486] (articubot_one) StdoutLine: {'line': b'6: -- run_test.py: return code 0\n'}
[8.874906] (articubot_one) StdoutLine: {'line': b"6: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml'\n"}
[8.896992] (articubot_one) StdoutLine: {'line': b'6/6 Test #6: xmllint ..........................   Passed    2.23 sec\n'}
[8.898471] (articubot_one) StdoutLine: {'line': b'\n'}
[8.898961] (articubot_one) StdoutLine: {'line': b'33% tests passed, 4 tests failed out of 6\n'}
[8.899356] (articubot_one) StdoutLine: {'line': b'\n'}
[8.899683] (articubot_one) StdoutLine: {'line': b'Label Time Summary:\n'}
[8.899986] (articubot_one) StdoutLine: {'line': b'copyright     =   0.41 sec*proc (1 test)\n'}
[8.900361] (articubot_one) StdoutLine: {'line': b'flake8        =   0.56 sec*proc (1 test)\n'}
[8.900703] (articubot_one) StdoutLine: {'line': b'lint_cmake    =   0.21 sec*proc (1 test)\n'}
[8.901106] (articubot_one) StdoutLine: {'line': b'linter        =   3.68 sec*proc (5 tests)\n'}
[8.901469] (articubot_one) StdoutLine: {'line': b'pep257        =   0.28 sec*proc (1 test)\n'}
[8.901785] (articubot_one) StdoutLine: {'line': b'pytest        =   5.17 sec*proc (1 test)\n'}
[8.902151] (articubot_one) StdoutLine: {'line': b'xmllint       =   2.23 sec*proc (1 test)\n'}
[8.902484] (articubot_one) StdoutLine: {'line': b'\n'}
[8.902792] (articubot_one) StdoutLine: {'line': b'Total Test time (real) =   8.86 sec\n'}
[8.903122] (articubot_one) StdoutLine: {'line': b'\n'}
[8.903430] (articubot_one) StdoutLine: {'line': b'The following tests FAILED:\n'}
[8.903718] (articubot_one) StdoutLine: {'line': b'\t  1 - laser_obstacle_test (Failed)\n'}
[8.904040] (articubot_one) StdoutLine: {'line': b'\t  2 - copyright (Failed)\n'}
[8.904359] (articubot_one) StdoutLine: {'line': b'\t  3 - flake8 (Failed)\n'}
[8.904667] (articubot_one) StdoutLine: {'line': b'\t  4 - lint_cmake (Failed)\n'}
[8.907805] (articubot_one) StderrLine: {'line': b'Errors while running CTest\n'}
[8.908373] (articubot_one) StderrLine: {'line': b'Output from these tests are in: /home/jonatan/ros2_ws/build/articubot_one/Testing/Temporary/LastTest.log\n'}
[8.908808] (articubot_one) StderrLine: {'line': b'Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.\n'}
[8.912939] (articubot_one) CommandEnded: {'returncode': 8}
[8.913980] (articubot_one) TestFailure: {'identifier': 'articubot_one'}
[8.914389] (articubot_one) JobEnded: {'identifier': 'articubot_one', 'rc': 0}
[8.916229] (-) EventReactorShutdown: {}
