[0.035s] Invoking command in '/home/jonatan/ros2_ws/build/articubot_one': AMENT_PREFIX_PATH=/home/jonatan/ros2_ws/install/articubot_one:${AMENT_PREFIX_PATH} CMAKE_PREFIX_PATH=/home/jonatan/ros2_ws/install/articubot_one:${CMAKE_PREFIX_PATH} PS1=\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ PYTHONPATH=/home/jonatan/ros2_ws/install/articubot_one/lib/python3.12/site-packages:${PYTHONPATH} /usr/bin/ctest -C Release -D ExperimentalTest --no-compress-output -V --force-new-ctest-process
[0.046s] UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini
[0.046s] Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini
[0.046s]    Site: HP-EliteBook-x360-1030-G2
[0.046s]    Build name: (empty)
[0.047s]  Add coverage exclude regular expressions.
[0.047s] Create new tag: 20250518-1854 - Experimental
[0.047s] UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini
[0.047s] Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini
[0.047s] Test project /home/jonatan/ros2_ws/build/articubot_one
[0.047s] Constructing a list of tests
[0.048s] Done constructing a list of tests
[0.048s] Updating test list for fixtures
[0.048s] Added 0 tests to meet fixture requirements
[0.048s] Checking test dependency graph...
[0.049s] Checking test dependency graph end
[0.049s] test 1
[0.049s]     Start 1: laser_obstacle_test
[0.049s] 
[0.049s] 1: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test.txt" "--command" "/usr/bin/python3" "-u" "-m" "pytest" "/home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py" "-o" "cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache" "--junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--junit-prefix=articubot_one"
[0.050s] 1: Working Directory: /home/jonatan/ros2_ws/build/articubot_one
[0.051s] 1: Test timeout computed to be: 360
[0.137s] 1: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/build/articubot_one':
[0.140s] 1:  - /usr/bin/python3 -u -m pytest /home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py -o cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache --junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml --junit-prefix=articubot_one
[0.736s] 1: ============================= test session starts ==============================
[0.736s] 1: platform linux -- Python 3.12.3, pytest-7.4.4, pluggy-1.4.0
[0.744s] 1: cachedir: /home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache
[0.744s] 1: rootdir: /home/jonatan/ros2_ws/src/articubot_one
[0.745s] 1: plugins: launch-testing-3.4.4, ament-xmllint-0.17.2, ament-pep257-0.17.2, ament-copyright-0.17.2, ament-flake8-0.17.2, launch-testing-ros-0.26.7, ament-lint-0.17.2, cov-4.1.0, typeguard-4.1.5, colcon-core-0.19.0
[1.034s] 1: collected 2 items
[1.035s] 1: 
[5.202s] 1: ../../src/articubot_one/test/pytest/test_laserObstacle.py ..             [100%]
[5.203s] 1: 
[5.203s] 1: - generated xml file: /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml -
[5.204s] 1: ============================== 2 passed in 4.47s ===============================
[5.432s] 1: -- run_test.py: return code 0
[5.433s] 1: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml'
[5.449s] 1/6 Test #1: laser_obstacle_test ..............   Passed    5.40 sec
[5.450s] test 2
[5.451s]     Start 2: copyright
[5.452s] 
[5.453s] 2: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_copyright/copyright.txt" "--command" "/opt/ros/jazzy/bin/ament_copyright" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml"
[5.453s] 2: Working Directory: /home/jonatan/ros2_ws/src/articubot_one
[5.453s] 2: Test timeout computed to be: 200
[5.538s] 2: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':
[5.540s] 2:  - /opt/ros/jazzy/bin/ament_copyright --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml
[5.868s] 2: CONTRIBUTING.md: file not found
[5.869s] 2: LICENSE: file not found
[5.870s] 2: articubot_one/obstacle_avoidance.py: could not find copyright notice
[5.870s] 2: launch/ball_tracker.launch.py: could not find copyright notice
[5.870s] 2: launch/camera.launch.py: could not find copyright notice
[5.870s] 2: launch/joystick.launch.py: could not find copyright notice
[5.870s] 2: launch/launch_robot.launch.py: could not find copyright notice
[5.871s] 2: launch/launch_sim.launch.py: could not find copyright notice
[5.871s] 2: launch/online_async_launch.py: could not find copyright notice
[5.871s] 2: launch/rplidar.launch.py: could not find copyright notice
[5.871s] 2: launch/rsp.launch.py: could not find copyright notice
[5.871s] 2: launch/rviz_gazebo.launch.py: could not find copyright notice
[5.876s] 2: test/pytest/test_laserObstacle.py: could not find copyright notice
[5.876s] 2: 13 errors, checked 16 files
[5.894s] 2: -- run_test.py: return code 1
[5.895s] 2: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml'
[5.915s] 2/6 Test #2: copyright ........................***Failed    0.46 sec
[5.916s] test 3
[5.916s]     Start 3: flake8
[5.916s] 
[5.917s] 3: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_flake8/flake8.txt" "--command" "/opt/ros/jazzy/bin/ament_flake8" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml"
[5.917s] 3: Working Directory: /home/jonatan/ros2_ws/src/articubot_one
[5.917s] 3: Test timeout computed to be: 60
[6.030s] 3: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':
[6.032s] 3:  - /opt/ros/jazzy/bin/ament_flake8 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml
[6.580s] 3: from geometry_msgs.msg import Twist
[6.581s] 3: ^
[6.581s] 3: import math
[6.582s] 3: ^
[6.582s] 3: import math
[6.582s] 3: ^
[6.582s] 3: # i am writing down this piece of code with paramters 
[6.582s] 3:                                                      ^
[6.583s] 3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node 
[6.583s] 3:                                                                                                    ^
[6.584s] 3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node 
[6.584s] 3:                                                                                                               ^
[6.584s] 3:     def __init__(self) :
[6.584s] 3:                       ^
[6.585s] 3:         super().__init__("Laser_Obstacle_Avoidance")
[6.585s] 3:                          ^
[6.586s] 3:         
[6.586s] 3: ^
[6.586s] 3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance
[6.587s] 3:                                ^
[6.587s] 3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance
[6.588s] 3:                                                    ^
[6.588s] 3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance
[6.588s] 3:                                                                                                    ^
[6.588s] 3:         self.threshold=self.get_parameter("threshold_distance").value
[6.589s] 3:                       ^
[6.590s] 3:         self.threshold=self.get_parameter("threshold_distance").value
[6.590s] 3:                                           ^
[6.590s] 3:         
[6.590s] 3: ^
[6.591s] 3:         self.declare_parameter("laser_scan_topic","/scan")
[6.592s] 3:                                ^
[6.592s] 3:         self.declare_parameter("laser_scan_topic","/scan")
[6.592s] 3:                                                  ^
[6.593s] 3:         self.declare_parameter("laser_scan_topic","/scan")
[6.593s] 3:                                                   ^
[6.593s] 3:         self.laser_topic=self.get_parameter("laser_scan_topic").value
[6.593s] 3:                         ^
[6.593s] 3:         self.laser_topic=self.get_parameter("laser_scan_topic").value
[6.594s] 3:                                             ^
[6.594s] 3:         
[6.594s] 3: ^
[6.594s] 3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")
[6.595s] 3:                                ^
[6.595s] 3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")
[6.598s] 3:                                               ^
[6.598s] 3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")
[6.598s] 3:                                                ^
[6.599s] 3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value
[6.599s] 3:                       ^
[6.599s] 3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value
[6.599s] 3:                                           ^
[6.605s] 3:         self.frontal_detection_angle_rad = math.radians(self.get_parameter('frontal_detection_angle_deg').value)
[6.605s] 3:                                                                                                    ^
[6.609s] 3:         #create a publisher to the /cmd_vel
[6.609s] 3:         ^
[6.610s] 3:         self.cmd_vel_pub = self.create_publisher(Twist,self.cmd_topic, 10)
[6.610s] 3:                                                       ^
[6.610s] 3:     def laser_callback(self,msg):
[6.610s] 3:     ^
[6.613s] 3:     def laser_callback(self,msg):
[6.613s] 3:                            ^
[6.613s] 3:   
[6.613s] 3: ^
[6.614s] 3:         if not(scan_size) :
[6.615s] 3:               ^
[6.615s] 3:         if not(scan_size) :
[6.616s] 3:                          ^
[6.616s] 3:             #no laser data 
[6.616s] 3:             ^
[6.621s] 3:             #no laser data 
[6.621s] 3:                           ^
[6.622s] 3:             return 
[6.622s] 3:                   ^
[6.649s] 3:         # the lidar provides angles,angle step (common difference of the angle sequence), distances in meter
[6.651s] 3:                                                                                                    ^
[6.651s] 3:         
[6.653s] 3: ^
[6.654s] 3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance
[6.655s] 3:         ^
[6.656s] 3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance
[6.656s] 3:                                                                                                    ^
[6.656s] 3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance
[6.657s] 3:         ^
[6.657s] 3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance
[6.657s] 3:                                                                                                    ^
[6.658s] 3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle 
[6.658s] 3:                                                                                                    ^
[6.658s] 3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle 
[6.658s] 3:                                                                                                                      ^
[6.659s] 3:         # we are sweeping across all the angles with the increment 
[6.659s] 3:                                                                   ^
[6.659s] 3:         # while sweeping we compare  only the ranges with the ones in the defined angle 
[6.659s] 3:                                                                                        ^
[6.660s] 3:                  # If the range reading is valid (not inf or nan)
[6.660s] 3:                  ^
[6.660s] 3:                  # If the range reading is valid (not inf or nan)
[6.660s] 3:                  ^
[6.660s] 3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):
[6.661s] 3:                  ^
[6.661s] 3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):
[6.661s] 3:                  ^
[6.661s] 3:             
[6.662s] 3: ^
[6.662s] 3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])
[6.662s] 3:                      ^
[6.662s] 3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])
[6.663s] 3:                                                                                                    ^
[6.663s] 3:         #  To stop the robot from moving ahead when ever it meets an obstacle, it will just go back 
[6.663s] 3:                                                                                                    ^
[6.663s] 3:         if obstacle_detected :
[6.664s] 3:                             ^
[6.664s] 3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')
[6.664s] 3:            ^
[6.665s] 3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')
[6.665s] 3:                                                                                                    ^
[6.665s] 3:            twist.linear.x = 0.0
[6.665s] 3:            ^
[6.665s] 3:            twist.angular.z =0.0
[6.666s] 3:            ^
[6.666s] 3:            twist.angular.z =0.0
[6.666s] 3:                             ^
[6.666s] 3:            self.cmd_vel_pub.publish(twist)
[6.667s] 3:            ^
[6.667s] 3:            self.get_logger().info(f'No obstacle detected') 
[6.667s] 3:            ^
[6.667s] 3:            self.get_logger().info(f'No obstacle detected') 
[6.668s] 3:                                   ^
[6.668s] 3:            self.get_logger().info(f'No obstacle detected') 
[6.668s] 3:                                                           ^
[6.668s] 3: def main(args=None):
[6.669s] 3: ^
[6.669s] 3:         rclpy.spin(node) # Keep the node running and process callbacks
[6.669s] 3:                         ^
[6.669s] 3:         node.get_logger().info('Smart Obstacle Avoider Node stopped cleanly via KeyboardInterrupt.')
[6.669s] 3:                                                                                                    ^
[6.670s] 3: if __name__ == '__main__':
[6.670s] 3: ^
[6.670s] 3:     main()    
[6.670s] 3:           ^
[6.671s] 3: from ament_index_python.packages import get_package_share_directory
[6.671s] 3: ^
[6.671s] 3: from launch.actions import DeclareLaunchArgument
[6.671s] 3: ^
[6.672s] 3:     my_package_name='articubot_one'
[6.672s] 3:                    ^
[6.672s] 3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')
[6.672s] 3:                                                                                   ^
[6.673s] 3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')
[6.673s] 3:                                                                                            ^
[6.673s] 3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')
[6.673s] 3:                                                                                                    ^
[6.674s] 3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')
[6.674s] 3:                                                                                     ^
[6.674s] 3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')
[6.674s] 3:                                                                                              ^
[6.675s] 3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')
[6.675s] 3:                                                                                                    ^
[6.675s] 3:     params_path = PythonExpression(['"',tracker_params_sim, '" if "true" == "', sim_mode, '" else "', tracker_params_robot, '"'])
[6.675s] 3:                                        ^
[6.675s] 3:     params_path = PythonExpression(['"',tracker_params_sim, '" if "true" == "', sim_mode, '" else "', tracker_params_robot, '"'])
[6.676s] 3:                                                                                                    ^
[6.676s] 3:                     get_package_share_directory('ball_tracker'), 'launch', 'ball_tracker.launch.py')]),
[6.676s] 3:                                                                                                    ^
[6.676s] 3:                     launch_arguments={'params_file': params_path,
[6.677s] 3:                     ^
[6.677s] 3:                                     'image_topic': '/camera/image_raw',
[6.677s] 3:                                     ^
[6.677s] 3:                                     'cmd_vel_topic': '/cmd_vel_tracker',
[6.677s] 3:                                     ^
[6.678s] 3:                                     'enable_3d_tracker': 'true'}.items())
[6.678s] 3:                                     ^
[6.678s] 3: import os
[6.678s] 3: ^
[6.678s] 3: def generate_launch_description():
[6.679s] 3: ^
[6.679s] 3:     return LaunchDescription([
[6.679s] 3:     ^
[6.679s] 3:                 'image_size': [640,480],
[6.680s] 3:                                   ^
[6.680s] 3:     )
[6.680s] 3:     ^
[6.680s] 3: 
[6.681s] 3: ./articubot_one/obstacle_avoidance.py:5:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'
[6.681s] 3: 
[6.681s] 3: ./articubot_one/obstacle_avoidance.py:6:1: I100 Import statements are in the wrong order. 'import math' should be before 'from geometry_msgs.msg import Twist' and in a different group.
[6.681s] 3: 
[6.682s] 3: ./articubot_one/obstacle_avoidance.py:6:1: I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.
[6.682s] 3: 
[6.682s] 3: ./articubot_one/obstacle_avoidance.py:9:54: W291 trailing whitespace
[6.682s] 3: 
[6.682s] 3: ./articubot_one/obstacle_avoidance.py:10:100: E501 line too long (110 > 99 characters)
[6.683s] 3: 
[6.683s] 3: ./articubot_one/obstacle_avoidance.py:10:111: W291 trailing whitespace
[6.683s] 3: 
[6.683s] 3: ./articubot_one/obstacle_avoidance.py:14:23: E203 whitespace before ':'
[6.683s] 3: 
[6.684s] 3: ./articubot_one/obstacle_avoidance.py:15:26: Q000 Double quotes found but single quotes preferred
[6.684s] 3: 
[6.684s] 3: ./articubot_one/obstacle_avoidance.py:16:1: W293 blank line contains whitespace
[6.684s] 3: 
[6.685s] 3: ./articubot_one/obstacle_avoidance.py:17:32: Q000 Double quotes found but single quotes preferred
[6.685s] 3: 
[6.685s] 3: ./articubot_one/obstacle_avoidance.py:17:52: E231 missing whitespace after ','
[6.685s] 3: 
[6.686s] 3: ./articubot_one/obstacle_avoidance.py:17:100: E501 line too long (102 > 99 characters)
[6.686s] 3: 
[6.686s] 3: ./articubot_one/obstacle_avoidance.py:18:23: E225 missing whitespace around operator
[6.686s] 3: 
[6.687s] 3: ./articubot_one/obstacle_avoidance.py:18:43: Q000 Double quotes found but single quotes preferred
[6.687s] 3: 
[6.687s] 3: ./articubot_one/obstacle_avoidance.py:19:1: W293 blank line contains whitespace
[6.687s] 3: 
[6.687s] 3: ./articubot_one/obstacle_avoidance.py:20:32: Q000 Double quotes found but single quotes preferred
[6.688s] 3: 
[6.688s] 3: ./articubot_one/obstacle_avoidance.py:20:50: E231 missing whitespace after ','
[6.688s] 3: 
[6.688s] 3: ./articubot_one/obstacle_avoidance.py:20:51: Q000 Double quotes found but single quotes preferred
[6.689s] 3: 
[6.689s] 3: ./articubot_one/obstacle_avoidance.py:21:25: E225 missing whitespace around operator
[6.689s] 3: 
[6.689s] 3: ./articubot_one/obstacle_avoidance.py:21:45: Q000 Double quotes found but single quotes preferred
[6.690s] 3: 
[6.690s] 3: ./articubot_one/obstacle_avoidance.py:22:1: W293 blank line contains whitespace
[6.690s] 3: 
[6.690s] 3: ./articubot_one/obstacle_avoidance.py:23:32: Q000 Double quotes found but single quotes preferred
[6.690s] 3: 
[6.691s] 3: ./articubot_one/obstacle_avoidance.py:23:47: E231 missing whitespace after ','
[6.691s] 3: 
[6.691s] 3: ./articubot_one/obstacle_avoidance.py:23:48: Q000 Double quotes found but single quotes preferred
[6.691s] 3: 
[6.691s] 3: ./articubot_one/obstacle_avoidance.py:24:23: E225 missing whitespace around operator
[6.692s] 3: 
[6.692s] 3: ./articubot_one/obstacle_avoidance.py:24:43: Q000 Double quotes found but single quotes preferred
[6.692s] 3: 
[6.692s] 3: ./articubot_one/obstacle_avoidance.py:29:100: E501 line too long (112 > 99 characters)
[6.692s] 3: 
[6.693s] 3: ./articubot_one/obstacle_avoidance.py:38:9: E265 block comment should start with '# '
[6.693s] 3: 
[6.693s] 3: ./articubot_one/obstacle_avoidance.py:39:55: E231 missing whitespace after ','
[6.693s] 3: 
[6.694s] 3: ./articubot_one/obstacle_avoidance.py:43:5: E303 too many blank lines (2)
[6.694s] 3: 
[6.694s] 3: ./articubot_one/obstacle_avoidance.py:43:28: E231 missing whitespace after ','
[6.694s] 3: 
[6.695s] 3: ./articubot_one/obstacle_avoidance.py:47:1: W293 blank line contains whitespace
[6.695s] 3: 
[6.695s] 3: ./articubot_one/obstacle_avoidance.py:48:15: E275 missing whitespace after keyword
[6.695s] 3: 
[6.695s] 3: ./articubot_one/obstacle_avoidance.py:48:26: E203 whitespace before ':'
[6.696s] 3: 
[6.696s] 3: ./articubot_one/obstacle_avoidance.py:49:13: E265 block comment should start with '# '
[6.696s] 3: 
[6.696s] 3: ./articubot_one/obstacle_avoidance.py:49:27: W291 trailing whitespace
[6.697s] 3: 
[6.697s] 3: ./articubot_one/obstacle_avoidance.py:50:19: W291 trailing whitespace
[6.697s] 3: 
[6.697s] 3: ./articubot_one/obstacle_avoidance.py:51:100: E501 line too long (108 > 99 characters)
[6.697s] 3: 
[6.698s] 3: ./articubot_one/obstacle_avoidance.py:56:1: W293 blank line contains whitespace
[6.698s] 3: 
[6.698s] 3: ./articubot_one/obstacle_avoidance.py:60:9: E265 block comment should start with '# '
[6.698s] 3: 
[6.699s] 3: ./articubot_one/obstacle_avoidance.py:60:100: E501 line too long (148 > 99 characters)
[6.699s] 3: 
[6.699s] 3: ./articubot_one/obstacle_avoidance.py:61:9: E265 block comment should start with '# '
[6.699s] 3: 
[6.700s] 3: ./articubot_one/obstacle_avoidance.py:61:100: E501 line too long (106 > 99 characters)
[6.700s] 3: 
[6.700s] 3: ./articubot_one/obstacle_avoidance.py:62:100: E501 line too long (117 > 99 characters)
[6.700s] 3: 
[6.701s] 3: ./articubot_one/obstacle_avoidance.py:62:118: W291 trailing whitespace
[6.701s] 3: 
[6.701s] 3: ./articubot_one/obstacle_avoidance.py:64:67: W291 trailing whitespace
[6.701s] 3: 
[6.702s] 3: ./articubot_one/obstacle_avoidance.py:65:88: W291 trailing whitespace
[6.702s] 3: 
[6.702s] 3: ./articubot_one/obstacle_avoidance.py:75:18: E114 indentation is not a multiple of 4 (comment)
[6.702s] 3: 
[6.702s] 3: ./articubot_one/obstacle_avoidance.py:75:18: E117 over-indented (comment)
[6.703s] 3: 
[6.703s] 3: ./articubot_one/obstacle_avoidance.py:76:18: E111 indentation is not a multiple of 4
[6.703s] 3: 
[6.703s] 3: ./articubot_one/obstacle_avoidance.py:76:18: E117 over-indented
[6.703s] 3: 
[6.704s] 3: ./articubot_one/obstacle_avoidance.py:77:1: W293 blank line contains whitespace
[6.704s] 3: 
[6.704s] 3: ./articubot_one/obstacle_avoidance.py:78:22: E111 indentation is not a multiple of 4
[6.704s] 3: 
[6.704s] 3: ./articubot_one/obstacle_avoidance.py:78:100: E501 line too long (104 > 99 characters)
[6.705s] 3: 
[6.705s] 3: ./articubot_one/obstacle_avoidance.py:86:100: W291 trailing whitespace
[6.705s] 3: 
[6.705s] 3: ./articubot_one/obstacle_avoidance.py:87:29: E203 whitespace before ':'
[6.705s] 3: 
[6.706s] 3: ./articubot_one/obstacle_avoidance.py:88:12: E111 indentation is not a multiple of 4
[6.706s] 3: 
[6.706s] 3: ./articubot_one/obstacle_avoidance.py:88:100: E501 line too long (115 > 99 characters)
[6.706s] 3: 
[6.707s] 3: ./articubot_one/obstacle_avoidance.py:89:12: E111 indentation is not a multiple of 4
[6.707s] 3: 
[6.707s] 3: ./articubot_one/obstacle_avoidance.py:90:12: E111 indentation is not a multiple of 4
[6.707s] 3: 
[6.707s] 3: ./articubot_one/obstacle_avoidance.py:90:29: E225 missing whitespace around operator
[6.708s] 3: 
[6.708s] 3: ./articubot_one/obstacle_avoidance.py:91:12: E111 indentation is not a multiple of 4
[6.708s] 3: 
[6.708s] 3: ./articubot_one/obstacle_avoidance.py:93:12: E111 indentation is not a multiple of 4
[6.708s] 3: 
[6.709s] 3: ./articubot_one/obstacle_avoidance.py:93:35: F541 f-string is missing placeholders
[6.709s] 3: 
[6.709s] 3: ./articubot_one/obstacle_avoidance.py:93:59: W291 trailing whitespace
[6.709s] 3: 
[6.710s] 3: ./articubot_one/obstacle_avoidance.py:95:1: E302 expected 2 blank lines, found 1
[6.710s] 3: 
[6.710s] 3: ./articubot_one/obstacle_avoidance.py:99:25: E261 at least two spaces before inline comment
[6.710s] 3: 
[6.710s] 3: ./articubot_one/obstacle_avoidance.py:101:100: E501 line too long (100 > 99 characters)
[6.711s] 3: 
[6.711s] 3: ./articubot_one/obstacle_avoidance.py:116:1: E305 expected 2 blank lines after class or function definition, found 1
[6.711s] 3: 
[6.711s] 3: ./articubot_one/obstacle_avoidance.py:117:11: W291 trailing whitespace
[6.711s] 3: 
[6.712s] 3: ./launch/ball_tracker.launch.py:2:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.
[6.712s] 3: 
[6.712s] 3: ./launch/ball_tracker.launch.py:8:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import PythonExpression'
[6.712s] 3: 
[6.712s] 3: ./launch/ball_tracker.launch.py:13:20: E225 missing whitespace around operator
[6.713s] 3: 
[6.713s] 3: ./launch/ball_tracker.launch.py:17:83: E231 missing whitespace after ','
[6.713s] 3: 
[6.713s] 3: ./launch/ball_tracker.launch.py:17:92: E231 missing whitespace after ','
[6.713s] 3: 
[6.714s] 3: ./launch/ball_tracker.launch.py:17:100: E501 line too long (123 > 99 characters)
[6.714s] 3: 
[6.714s] 3: ./launch/ball_tracker.launch.py:18:85: E231 missing whitespace after ','
[6.714s] 3: 
[6.715s] 3: ./launch/ball_tracker.launch.py:18:94: E231 missing whitespace after ','
[6.715s] 3: 
[6.715s] 3: ./launch/ball_tracker.launch.py:18:100: E501 line too long (127 > 99 characters)
[6.715s] 3: 
[6.715s] 3: ./launch/ball_tracker.launch.py:20:40: E231 missing whitespace after ','
[6.715s] 3: 
[6.716s] 3: ./launch/ball_tracker.launch.py:20:100: E501 line too long (129 > 99 characters)
[6.716s] 3: 
[6.716s] 3: ./launch/ball_tracker.launch.py:24:100: E501 line too long (103 > 99 characters)
[6.716s] 3: 
[6.716s] 3: ./launch/ball_tracker.launch.py:25:21: E131 continuation line unaligned for hanging indent
[6.716s] 3: 
[6.717s] 3: ./launch/ball_tracker.launch.py:26:37: E128 continuation line under-indented for visual indent
[6.717s] 3: 
[6.717s] 3: ./launch/ball_tracker.launch.py:27:37: E128 continuation line under-indented for visual indent
[6.717s] 3: 
[6.718s] 3: ./launch/ball_tracker.launch.py:28:37: E128 continuation line under-indented for visual indent
[6.718s] 3: 
[6.718s] 3: ./launch/camera.launch.py:1:1: F401 'os' imported but unused
[6.718s] 3: 
[6.718s] 3: ./launch/camera.launch.py:6:1: E302 expected 2 blank lines, found 1
[6.719s] 3: 
[6.719s] 3: ./launch/camera.launch.py:10:5: E303 too many blank lines (3)
[6.719s] 3: 
[6.719s] 3: ./launch/camera.launch.py:18:35: E231 missing whitespace after ','
[6.719s] 3: 
[6.720s] 3: ./launch/camera.launch.py:22:5: E122 continuation line missing indentation or outdented
[6.720s] 3: 
[6.720s] 3: from launch.substitutions import LaunchConfiguration
[6.720s] 3: ^
[6.720s] 3: from launch.actions import DeclareLaunchArgument
[6.720s] 3: ^
[6.721s] 3: import os
[6.721s] 3: ^
[6.721s] 3: from ament_index_python.packages import get_package_share_directory
[6.721s] 3: ^
[6.721s] 3: def generate_launch_description():
[6.722s] 3: ^
[6.722s] 3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')
[6.722s] 3:                                                                           ^
[6.722s] 3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')
[6.723s] 3:                                                                                    ^
[6.723s] 3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')
[6.723s] 3:                                                                                                    ^
[6.723s] 3:             remappings=[('/cmd_vel','/cmd_vel_joy')]
[6.724s] 3:                                    ^
[6.724s] 3:             remappings=[('/cmd_vel_in','/diff_cont/cmd_vel_unstamped'),
[6.724s] 3:                                       ^
[6.724s] 3:                         ('/cmd_vel_out','/diff_cont/cmd_vel')]
[6.724s] 3:                                        ^
[6.724s] 3:     return LaunchDescription([
[6.725s] 3:     ^
[6.725s] 3:         twist_stamper       
[6.725s] 3:                      ^
[6.725s] 3:     ])      ^
[6.726s] 3: from launch.actions import RegisterEventHandler
[6.726s] 3: ^
[6.726s] 3: def generate_launch_description():
[6.726s] 3: ^
[6.726s] 3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled
[6.727s] 3:     ^
[6.727s] 3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled
[6.727s] 3:                                                                                                    ^
[6.727s] 3:     package_name='articubot_one' #<--- CHANGE ME
[6.727s] 3:                 ^
[6.728s] 3:     package_name='articubot_one' #<--- CHANGE ME
[6.728s] 3:                                 ^
[6.728s] 3:     package_name='articubot_one' #<--- CHANGE ME
[6.728s] 3:                                  ^
[6.728s] 3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'
[6.728s] 3:                                                              ^
[6.729s] 3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'
[6.729s] 3:                                                                       ^
[6.729s] 3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')
[6.729s] 3:     ^
[6.729s] 3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')
[6.730s] 3:                                                                              ^
[6.730s] 3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')
[6.730s] 3:                                                                                       ^
[6.730s] 3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')
[6.731s] 3:                                                                                                    ^
[6.731s] 3:             package="twist_mux",
[6.731s] 3:                     ^
[6.731s] 3:             executable="twist_mux",
[6.732s] 3:                        ^
[6.732s] 3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]
[6.732s] 3:                                        ^
[6.732s] 3:     
[6.732s] 3: ^
[6.733s] 3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])
[6.733s] 3:     ^
[6.733s] 3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])
[6.733s] 3:                                                                                                    ^
[6.733s] 3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')
[6.734s] 3:                                                                                    ^
[6.734s] 3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')
[6.734s] 3:                                                                                             ^
[6.734s] 3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')
[6.734s] 3:                                                                                                    ^
[6.735s] 3:         package="controller_manager",
[6.735s] 3:                 ^
[6.735s] 3:         executable="ros2_control_node",
[6.735s] 3:                    ^
[6.736s] 3:         package="controller_manager",
[6.736s] 3:                 ^
[6.736s] 3:         executable="spawner",
[6.736s] 3:                    ^
[6.736s] 3:         arguments=["diff_cont"],
[6.737s] 3:                    ^
[6.737s] 3:         package="controller_manager",
[6.737s] 3:                 ^
[6.737s] 3:         executable="spawner",
[6.737s] 3:                    ^
[6.738s] 3:         arguments=["joint_broad"],
[6.738s] 3:                    ^
[6.738s] 3:     # Code for delaying a node (I haven't tested how effective it is)
[6.738s] 3:     ^
[6.738s] 3:     # 
[6.739s] 3:      ^
[6.739s] 3:     # Launch them all!
[6.739s] 3:     ^
[6.739s] 3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument
[6.739s] 3: ^
[6.740s] 3: def generate_launch_description():
[6.740s] 3: ^
[6.740s] 3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled
[6.740s] 3:     ^
[6.740s] 3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled
[6.741s] 3:                                                                                                    ^
[6.741s] 3:     package_name='articubot_one' #<--- CHANGE ME
[6.741s] 3:                 ^
[6.741s] 3:     package_name='articubot_one' #<--- CHANGE ME
[6.742s] 3:                                 ^
[6.742s] 3:     package_name='articubot_one' #<--- CHANGE ME
[6.742s] 3:                                  ^
[6.742s] 3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'
[6.742s] 3:                                                              ^
[6.743s] 3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'
[6.744s] 3:                                                                       ^
[6.744s] 3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'
[6.744s] 3:                                                              ^
[6.744s] 3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'
[6.745s] 3:                                                                       ^
[6.745s] 3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')
[6.745s] 3:                                                                              ^
[6.745s] 3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')
[6.746s] 3:                                                                                       ^
[6.746s] 3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')
[6.746s] 3:                                                                                                    ^
[6.747s] 3:             package="twist_mux",
[6.747s] 3:                     ^
[6.747s] 3:             executable="twist_mux",
[6.748s] 3:                        ^
[6.748s] 3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]
[6.748s] 3:                                        ^
[6.748s] 3:     default_world = os.path.join(
[6.748s] 3:     ^
[6.749s] 3:         )    
[6.749s] 3:          ^
[6.749s] 3:     
[6.749s] 3: ^
[6.750s] 3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()
[6.750s] 3:                     ^
[6.750s] 3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()
[6.750s] 3:                                                                                                    ^
[6.751s] 3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.
[6.751s] 3:                                                                                                    ^
[6.751s] 3:     diff_drive_spawner = Node(
[6.751s] 3:     ^
[6.752s] 3:         package="controller_manager",
[6.752s] 3:                 ^
[6.752s] 3:         executable="spawner",
[6.752s] 3:                    ^
[6.753s] 3:         arguments=["diff_cont"],
[6.753s] 3:                    ^
[6.753s] 3:         package="controller_manager",
[6.754s] 3:                 ^
[6.754s] 3:         executable="spawner",
[6.754s] 3:                    ^
[6.754s] 3:         arguments=["joint_broad"],
[6.755s] 3:                    ^
[6.755s] 3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')
[6.755s] 3:     ^
[6.755s] 3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')
[6.756s] 3:                                                                           ^
[6.756s] 3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')
[6.756s] 3:                                                                                    ^
[6.756s] 3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')
[6.757s] 3:                                                                                                    ^
[6.757s] 3:         package="ros_gz_bridge",
[6.757s] 3:                 ^
[6.757s] 3:         executable="parameter_bridge",
[6.758s] 3:                    ^
[6.758s] 3:         package="ros_gz_image",
[6.758s] 3:                 ^
[6.758s] 3:         executable="image_bridge",
[6.759s] 3:                    ^
[6.759s] 3:         arguments=["/camera/image_raw"]
[6.759s] 3:                    ^
[6.759s] 3:     # Code for delaying a node (I haven't tested how effective it is)
[6.760s] 3:     ^
[6.760s] 3:     # 
[6.760s] 3:      ^
[6.760s] 3:     # Launch them all!
[6.761s] 3:     ^
[6.761s] 3: from ament_index_python.packages import get_package_share_directory
[6.761s] 3: ^
[6.761s] 3:     default_params_file = os.path.join(get_package_share_directory("articubot_one"),
[6.762s] 3:                                                                    ^
[6.762s] 3: import os
[6.762s] 3: ^
[6.763s] 3: ./launch/joystick.launch.py:3:1: I100 Import statements are in the wrong order. 'from launch.substitutions import LaunchConfiguration' should be before 'from launch_ros.actions import Node'
[6.763s] 3: 
[6.763s] 3: ./launch/joystick.launch.py:4:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration'
[6.764s] 3: 
[6.764s] 3: ./launch/joystick.launch.py:6:1: I100 Import statements are in the wrong order. 'import os' should be before 'from launch.actions import DeclareLaunchArgument' and in a different group.
[6.764s] 3: 
[6.765s] 3: ./launch/joystick.launch.py:7:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.
[6.765s] 3: 
[6.765s] 3: ./launch/joystick.launch.py:9:1: E302 expected 2 blank lines, found 1
[6.765s] 3: 
[6.766s] 3: ./launch/joystick.launch.py:12:75: E231 missing whitespace after ','
[6.766s] 3: 
[6.766s] 3: ./launch/joystick.launch.py:12:84: E231 missing whitespace after ','
[6.766s] 3: 
[6.767s] 3: ./launch/joystick.launch.py:12:100: E501 line too long (100 > 99 characters)
[6.767s] 3: 
[6.767s] 3: ./launch/joystick.launch.py:25:36: E231 missing whitespace after ','
[6.767s] 3: 
[6.768s] 3: ./launch/joystick.launch.py:32:39: E231 missing whitespace after ','
[6.768s] 3: 
[6.768s] 3: ./launch/joystick.launch.py:33:40: E231 missing whitespace after ','
[6.768s] 3: 
[6.769s] 3: ./launch/joystick.launch.py:37:5: E303 too many blank lines (2)
[6.769s] 3: 
[6.769s] 3: ./launch/joystick.launch.py:44:22: W291 trailing whitespace
[6.769s] 3: 
[6.770s] 3: ./launch/joystick.launch.py:45:7: W292 no newline at end of file
[6.770s] 3: 
[6.770s] 3: ./launch/launch_robot.launch.py:10:1: I100 Import statements are in the wrong order. 'from launch.actions import RegisterEventHandler' should be before 'from launch.substitutions import Command'
[6.770s] 3: 
[6.771s] 3: ./launch/launch_robot.launch.py:17:1: E303 too many blank lines (3)
[6.771s] 3: 
[6.771s] 3: ./launch/launch_robot.launch.py:20:5: E303 too many blank lines (2)
[6.771s] 3: 
[6.771s] 3: ./launch/launch_robot.launch.py:20:100: E501 line too long (110 > 99 characters)
[6.772s] 3: 
[6.772s] 3: ./launch/launch_robot.launch.py:23:17: E225 missing whitespace around operator
[6.772s] 3: 
[6.772s] 3: ./launch/launch_robot.launch.py:23:33: E261 at least two spaces before inline comment
[6.773s] 3: 
[6.773s] 3: ./launch/launch_robot.launch.py:23:34: E262 inline comment should start with '# '
[6.773s] 3: 
[6.774s] 3: ./launch/launch_robot.launch.py:27:62: E231 missing whitespace after ','
[6.774s] 3: 
[6.774s] 3: ./launch/launch_robot.launch.py:27:71: E231 missing whitespace after ','
[6.774s] 3: 
[6.774s] 3: ./launch/launch_robot.launch.py:38:5: E303 too many blank lines (2)
[6.775s] 3: 
[6.775s] 3: ./launch/launch_robot.launch.py:38:78: E231 missing whitespace after ','
[6.775s] 3: 
[6.775s] 3: ./launch/launch_robot.launch.py:38:87: E231 missing whitespace after ','
[6.776s] 3: 
[6.776s] 3: ./launch/launch_robot.launch.py:38:100: E501 line too long (104 > 99 characters)
[6.776s] 3: 
[6.776s] 3: ./launch/launch_robot.launch.py:40:21: Q000 Double quotes found but single quotes preferred
[6.776s] 3: 
[6.777s] 3: ./launch/launch_robot.launch.py:41:24: Q000 Double quotes found but single quotes preferred
[6.777s] 3: 
[6.777s] 3: ./launch/launch_robot.launch.py:43:40: E231 missing whitespace after ','
[6.777s] 3: 
[6.777s] 3: ./launch/launch_robot.launch.py:46:1: W293 blank line contains whitespace
[6.778s] 3: 
[6.778s] 3: ./launch/launch_robot.launch.py:49:5: E303 too many blank lines (4)
[6.778s] 3: 
[6.778s] 3: ./launch/launch_robot.launch.py:49:100: E501 line too long (104 > 99 characters)
[6.779s] 3: 
[6.779s] 3: ./launch/launch_robot.launch.py:51:84: E231 missing whitespace after ','
[6.780s] 3: 
[6.780s] 3: ./launch/launch_robot.launch.py:51:93: E231 missing whitespace after ','
[6.780s] 3: 
[6.781s] 3: ./launch/launch_robot.launch.py:51:100: E501 line too long (115 > 99 characters)
[6.781s] 3: 
[6.781s] 3: ./launch/launch_robot.launch.py:54:17: Q000 Double quotes found but single quotes preferred
[6.782s] 3: 
[6.782s] 3: ./launch/launch_robot.launch.py:55:20: Q000 Double quotes found but single quotes preferred
[6.782s] 3: 
[6.782s] 3: ./launch/launch_robot.launch.py:63:17: Q000 Double quotes found but single quotes preferred
[6.783s] 3: 
[6.783s] 3: ./launch/launch_robot.launch.py:64:20: Q000 Double quotes found but single quotes preferred
[6.783s] 3: 
[6.783s] 3: ./launch/launch_robot.launch.py:65:20: Q000 Double quotes found but single quotes preferred
[6.783s] 3: 
[6.784s] 3: ./launch/launch_robot.launch.py:76:17: Q000 Double quotes found but single quotes preferred
[6.784s] 3: 
[6.784s] 3: ./launch/launch_robot.launch.py:77:20: Q000 Double quotes found but single quotes preferred
[6.784s] 3: 
[6.785s] 3: ./launch/launch_robot.launch.py:78:20: Q000 Double quotes found but single quotes preferred
[6.785s] 3: 
[6.785s] 3: ./launch/launch_robot.launch.py:89:5: E303 too many blank lines (2)
[6.785s] 3: 
[6.785s] 3: ./launch/launch_robot.launch.py:90:6: W291 trailing whitespace
[6.786s] 3: 
[6.786s] 3: ./launch/launch_robot.launch.py:107:5: E303 too many blank lines (3)
[6.786s] 3: 
[6.786s] 3: ./launch/launch_sim.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription
[6.787s] 3: 
[6.787s] 3: ./launch/launch_sim.launch.py:15:1: E303 too many blank lines (3)
[6.787s] 3: 
[6.787s] 3: ./launch/launch_sim.launch.py:18:5: E303 too many blank lines (2)
[6.787s] 3: 
[6.788s] 3: ./launch/launch_sim.launch.py:18:100: E501 line too long (110 > 99 characters)
[6.788s] 3: 
[6.788s] 3: ./launch/launch_sim.launch.py:21:17: E225 missing whitespace around operator
[6.789s] 3: 
[6.789s] 3: ./launch/launch_sim.launch.py:21:33: E261 at least two spaces before inline comment
[6.789s] 3: 
[6.789s] 3: ./launch/launch_sim.launch.py:21:34: E262 inline comment should start with '# '
[6.790s] 3: 
[6.790s] 3: ./launch/launch_sim.launch.py:25:62: E231 missing whitespace after ','
[6.790s] 3: 
[6.790s] 3: ./launch/launch_sim.launch.py:25:71: E231 missing whitespace after ','
[6.790s] 3: 
[6.791s] 3: ./launch/launch_sim.launch.py:31:62: E231 missing whitespace after ','
[6.791s] 3: 
[6.791s] 3: ./launch/launch_sim.launch.py:31:71: E231 missing whitespace after ','
[6.791s] 3: 
[6.792s] 3: ./launch/launch_sim.launch.py:35:78: E231 missing whitespace after ','
[6.792s] 3: 
[6.793s] 3: ./launch/launch_sim.launch.py:35:87: E231 missing whitespace after ','
[6.793s] 3: 
[6.793s] 3: ./launch/launch_sim.launch.py:35:100: E501 line too long (104 > 99 characters)
[6.794s] 3: 
[6.794s] 3: ./launch/launch_sim.launch.py:37:21: Q000 Double quotes found but single quotes preferred
[6.794s] 3: 
[6.794s] 3: ./launch/launch_sim.launch.py:38:24: Q000 Double quotes found but single quotes preferred
[6.795s] 3: 
[6.795s] 3: ./launch/launch_sim.launch.py:40:40: E231 missing whitespace after ','
[6.795s] 3: 
[6.796s] 3: ./launch/launch_sim.launch.py:44:5: E303 too many blank lines (2)
[6.796s] 3: 
[6.796s] 3: ./launch/launch_sim.launch.py:48:10: W291 trailing whitespace
[6.797s] 3: 
[6.797s] 3: ./launch/launch_sim.launch.py:49:1: W293 blank line contains whitespace
[6.797s] 3: 
[6.797s] 3: ./launch/launch_sim.launch.py:62:21: E131 continuation line unaligned for hanging indent
[6.798s] 3: 
[6.798s] 3: ./launch/launch_sim.launch.py:62:100: E501 line too long (104 > 99 characters)
[6.798s] 3: 
[6.799s] 3: ./launch/launch_sim.launch.py:65:100: E501 line too long (126 > 99 characters)
[6.799s] 3: 
[6.799s] 3: ./launch/launch_sim.launch.py:73:5: E303 too many blank lines (2)
[6.799s] 3: 
[6.800s] 3: ./launch/launch_sim.launch.py:74:17: Q000 Double quotes found but single quotes preferred
[6.802s] 3: 
[6.802s] 3: ./launch/launch_sim.launch.py:75:20: Q000 Double quotes found but single quotes preferred
[6.802s] 3: 
[6.803s] 3: ./launch/launch_sim.launch.py:76:20: Q000 Double quotes found but single quotes preferred
[6.803s] 3: 
[6.803s] 3: ./launch/launch_sim.launch.py:80:17: Q000 Double quotes found but single quotes preferred
[6.803s] 3: 
[6.804s] 3: ./launch/launch_sim.launch.py:81:20: Q000 Double quotes found but single quotes preferred
[6.804s] 3: 
[6.804s] 3: ./launch/launch_sim.launch.py:82:20: Q000 Double quotes found but single quotes preferred
[6.805s] 3: 
[6.805s] 3: ./launch/launch_sim.launch.py:86:5: E303 too many blank lines (2)
[6.805s] 3: 
[6.805s] 3: ./launch/launch_sim.launch.py:86:75: E231 missing whitespace after ','
[6.806s] 3: 
[6.806s] 3: ./launch/launch_sim.launch.py:86:84: E231 missing whitespace after ','
[6.806s] 3: 
[6.806s] 3: ./launch/launch_sim.launch.py:86:100: E501 line too long (101 > 99 characters)
[6.806s] 3: 
[6.807s] 3: ./launch/launch_sim.launch.py:88:17: Q000 Double quotes found but single quotes preferred
[6.807s] 3: 
[6.807s] 3: ./launch/launch_sim.launch.py:89:20: Q000 Double quotes found but single quotes preferred
[6.807s] 3: 
[6.807s] 3: ./launch/launch_sim.launch.py:98:17: Q000 Double quotes found but single quotes preferred
[6.808s] 3: 
[6.808s] 3: ./launch/launch_sim.launch.py:99:20: Q000 Double quotes found but single quotes preferred
[6.808s] 3: 
[6.808s] 3: ./launch/launch_sim.launch.py:100:20: Q000 Double quotes found but single quotes preferred
[6.809s] 3: 
[6.809s] 3: ./launch/launch_sim.launch.py:105:5: E303 too many blank lines (3)
[6.809s] 3: 
[6.809s] 3: ./launch/launch_sim.launch.py:106:6: W291 trailing whitespace
[6.810s] 3: 
[6.810s] 3: ./launch/launch_sim.launch.py:123:5: E303 too many blank lines (3)
[6.810s] 3: 
[6.810s] 3: ./launch/online_async_launch.py:8:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'from launch_ros.actions import Node'
[6.810s] 3: 
[6.811s] 3: ./launch/online_async_launch.py:15:68: Q000 Double quotes found but single quotes preferred
[6.811s] 3: 
[6.811s] 3: ./launch/rplidar.launch.py:1:1: F401 'os' imported but unused
[6.811s] 3: 
[6.812s] 3: ./launch/rplidar.launch.py:2:1: I201 Missing newline between import groups. 'from launch import LaunchDescription' is identified as Third Party and 'import os' is identified as Stdlib.
[6.812s] 3: from launch import LaunchDescription
[6.812s] 3: ^
[6.813s] 3: def generate_launch_description():
[6.813s] 3: ^
[6.813s] 3:                 'serial_port': '/dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.3:1.0-port0',
[6.813s] 3:                                                                                                    ^
[6.814s] 3: from launch.substitutions import LaunchConfiguration, Command
[6.815s] 3: ^
[6.815s] 3: from launch.actions import DeclareLaunchArgument
[6.817s] 3: ^
[6.818s] 3: import xacro
[6.818s] 3: ^
[6.818s] 3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')
[6.818s] 3:                                       ^
[6.819s] 3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')
[6.819s] 3:                                                     ^
[6.819s] 3:     robot_description_config = Command(['xacro ', xacro_file, ' use_ros2_control:=', use_ros2_control, ' sim_mode:=', use_sim_time])
[6.820s] 3:                                                                                                    ^
[6.820s] 3:     
[6.820s] 3: ^
[6.821s] 3:     # Launch!
[6.821s] 3:     ^
[6.822s] 3: import xacro
[6.822s] 3: ^
[6.822s] 3: from ament_index_python.packages import get_package_share_directory
[6.822s] 3: ^
[6.823s] 3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument
[6.823s] 3: ^
[6.823s] 3: from launch.conditions import IfCondition, UnlessCondition
[6.823s] 3: ^
[6.824s] 3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled
[6.824s] 3:     ^
[6.824s] 3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled
[6.824s] 3:                                                                                                    ^
[6.825s] 3:     package_name='articubot_one' #<--- CHANGE ME
[6.825s] 3:                 ^
[6.825s] 3:     package_name='articubot_one' #<--- CHANGE ME
[6.825s] 3:                                 ^
[6.826s] 3:     package_name='articubot_one' #<--- CHANGE ME
[6.826s] 3:                                  ^
[6.826s] 3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'
[6.827s] 3:                                                              ^
[6.827s] 3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'
[6.827s] 3:                                                                       ^
[6.828s] 3:         )    
[6.828s] 3:          ^
[6.828s] 3:     
[6.828s] 3: ^
[6.829s] 3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()
[6.829s] 3:                     ^
[6.829s] 3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()
[6.830s] 3:                                                                                                    ^
[6.834s] 3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.
[6.834s] 3:                                                                                                    ^
[6.834s] 3:     '''
[6.834s] 3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')
[6.835s] 3:     ros_gz_bridge = Node(
[6.835s] 3:         package="ros_gz_bridge",
[6.835s] 3:         executable="parameter_bridge",
[6.835s] 3:         arguments=[
[6.835s] 3:             '--ros-args',
[6.836s] 3:             '-p',
[6.836s] 3:             f'config_file:={bridge_params}',
[6.836s] 3:         ]
[6.836s] 3:     )
[6.836s] 3:     '''
[6.837s] 3:     ^
[6.837s] 3:     '''
[6.837s] 3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')
[6.837s] 3:     ros_gz_bridge = Node(
[6.837s] 3:         package="ros_gz_bridge",
[6.837s] 3:         executable="parameter_bridge",
[6.838s] 3:         arguments=[
[6.838s] 3:             '--ros-args',
[6.838s] 3:             '-p',
[6.839s] 3:             f'config_file:={bridge_params}',
[6.839s] 3:         ]
[6.839s] 3:     )
[6.839s] 3:     '''
[6.840s] 3:     ^
[6.840s] 3:     '''
[6.840s] 3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')
[6.840s] 3:     ros_gz_bridge = Node(
[6.840s] 3:         package="ros_gz_bridge",
[6.841s] 3:         executable="parameter_bridge",
[6.841s] 3:         arguments=[
[6.841s] 3:             '--ros-args',
[6.841s] 3:             '-p',
[6.841s] 3:             f'config_file:={bridge_params}',
[6.841s] 3:         ]
[6.842s] 3:     )
[6.842s] 3:     '''
[6.842s] 3:        
[6.842s] 3:                                                                                            ^
[6.843s] 3:     package='ros_gz_bridge',
[6.843s] 3:     ^
[6.843s] 3:     executable='parameter_bridge',
[6.843s] 3:     ^
[6.843s] 3:     arguments=[
[6.844s] 3:     ^
[6.844s] 3:           '/odom@nav_msgs/msg/Odometry@gz.msgs.Odometry',
[6.844s] 3:           ^
[6.844s] 3:          '/scan@sensor_msgs/msg/LaserScan@gz.msgs.LaserScan',
[6.844s] 3:          ^
[6.845s] 3:     output='screen'
[6.845s] 3:     ^
[6.845s] 3: )
[6.845s] 3: ^
[6.845s] 3:         package="ros_gz_image",
[6.846s] 3:                 ^
[6.846s] 3:         executable="image_bridge",
[6.846s] 3:                    ^
[6.846s] 3:         arguments=["/camera/image_raw"]
[6.847s] 3:                    ^
[6.847s] 3:     #Adding rviz plugin
[6.847s] 3:     ^
[6.847s] 3:     share_dir=get_package_share_directory('articubot_one')
[6.848s] 3:              ^
[6.848s] 3:     
[6.848s] 3: ^
[6.848s] 3:         
[6.848s] 3: ^
[6.848s] 3:         
[6.849s] 3: ^
[6.849s] 3:         
[6.849s] 3: ^
[6.849s] 3: import time 
[6.849s] 3: ^
[6.849s] 3: import time 
[6.850s] 3: ^
[6.850s] 3: import time 
[6.850s] 3:            ^
[6.850s] 3: from rclpy.executors import SingleThreadedExecutor
[6.850s] 3: ^
[6.851s] 3: from sensor_msgs.msg import LaserScan
[6.851s] 3: ^
[6.851s] 3: from geometry_msgs.msg import Twist 
[6.851s] 3: ^
[6.851s] 3: from geometry_msgs.msg import Twist 
[6.852s] 3: ^
[6.852s] 3: from geometry_msgs.msg import Twist 
[6.852s] 3:                                    ^
[6.852s] 3: from articubot_one.obstacle_avoidance import Obstacle 
[6.852s] 3: ^
[6.853s] 3: from articubot_one.obstacle_avoidance import Obstacle 
[6.853s] 3:                                                      ^
[6.853s] 3: @pytest.fixture(scope='module')
[6.853s] 3: ^
[6.853s] 3: @pytest.fixture
[6.854s] 3: ^
[6.854s] 3:              executor.spin_once(0.1) # Spin briefly to process events
[6.854s] 3:              ^
[6.854s] 3:              executor.spin_once(0.1) # Spin briefly to process events
[6.854s] 3:              ^
[6.855s] 3:              executor.spin_once(0.1) # Spin briefly to process events
[6.855s] 3:                                     ^
[6.855s] 3:         yield node, executor # Yield the node and executor
[6.855s] 3:                             ^
[6.856s] 3:              executor.shutdown()
[6.856s] 3:              ^
[6.856s] 3:              executor.shutdown()
[6.856s] 3:              ^
[6.857s] 3:     assert node.get_name() == "Laser_Obstacle_Avoidance"
[6.857s] 3:                               ^
[6.857s] 3:     assert node.laser_sub.topic_name == '/scan' # Often includes the leading slash in ROS 2
[6.857s] 3:                                                ^
[6.857s] 3:     assert node.cmd_vel_pub.topic_name == '/cmd_vel' # Often includes the leading slash
[6.858s] 3:                                                     ^
[6.858s] 3:         assert isinstance(threshold, float), f"expect the threshold to be a float"
[6.858s] 3:                                              ^
[6.858s] 3:         assert isinstance(threshold, float), f"expect the threshold to be a float"
[6.858s] 3:                                              ^
[6.859s] 3:         assert isinstance(scan_topic, str), f"expect the scan topic to be a string"
[6.859s] 3:                                             ^
[6.859s] 3:         assert isinstance(scan_topic, str), f"expect the scan topic to be a string"
[6.859s] 3:                                             ^
[6.859s] 3:         assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"
[6.859s] 3:                                            ^
[6.860s] 3:         assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"
[6.860s] 3:                                            ^
[6.860s] 3:         assert isinstance(front_sector_angle, float), f'expect the angle of sector to be a float'
[6.860s] 3:                                                       ^
[6.861s] 3:         assert scan_topic == "/scan"
[6.861s] 3:                              ^
[6.861s] 3:         assert cmd_topic == "/cmd_vel"
[6.861s] 3:                             ^
[6.861s] 3:         pytest.fail(f"Parameter not declared: {e}")
[6.862s] 3:                     ^
[6.862s] 3:         pytest.fail(f"Error getting parameter: {e}")
[6.862s] 3:                     ^
[6.862s] 3: '''
[6.862s] 3: def test_node_creation():
[6.863s] 3:     rclpy.init
[6.863s] 3:     try :
[6.863s] 3:         node=Obstacle()
[6.863s] 3:         # verify that the node has the expected name
[6.864s] 3:         assert node.get_name()=="Laser_Obstacle_Avoidance"
[6.864s] 3:         # verify that the node has the subscribed to the correct topic by name
[6.864s] 3:         assert hasattr(node,'laser_sub')
[6.864s] 3:         assert node.laser_sub.topic_name == 'scan'
[6.864s] 3:         # verify that the node is publishing to the correct topic by name 
[6.865s] 3:         assert hasattr(node,'cmd_vel_pub')
[6.865s] 3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'
[6.865s] 3:     finally :
[6.865s] 3:         rclpy.shutdown
[6.865s] 3: def test_parameter_node():
[6.866s] 3:     rclpy.init
[6.866s] 3:     try :
[6.866s] 3:         pass
[6.866s] 3:     finally :
[6.866s] 3:         rclpy.shutdown
[6.867s] 3: def test_obstacle():
[6.867s] 3:     rclpy.init
[6.867s] 3:     try :
[6.867s] 3:         node=Obstacle()
[6.867s] 3:         #get values of parameters
[6.868s] 3:         threshold=node.get_parameter('threshold_distance').value
[6.868s] 3:         scan_topic=node.get_parameter("laser_scan_topic").value
[6.868s] 3:         cmd_topic=node.get_parameter("cmd_vel_topic").value
[6.868s] 3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value
[6.868s] 3:         # assert the values are correct as expected 
[6.869s] 3:         # 1- check if the parameters are of expected classes 
[6.869s] 3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"
[6.869s] 3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"
[6.869s] 3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"
[6.869s] 3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'
[6.870s] 3:         # 2- check if the values of the parameters are correct 
[6.870s] 3:         assert threshold == 0.5
[6.870s] 3:         assert scan_topic== "scan"
[6.870s] 3:         assert cmd_topic == "cmd_vel"
[6.870s] 3:         assert front_sector_angle == 60.0 
[6.870s] 3:     finally :
[6.871s] 3:         rclpy.shutdown
[6.871s] 3: 
[6.871s] 3: 
[6.871s] 3: if __name__=='__main__' :
[6.871s] 3:     pytest.main(['-v'])
[6.872s] 3: 
[6.872s] 3: '''    ^
[6.872s] 3: '''
[6.873s] 3: def test_node_creation():
[6.873s] 3:     rclpy.init
[6.873s] 3:     try :
[6.873s] 3:         node=Obstacle()
[6.873s] 3:         # verify that the node has the expected name
[6.874s] 3:         assert node.get_name()=="Laser_Obstacle_Avoidance"
[6.874s] 3:         # verify that the node has the subscribed to the correct topic by name
[6.874s] 3:         assert hasattr(node,'laser_sub')
[6.874s] 3:         assert node.laser_sub.topic_name == 'scan'
[6.874s] 3:         # verify that the node is publishing to the correct topic by name 
[6.874s] 3:         assert hasattr(node,'cmd_vel_pub')
[6.875s] 3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'
[6.875s] 3:     finally :
[6.875s] 3:         rclpy.shutdown
[6.875s] 3: def test_parameter_node():
[6.876s] 3:     rclpy.init
[6.876s] 3:     try :
[6.876s] 3:         pass
[6.876s] 3:     finally :
[6.876s] 3:         rclpy.shutdown
[6.876s] 3: def test_obstacle():
[6.877s] 3:     rclpy.init
[6.877s] 3:     try :
[6.877s] 3:         node=Obstacle()
[6.877s] 3:         #get values of parameters
[6.877s] 3:         threshold=node.get_parameter('threshold_distance').value
[6.878s] 3:         scan_topic=node.get_parameter("laser_scan_topic").value
[6.878s] 3:         cmd_topic=node.get_parameter("cmd_vel_topic").value
[6.878s] 3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value
[6.878s] 3:         # assert the values are correct as expected 
[6.878s] 3:         # 1- check if the parameters are of expected classes 
[6.879s] 3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"
[6.879s] 3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"
[6.879s] 3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"
[6.879s] 3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'
[6.879s] 3:         # 2- check if the values of the parameters are correct 
[6.879s] 3:         assert threshold == 0.5
[6.880s] 3:         assert scan_topic== "scan"
[6.880s] 3:         assert cmd_topic == "cmd_vel"
[6.880s] 3:         assert front_sector_angle == 60.0 
[6.880s] 3:     finally :
[6.881s] 3:         rclpy.shutdown
[6.881s] 3: 
[6.881s] 3: 
[6.881s] 3: if __name__=='__main__' :
[6.881s] 3:     pytest.main(['-v'])
[6.882s] 3: 
[6.882s] 3: '''    ^
[6.882s] 3: '''
[6.882s] 3: def test_node_creation():
[6.882s] 3:     rclpy.init
[6.883s] 3:     try :
[6.883s] 3:         node=Obstacle()
[6.883s] 3:         # verify that the node has the expected name
[6.883s] 3:         assert node.get_name()=="Laser_Obstacle_Avoidance"
[6.883s] 3:         # verify that the node has the subscribed to the correct topic by name
[6.883s] 3:         assert hasattr(node,'laser_sub')
[6.884s] 3:         assert node.laser_sub.topic_name == 'scan'
[6.884s] 3:         # verify that the node is publishing to the correct topic by name 
[6.884s] 3:         assert hasattr(node,'cmd_vel_pub')
[6.884s] 3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'
[6.884s] 3:     finally :
[6.885s] 3:         rclpy.shutdown
[6.885s] 3: def test_parameter_node():
[6.885s] 3:     rclpy.init
[6.885s] 3:     try :
[6.886s] 3:         pass
[6.886s] 3:     finally :
[6.886s] 3:         rclpy.shutdown
[6.886s] 3: def test_obstacle():
[6.886s] 3:     rclpy.init
[6.886s] 3:     try :
[6.887s] 3:         node=Obstacle()
[6.887s] 3:         #get values of parameters
[6.887s] 3:         threshold=node.get_parameter('threshold_distance').value
[6.887s] 3:         scan_topic=node.get_parameter("laser_scan_topic").value
[6.887s] 3:         cmd_topic=node.get_parameter("cmd_vel_topic").value
[6.888s] 3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value
[6.888s] 3:         # assert the values are correct as expected 
[6.888s] 3:         # 1- check if the parameters are of expected classes 
[6.888s] 3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"
[6.888s] 3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"
[6.888s] 3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"
[6.889s] 3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'
[6.889s] 3:         # 2- check if the values of the parameters are correct 
[6.889s] 3:         assert threshold == 0.5
[6.890s] 3:         assert scan_topic== "scan"
[6.890s] 3:         assert cmd_topic == "cmd_vel"
[6.890s] 3:         assert front_sector_angle == 60.0 
[6.890s] 3:     finally :
[6.890s] 3:         rclpy.shutdown
[6.891s] 3: 
[6.891s] 3: 
[6.891s] 3: if __name__=='__main__' :
[6.891s] 3:     pytest.main(['-v'])
[6.891s] 3: 
[6.892s] 3: '''       
[6.892s] 3:                          
[6.892s] 3:               
[6.892s] 3:          
[6.892s] 3:                   ^
[6.893s] 3: '''
[6.893s] 3: def test_node_creation():
[6.893s] 3:     rclpy.init
[6.893s] 3:     try :
[6.893s] 3:         node=Obstacle()
[6.894s] 3:         # verify that the node has the expected name
[6.894s] 3:         assert node.get_name()=="Laser_Obstacle_Avoidance"
[6.894s] 3:         # verify that the node has the subscribed to the correct topic by name
[6.894s] 3:         assert hasattr(node,'laser_sub')
[6.894s] 3:         assert node.laser_sub.topic_name == 'scan'
[6.895s] 3:         # verify that the node is publishing to the correct topic by name 
[6.895s] 3:         assert hasattr(node,'cmd_vel_pub')
[6.895s] 3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'
[6.895s] 3:     finally :
[6.895s] 3:         rclpy.shutdown
[6.895s] 3: def test_parameter_node():
[6.896s] 3:     rclpy.init
[6.896s] 3:     try :
[6.896s] 3:         pass
[6.896s] 3:     finally :
[6.896s] 3:         rclpy.shutdown
[6.896s] 3: def test_obstacle():
[6.897s] 3:     rclpy.init
[6.897s] 3:     try :
[6.897s] 3:         node=Obstacle()
[6.897s] 3:         #get values of parameters
[6.898s] 3:         threshold=node.get_parameter('threshold_distance').value
[6.898s] 3:         scan_topic=node.get_parameter("laser_scan_topic").value
[6.898s] 3:         cmd_topic=node.get_parameter("cmd_vel_topic").value
[6.898s] 3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value
[6.899s] 3:         # assert the values are correct as expected 
[6.899s] 3:         # 1- check if the parameters are of expected classes 
[6.899s] 3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"
[6.899s] 3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"
[6.899s] 3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"
[6.900s] 3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'
[6.900s] 3:         # 2- check if the values of the parameters are correct 
[6.900s] 3:         assert threshold == 0.5
[6.900s] 3:         assert scan_topic== "scan"
[6.900s] 3:         assert cmd_topic == "cmd_vel"
[6.900s] 3:         assert front_sector_angle == 60.0 
[6.901s] 3:     finally :
[6.901s] 3:         rclpy.shutdown
[6.901s] 3: 
[6.901s] 3: 
[6.901s] 3: if __name__=='__main__' :
[6.902s] 3:     pytest.main(['-v'])
[6.902s] 3: 
[6.902s] 3: '''       
[6.902s] 3:                          
[6.902s] 3:               
[6.903s] 3:       ^
[6.903s] 3: '''
[6.903s] 3: def test_node_creation():
[6.903s] 3:     rclpy.init
[6.903s] 3:     try :
[6.904s] 3:         node=Obstacle()
[6.904s] 3:         # verify that the node has the expected name
[6.904s] 3:         assert node.get_name()=="Laser_Obstacle_Avoidance"
[6.904s] 3:         # verify that the node has the subscribed to the correct topic by name
[6.904s] 3:         assert hasattr(node,'laser_sub')
[6.904s] 3:         assert node.laser_sub.topic_name == 'scan'
[6.905s] 3:         # verify that the node is publishing to the correct topic by name 
[6.905s] 3:         assert hasattr(node,'cmd_vel_pub')
[6.905s] 3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'
[6.905s] 3:     finally :
[6.906s] 3:         rclpy.shutdown
[6.906s] 3: def test_parameter_node():
[6.906s] 3:     rclpy.init
[6.907s] 3:     try :
[6.907s] 3:         pass
[6.907s] 3:     finally :
[6.907s] 3:         rclpy.shutdown
[6.907s] 3: def test_obstacle():
[6.908s] 3:     rclpy.init
[6.909s] 3:     try :
[6.909s] 3:         node=Obstacle()
[6.909s] 3:         #get values of parameters
[6.910s] 3:         threshold=node.get_parameter('threshold_distance').value
[6.911s] 3:         scan_topic=node.get_parameter("laser_scan_topic").value
[6.911s] 3:         cmd_topic=node.get_parameter("cmd_vel_topic").value
[6.914s] 3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value
[6.914s] 3:         # assert the values are correct as expected 
[6.914s] 3:         # 1- check if the parameters are of expected classes 
[6.914s] 3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"
[6.914s] 3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"
[6.915s] 3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"
[6.915s] 3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'
[6.915s] 3:         # 2- check if the values of the parameters are correct 
[6.915s] 3:         assert threshold == 0.5
[6.916s] 3:         assert scan_topic== "scan"
[6.916s] 3:         assert cmd_topic == "cmd_vel"
[6.916s] 3:         assert front_sector_angle == 60.0 
[6.916s] 3:     finally :
[6.916s] 3:         rclpy.shutdown
[6.917s] 3: 
[6.917s] 3: 
[6.917s] 3: if __name__=='__main__' :
[6.917s] 3:     pytest.main(['-v'])
[6.917s] 3: 
[6.918s] 3: '''       
[6.918s] 3:                          
[6.918s] 3:               
[6.918s] 3:          
[6.918s] 3:      ^
[6.919s] 3: '''
[6.919s] 3: def test_node_creation():
[6.919s] 3:     rclpy.init
[6.919s] 3:     try :
[6.920s] 3:         node=Obstacle()
[6.920s] 3:         # verify that the node has the expected name
[6.920s] 3:         assert node.get_name()=="Laser_Obstacle_Avoidance"
[6.920s] 3:         # verify that the node has the subscribed to the correct topic by name
[6.920s] 3:         assert hasattr(node,'laser_sub')
[6.921s] 3:         assert node.laser_sub.topic_name == 'scan'
[6.921s] 3:         # verify that the node is publishing to the correct topic by name 
[6.921s] 3:         assert hasattr(node,'cmd_vel_pub')
[6.921s] 3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'
[6.921s] 3:     finally :
[6.922s] 3:         rclpy.shutdown
[6.922s] 3: def test_parameter_node():
[6.922s] 3:     rclpy.init
[6.923s] 3:     try :
[6.923s] 3:         pass
[6.923s] 3:     finally :
[6.923s] 3:         rclpy.shutdown
[6.924s] 3: def test_obstacle():
[6.924s] 3:     rclpy.init
[6.924s] 3:     try :
[6.924s] 3:         node=Obstacle()
[6.924s] 3:         #get values of parameters
[6.925s] 3:         threshold=node.get_parameter('threshold_distance').value
[6.925s] 3:         scan_topic=node.get_parameter("laser_scan_topic").value
[6.925s] 3:         cmd_topic=node.get_parameter("cmd_vel_topic").value
[6.925s] 3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value
[6.925s] 3:         # assert the values are correct as expected 
[6.926s] 3:         # 1- check if the parameters are of expected classes 
[6.926s] 3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"
[6.926s] 3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"
[6.926s] 3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"
[6.926s] 3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'
[6.927s] 3:         # 2- check if the values of the parameters are correct 
[6.927s] 3:         assert threshold == 0.5
[6.927s] 3:         assert scan_topic== "scan"
[6.927s] 3:         assert cmd_topic == "cmd_vel"
[6.927s] 3:         assert front_sector_angle == 60.0 
[6.928s] 3:     finally :
[6.928s] 3:         rclpy.shutdown
[6.928s] 3: 
[6.928s] 3: 
[6.928s] 3: if __name__=='__main__' :
[6.929s] 3:     pytest.main(['-v'])
[6.929s] 3: 
[6.929s] 3: '''       
[6.929s] 3:                          
[6.929s] 3:               
[6.930s] 3:          
[6.930s] 3:        ^
[6.930s] 3: '''
[6.931s] 3: def test_node_creation():
[6.931s] 3:     rclpy.init
[6.931s] 3:     try :
[6.931s] 3:         node=Obstacle()
[6.931s] 3:         # verify that the node has the expected name
[6.932s] 3:         assert node.get_name()=="Laser_Obstacle_Avoidance"
[6.932s] 3:         # verify that the node has the subscribed to the correct topic by name
[6.932s] 3:         assert hasattr(node,'laser_sub')
[6.932s] 3:         assert node.laser_sub.topic_name == 'scan'
[6.932s] 3:         # verify that the node is publishing to the correct topic by name 
[6.933s] 3:         assert hasattr(node,'cmd_vel_pub')
[6.933s] 3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'
[6.933s] 3:     finally :
[6.933s] 3:         rclpy.shutdown
[6.933s] 3: def test_parameter_node():
[6.934s] 3:     rclpy.init
[6.934s] 3:     try :
[6.934s] 3:         pass
[6.934s] 3:     finally :
[6.934s] 3:         rclpy.shutdown
[6.935s] 3: def test_obstacle():
[6.935s] 3:     rclpy.init
[6.935s] 3:     try :
[6.935s] 3:         node=Obstacle()
[6.935s] 3:         #get values of parameters
[6.936s] 3:         threshold=node.get_parameter('threshold_distance').value
[6.936s] 3:         scan_topic=node.get_parameter("laser_scan_topic").value
[6.936s] 3:         cmd_topic=node.get_parameter("cmd_vel_topic").value
[6.936s] 3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value
[6.936s] 3:         # assert the values are correct as expected 
[6.936s] 3:         # 1- check if the parameters are of expected classes 
[6.937s] 3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"
[6.937s] 3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"
[6.937s] 3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"
[6.937s] 3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'
[6.937s] 3:         # 2- check if the values of the parameters are correct 
[6.937s] 3:         assert threshold == 0.5
[6.938s] 3:         assert scan_topic== "scan"
[6.938s] 3:         assert cmd_topic == "cmd_vel"
[6.938s] 3:         assert front_sector_angle == 60.0 
[6.938s] 3:     finally :
[6.938s] 3:         rclpy.shutdown
[6.938s] 3: 
[6.939s] 3: 
[6.939s] 3: if __name__=='__main__' :
[6.939s] 3:     pytest.main(['-v'])
[6.939s] 3: 
[6.939s] 3: '''       
[6.939s] 3:                          
[6.940s] 3:            ^
[6.940s] 3: '''
[6.940s] 3: def test_node_creation():
[6.940s] 3:     rclpy.init
[6.940s] 3:     try :
[6.941s] 3:         node=Obstacle()
[6.941s] 3:         # verify that the node has the expected name
[6.941s] 3:         assert node.get_name()=="Laser_Obstacle_Avoidance"
[6.941s] 3:         # verify that the node has the subscribed to the correct topic by name
[6.941s] 3:         assert hasattr(node,'laser_sub')
[6.941s] 3:         assert node.laser_sub.topic_name == 'scan'
[6.942s] 3:         # verify that the node is publishing to the correct topic by name 
[6.942s] 3:         assert hasattr(node,'cmd_vel_pub')
[6.942s] 3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'
[6.942s] 3:     finally :
[6.942s] 3:         rclpy.shutdown
[6.942s] 3: def test_parameter_node():
[6.943s] 3:     rclpy.init
[6.943s] 3:     try :
[6.943s] 3:         pass
[6.943s] 3:     finally :
[6.943s] 3:         rclpy.shutdown
[6.943s] 3: def test_obstacle():
[6.944s] 3:     rclpy.init
[6.944s] 3:     try :
[6.944s] 3:         node=Obstacle()
[6.944s] 3:         #get values of parameters
[6.944s] 3:         threshold=node.get_parameter('threshold_distance').value
[6.944s] 3:         scan_topic=node.get_parameter("laser_scan_topic").value
[6.945s] 3:         cmd_topic=node.get_parameter("cmd_vel_topic").value
[6.945s] 3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value
[6.945s] 3:         # assert the values are correct as expected 
[6.945s] 3:         # 1- check if the parameters are of expected classes 
[6.945s] 3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"
[6.946s] 3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"
[6.946s] 3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"
[6.946s] 3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'
[6.946s] 3:         # 2- check if the values of the parameters are correct 
[6.946s] 3:         assert threshold == 0.5
[6.947s] 3:         assert scan_topic== "scan"
[6.947s] 3:         assert cmd_topic == "cmd_vel"
[6.947s] 3:         assert front_sector_angle == 60.0 
[6.947s] 3:     finally :
[6.948s] 3:         rclpy.shutdown
[6.948s] 3: 
[6.948s] 3: 
[6.948s] 3: if __name__=='__main__' :
[6.948s] 3:     pytest.main(['-v'])
[6.949s] 3: 
[6.949s] 3: '''       ^
[6.949s] 3: '''
[6.949s] 3: def test_node_creation():
[6.949s] 3:     rclpy.init
[6.949s] 3:     try :
[6.950s] 3:         node=Obstacle()
[6.950s] 3:         # verify that the node has the expected name
[6.950s] 3:         assert node.get_name()=="Laser_Obstacle_Avoidance"
[6.950s] 3:         # verify that the node has the subscribed to the correct topic by name
[6.950s] 3:         assert hasattr(node,'laser_sub')
[6.951s] 3:         assert node.laser_sub.topic_name == 'scan'
[6.951s] 3:         # verify that the node is publishing to the correct topic by name 
[6.951s] 3:         assert hasattr(node,'cmd_vel_pub')
[6.951s] 3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'
[6.951s] 3:     finally :
[6.952s] 3:         rclpy.shutdown
[6.952s] 3: def test_parameter_node():
[6.952s] 3:     rclpy.init
[6.952s] 3:     try :
[6.952s] 3:         pass
[6.953s] 3:     finally :
[6.953s] 3:         rclpy.shutdown
[6.953s] 3: def test_obstacle():
[6.953s] 3:     rclpy.init
[6.953s] 3:     try :
[6.954s] 3:         node=Obstacle()
[6.954s] 3:         #get values of parameters
[6.954s] 3:         threshold=node.get_parameter('threshold_distance').value
[6.954s] 3:         scan_topic=node.get_parameter("laser_scan_topic").value
[6.954s] 3:         cmd_topic=node.get_parameter("cmd_vel_topic").value
[6.954s] 3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value
[6.955s] 3:         # assert the values are correct as expected 
[6.955s] 3:         # 1- check if the parameters are of expected classes 
[6.955s] 3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"
[6.955s] 3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"
[6.955s] 3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"
[6.955s] 3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'
[6.956s] 3:         # 2- check if the values of the parameters are correct 
[6.956s] 3:         assert threshold == 0.5
[6.956s] 3:         assert scan_topic== "scan"
[6.956s] 3:         assert cmd_topic == "cmd_vel"
[6.956s] 3:         assert front_sector_angle == 60.0 
[6.956s] 3:     finally :
[6.957s] 3:         rclpy.shutdown
[6.957s] 3: 
[6.957s] 3: 
[6.957s] 3: if __name__=='__main__' :
[6.957s] 3:     pytest.main(['-v'])
[6.957s] 3: 
[6.958s] 3: '''       
[6.958s] 3:    ^
[6.958s] 3: 9     E111 indentation is not a multiple of 4
[6.958s] 3: 1     E114 indentation is not a multiple of 4 (comment)
[6.958s] 3: 4     E117 over-indented (comment)
[6.958s] 3: 6     E122 continuation line missing indentation or outdented
[6.959s] 3: 3     E128 continuation line under-indented for visual indent
[6.959s] 3: 5     E131 continuation line unaligned for hanging indent
[6.959s] 3: 3     E203 whitespace before ':'
[6.959s] 3: 9     E225 missing whitespace around operator
[6.959s] 3: 36    E231 missing whitespace after ','
[6.959s] 3: 8     E261 at least two spaces before inline comment
[6.960s] 3: 3     E262 inline comment should start with '# '
[6.960s] 3: 5     E265 block comment should start with '# '
[6.960s] 3: 1     E275 missing whitespace after keyword
[6.960s] 3: 6     E302 expected 2 blank lines, found 1
[6.960s] 3: 20    E303 too many blank lines (2)
[6.960s] 3: 1     E305 expected 2 blank lines after class or function definition, found 1
[6.961s] 3: 30    E501 line too long (110 > 99 characters)
[6.961s] 3: 5     F401 'os' imported but unused
[6.961s] 3: 5     F541 f-string is missing placeholders
[6.961s] 3: 14    I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'
[6.961s] 3: 3     I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription
[6.962s] 3: 7     I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.
[6.962s] 3: 44    Q000 Double quotes found but single quotes preferred
[6.962s] 3: 2     Q001 Single quote multiline found but double quotes preferred
[6.962s] 3: 24    W291 trailing whitespace
[6.962s] 3: 2     W292 no newline at end of file
[6.962s] 3: 14    W293 blank line contains whitespace
[6.963s] 3: 
[6.963s] 3: ./launch/rplidar.launch.py:5:1: E302 expected 2 blank lines, found 1
[6.963s] 3: 
[6.963s] 3: ./launch/rplidar.launch.py:14:100: E501 line too long (113 > 99 characters)
[6.963s] 3: 
[6.964s] 3: ./launch/rsp.launch.py:6:1: I101 Imported names are in the wrong order. Should be Command, LaunchConfiguration
[6.964s] 3: 
[6.964s] 3: ./launch/rsp.launch.py:7:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration, Command'
[6.964s] 3: 
[6.965s] 3: ./launch/rsp.launch.py:10:1: F401 'xacro' imported but unused
[6.965s] 3: 
[6.965s] 3: ./launch/rsp.launch.py:21:39: E231 missing whitespace after ','
[6.965s] 3: 
[6.965s] 3: ./launch/rsp.launch.py:21:53: E231 missing whitespace after ','
[6.966s] 3: 
[6.966s] 3: ./launch/rsp.launch.py:23:100: E501 line too long (132 > 99 characters)
[6.966s] 3: 
[6.966s] 3: ./launch/rsp.launch.py:24:1: W293 blank line contains whitespace
[6.966s] 3: 
[6.966s] 3: ./launch/rsp.launch.py:35:5: E303 too many blank lines (2)
[6.967s] 3: 
[6.967s] 3: ./launch/rviz_gazebo.launch.py:2:1: I201 Missing newline between import groups. 'import xacro' is identified as Third Party and 'import os' is identified as Stdlib.
[6.967s] 3: 
[6.967s] 3: ./launch/rviz_gazebo.launch.py:3:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'import xacro'
[6.968s] 3: 
[6.968s] 3: ./launch/rviz_gazebo.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription
[6.968s] 3: 
[6.968s] 3: ./launch/rviz_gazebo.launch.py:12:1: I100 Import statements are in the wrong order. 'from launch.conditions import IfCondition, UnlessCondition' should be before 'from launch_ros.actions import Node'
[6.968s] 3: 
[6.969s] 3: ./launch/rviz_gazebo.launch.py:18:5: E303 too many blank lines (2)
[6.969s] 3: 
[6.969s] 3: ./launch/rviz_gazebo.launch.py:18:100: E501 line too long (110 > 99 characters)
[6.969s] 3: 
[6.969s] 3: ./launch/rviz_gazebo.launch.py:21:17: E225 missing whitespace around operator
[6.970s] 3: 
[6.970s] 3: ./launch/rviz_gazebo.launch.py:21:33: E261 at least two spaces before inline comment
[6.970s] 3: 
[6.970s] 3: ./launch/rviz_gazebo.launch.py:21:34: E262 inline comment should start with '# '
[6.970s] 3: 
[6.970s] 3: ./launch/rviz_gazebo.launch.py:25:62: E231 missing whitespace after ','
[6.971s] 3: 
[6.971s] 3: ./launch/rviz_gazebo.launch.py:25:71: E231 missing whitespace after ','
[6.971s] 3: 
[6.971s] 3: ./launch/rviz_gazebo.launch.py:33:10: W291 trailing whitespace
[6.971s] 3: 
[6.972s] 3: ./launch/rviz_gazebo.launch.py:34:1: W293 blank line contains whitespace
[6.972s] 3: 
[6.972s] 3: ./launch/rviz_gazebo.launch.py:47:21: E131 continuation line unaligned for hanging indent
[6.972s] 3: 
[6.972s] 3: ./launch/rviz_gazebo.launch.py:47:100: E501 line too long (104 > 99 characters)
[6.972s] 3: 
[6.973s] 3: ./launch/rviz_gazebo.launch.py:50:100: E501 line too long (126 > 99 characters)
[6.973s] 3: 
[6.973s] 3: ./launch/rviz_gazebo.launch.py:58:5: Q001 Single quote multiline found but double quotes preferred
[6.974s] 3: 
[6.974s] 3: ./launch/rviz_gazebo.launch.py:58:5: E303 too many blank lines (2)
[6.974s] 3: 
[6.974s] 3: ./launch/rviz_gazebo.launch.py:59:100: E501 line too long (101 > 99 characters)
[6.974s] 3: 
[6.975s] 3: ./launch/rviz_gazebo.launch.py:72:5: E122 continuation line missing indentation or outdented
[6.975s] 3: 
[6.975s] 3: ./launch/rviz_gazebo.launch.py:73:5: E122 continuation line missing indentation or outdented
[6.975s] 3: 
[6.975s] 3: ./launch/rviz_gazebo.launch.py:74:5: E122 continuation line missing indentation or outdented
[6.976s] 3: 
[6.976s] 3: ./launch/rviz_gazebo.launch.py:77:11: E131 continuation line unaligned for hanging indent
[6.976s] 3: 
[6.977s] 3: ./launch/rviz_gazebo.launch.py:78:10: E131 continuation line unaligned for hanging indent
[6.977s] 3: 
[6.977s] 3: ./launch/rviz_gazebo.launch.py:81:5: E122 continuation line missing indentation or outdented
[6.978s] 3: 
[6.978s] 3: ./launch/rviz_gazebo.launch.py:82:1: E122 continuation line missing indentation or outdented
[6.978s] 3: 
[6.978s] 3: ./launch/rviz_gazebo.launch.py:85:17: Q000 Double quotes found but single quotes preferred
[6.980s] 3: 
[6.980s] 3: ./launch/rviz_gazebo.launch.py:86:20: Q000 Double quotes found but single quotes preferred
[6.980s] 3: 
[6.980s] 3: ./launch/rviz_gazebo.launch.py:87:20: Q000 Double quotes found but single quotes preferred
[6.981s] 3: 
[6.981s] 3: ./launch/rviz_gazebo.launch.py:89:5: E265 block comment should start with '# '
[6.981s] 3: 
[6.982s] 3: ./launch/rviz_gazebo.launch.py:90:14: E225 missing whitespace around operator
[6.982s] 3: 
[6.982s] 3: ./launch/rviz_gazebo.launch.py:96:1: W293 blank line contains whitespace
[6.982s] 3: 
[6.982s] 3: ./launch/rviz_gazebo.launch.py:136:1: W293 blank line contains whitespace
[6.983s] 3: 
[6.983s] 3: ./launch/rviz_gazebo.launch.py:140:1: W293 blank line contains whitespace
[6.983s] 3: 
[6.983s] 3: ./launch/rviz_gazebo.launch.py:144:1: W293 blank line contains whitespace
[6.984s] 3: 
[6.984s] 3: ./test/pytest/test_laserObstacle.py:5:1: I100 Import statements are in the wrong order. 'import time' should be before 'import rclpy' and in a different group.
[6.984s] 3: 
[6.984s] 3: ./test/pytest/test_laserObstacle.py:5:1: I201 Missing newline between import groups. 'import time' is identified as Stdlib and 'import rclpy' is identified as Third Party.
[6.984s] 3: 
[6.985s] 3: ./test/pytest/test_laserObstacle.py:5:12: W291 trailing whitespace
[6.985s] 3: 
[6.985s] 3: ./test/pytest/test_laserObstacle.py:6:1: I201 Missing newline between import groups. 'from rclpy.executors import SingleThreadedExecutor' is identified as Third Party and 'import time' is identified as Stdlib.
[6.985s] 3: 
[6.985s] 3: ./test/pytest/test_laserObstacle.py:7:1: F401 'sensor_msgs.msg.LaserScan' imported but unused
[6.986s] 3: 
[6.986s] 3: ./test/pytest/test_laserObstacle.py:8:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'
[6.986s] 3: 
[6.986s] 3: ./test/pytest/test_laserObstacle.py:8:1: F401 'geometry_msgs.msg.Twist' imported but unused
[6.986s] 3: 
[6.987s] 3: ./test/pytest/test_laserObstacle.py:8:36: W291 trailing whitespace
[6.987s] 3: 
[6.987s] 3: ./test/pytest/test_laserObstacle.py:10:1: I100 Import statements are in the wrong order. 'from articubot_one.obstacle_avoidance import Obstacle' should be before 'from geometry_msgs.msg import Twist'
[6.987s] 3: 
[6.987s] 3: ./test/pytest/test_laserObstacle.py:10:54: W291 trailing whitespace
[6.988s] 3: 
[6.988s] 3: ./test/pytest/test_laserObstacle.py:12:1: E302 expected 2 blank lines, found 1
[6.988s] 3: 
[6.988s] 3: ./test/pytest/test_laserObstacle.py:19:1: E302 expected 2 blank lines, found 1
[6.988s] 3: 
[6.988s] 3: ./test/pytest/test_laserObstacle.py:37:14: E111 indentation is not a multiple of 4
[6.989s] 3: 
[6.989s] 3: ./test/pytest/test_laserObstacle.py:37:14: E117 over-indented
[6.989s] 3: 
[6.989s] 3: ./test/pytest/test_laserObstacle.py:37:37: E261 at least two spaces before inline comment
[6.989s] 3: 
[6.990s] 3: ./test/pytest/test_laserObstacle.py:39:29: E261 at least two spaces before inline comment
[6.990s] 3: 
[6.990s] 3: ./test/pytest/test_laserObstacle.py:46:14: E111 indentation is not a multiple of 4
[6.990s] 3: 
[6.991s] 3: ./test/pytest/test_laserObstacle.py:46:14: E117 over-indented
[6.991s] 3: 
[6.991s] 3: ./test/pytest/test_laserObstacle.py:52:31: Q000 Double quotes found but single quotes preferred
[6.991s] 3: 
[6.991s] 3: ./test/pytest/test_laserObstacle.py:55:48: E261 at least two spaces before inline comment
[6.992s] 3: 
[6.992s] 3: ./test/pytest/test_laserObstacle.py:57:53: E261 at least two spaces before inline comment
[6.992s] 3: 
[6.992s] 3: ./test/pytest/test_laserObstacle.py:76:46: Q000 Double quotes found but single quotes preferred
[6.992s] 3: 
[6.992s] 3: ./test/pytest/test_laserObstacle.py:76:46: F541 f-string is missing placeholders
[6.993s] 3: 
[6.993s] 3: ./test/pytest/test_laserObstacle.py:77:45: Q000 Double quotes found but single quotes preferred
[6.993s] 3: 
[6.993s] 3: ./test/pytest/test_laserObstacle.py:77:45: F541 f-string is missing placeholders
[6.993s] 3: 
[6.994s] 3: ./test/pytest/test_laserObstacle.py:78:44: Q000 Double quotes found but single quotes preferred
[6.994s] 3: 
[6.994s] 3: ./test/pytest/test_laserObstacle.py:78:44: F541 f-string is missing placeholders
[6.994s] 3: 
[6.995s] 3: ./test/pytest/test_laserObstacle.py:79:55: F541 f-string is missing placeholders
[6.995s] 3: 
[6.995s] 3: ./test/pytest/test_laserObstacle.py:84:30: Q000 Double quotes found but single quotes preferred
[6.995s] 3: 
[6.995s] 3: ./test/pytest/test_laserObstacle.py:85:29: Q000 Double quotes found but single quotes preferred
[6.995s] 3: 
[6.996s] 3: ./test/pytest/test_laserObstacle.py:89:21: Q000 Double quotes found but single quotes preferred
[6.996s] 3: 
[6.996s] 3: ./test/pytest/test_laserObstacle.py:91:21: Q000 Double quotes found but single quotes preferred
[6.996s] 3: 
[6.996s] 3: ./test/pytest/test_laserObstacle.py:96:1: Q001 Single quote multiline found but double quotes preferred
[6.997s] 3: 
[6.997s] 3: ./test/pytest/test_laserObstacle.py:96:1: E303 too many blank lines (4)
[6.997s] 3: 
[6.997s] 3: ./test/pytest/test_laserObstacle.py:106:74: W291 trailing whitespace
[6.997s] 3: 
[6.997s] 3: ./test/pytest/test_laserObstacle.py:126:52: W291 trailing whitespace
[6.998s] 3: 
[6.998s] 3: ./test/pytest/test_laserObstacle.py:127:61: W291 trailing whitespace
[6.998s] 3: 
[6.998s] 3: ./test/pytest/test_laserObstacle.py:132:63: W291 trailing whitespace
[6.999s] 3: 
[6.999s] 3: ./test/pytest/test_laserObstacle.py:136:42: W291 trailing whitespace
[6.999s] 3: 
[6.999s] 3: ./test/pytest/test_laserObstacle.py:144:4: W291 trailing whitespace
[7.000s] 3: 
[7.000s] 3: ./test/pytest/test_laserObstacle.py:144:8: W292 no newline at end of file
[7.000s] 3: 
[7.000s] 3: 
[7.000s] 3: 15 files checked
[7.000s] 3: 270 errors
[7.001s] 3: 
[7.001s] 3: 'E'-type errors: 150
[7.001s] 3: 'F'-type errors: 10
[7.001s] 3: 'I'-type errors: 24
[7.001s] 3: 'Q'-type errors: 46
[7.001s] 3: 'W'-type errors: 40
[7.002s] 3: 
[7.002s] 3: Checked files:
[7.002s] 3: 
[7.002s] 3: * ./setup.py
[7.002s] 3: * ./test/pytest/test_laserObstacle.py
[7.003s] 3: * ./articubot_one/obstacle_avoidance.py
[7.003s] 3: * ./articubot_one/__init__.py
[7.003s] 3: * ./launch/joystick.launch.py
[7.003s] 3: * ./launch/online_async_launch.py
[7.003s] 3: * ./launch/ball_tracker.launch.py
[7.004s] 3: * ./launch/localization_launch.py
[7.004s] 3: * ./launch/rviz_gazebo.launch.py
[7.004s] 3: * ./launch/navigation_launch.py
[7.004s] 3: * ./launch/rsp.launch.py
[7.004s] 3: * ./launch/launch_robot.launch.py
[7.005s] 3: * ./launch/camera.launch.py
[7.005s] 3: * ./launch/rplidar.launch.py
[7.005s] 3: * ./launch/launch_sim.launch.py
[7.006s] 3: -- run_test.py: return code 1
[7.006s] 3: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml'
[7.006s] 3/6 Test #3: flake8 ...........................***Failed    0.83 sec
[7.006s] test 4
[7.006s]     Start 4: lint_cmake
[7.007s] 
[7.007s] 4: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/jazzy/bin/ament_lint_cmake" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml"
[7.007s] 4: Working Directory: /home/jonatan/ros2_ws/src/articubot_one
[7.007s] 4: Test timeout computed to be: 60
[7.007s] 4: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':
[7.008s] 4:  - /opt/ros/jazzy/bin/ament_lint_cmake --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml
[7.106s] 4: CMakeLists.txt:40: Line ends in whitespace [whitespace/eol]
[7.111s] 4: CMakeLists.txt:55: Line ends in whitespace [whitespace/eol]
[7.111s] 4: 
[7.112s] 4: 
[7.113s] 4: 2 errors
[7.133s] 4: -- run_test.py: return code 1
[7.134s] 4: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml'
[7.154s] 4/6 Test #4: lint_cmake .......................***Failed    0.41 sec
[7.155s] test 5
[7.155s]     Start 5: pep257
[7.155s] 
[7.156s] 5: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_pep257/pep257.txt" "--command" "/opt/ros/jazzy/bin/ament_pep257" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml"
[7.158s] 5: Working Directory: /home/jonatan/ros2_ws/src/articubot_one
[7.158s] 5: Test timeout computed to be: 60
[7.265s] 5: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':
[7.267s] 5:  - /opt/ros/jazzy/bin/ament_pep257 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml
[7.537s] 5: checking ./articubot_one/__init__.py
[7.537s] 5: checking ./articubot_one/obstacle_avoidance.py
[7.537s] 5: checking ./launch/ball_tracker.launch.py
[7.537s] 5: checking ./launch/camera.launch.py
[7.538s] 5: checking ./launch/joystick.launch.py
[7.538s] 5: checking ./launch/launch_robot.launch.py
[7.538s] 5: checking ./launch/launch_sim.launch.py
[7.538s] 5: checking ./launch/localization_launch.py
[7.538s] 5: checking ./launch/navigation_launch.py
[7.539s] 5: checking ./launch/online_async_launch.py
[7.539s] 5: checking ./launch/rplidar.launch.py
[7.543s] 5: checking ./launch/rsp.launch.py
[7.544s] 5: checking ./launch/rviz_gazebo.launch.py
[7.544s] 5: checking ./setup.py
[7.544s] 5: checking ./test/pytest/test_laserObstacle.py
[7.544s] 5: No problems found
[7.571s] 5: -- run_test.py: return code 0
[7.572s] 5: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml'
[7.592s] 5/6 Test #5: pep257 ...........................   Passed    0.44 sec
[7.592s] test 6
[7.593s]     Start 6: xmllint
[7.593s] 
[7.593s] 6: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_xmllint/xmllint.txt" "--command" "/opt/ros/jazzy/bin/ament_xmllint" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml"
[7.593s] 6: Working Directory: /home/jonatan/ros2_ws/src/articubot_one
[7.593s] 6: Test timeout computed to be: 60
[7.696s] 6: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':
[7.696s] 6:  - /opt/ros/jazzy/bin/ament_xmllint --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml
[11.010s] 6: File 'package.xml' is valid
[11.010s] 6: 
[11.011s] 6: No problems found
[11.036s] 6: -- run_test.py: return code 0
[11.036s] 6: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml'
[11.060s] 6/6 Test #6: xmllint ..........................   Passed    3.46 sec
[11.061s] 
[11.061s] 50% tests passed[0;0m, [0;31m3 tests failed[0;0m out of 6
[11.061s] 
[11.062s] Label Time Summary:
[11.062s] copyright     =   0.46 sec*proc (1 test)
[11.062s] flake8        =   0.83 sec*proc (1 test)
[11.062s] lint_cmake    =   0.41 sec*proc (1 test)
[11.062s] linter        =   5.60 sec*proc (5 tests)
[11.063s] pep257        =   0.44 sec*proc (1 test)
[11.065s] pytest        =   5.40 sec*proc (1 test)
[11.066s] xmllint       =   3.46 sec*proc (1 test)
[11.066s] 
[11.067s] Total Test time (real) =  11.01 sec
[11.067s] 
[11.067s] The following tests FAILED:
[11.067s] 	[0;31m  2 - copyright (Failed)[0;0m
[11.068s] 	[0;31m  3 - flake8 (Failed)[0;0m
[11.068s] 	[0;31m  4 - lint_cmake (Failed)[0;0m
[11.070s] Errors while running CTest
[11.070s] Output from these tests are in: /home/jonatan/ros2_ws/build/articubot_one/Testing/Temporary/LastTest.log
[11.070s] Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.
[11.071s] Invoked command in '/home/jonatan/ros2_ws/build/articubot_one' returned '8': AMENT_PREFIX_PATH=/home/jonatan/ros2_ws/install/articubot_one:${AMENT_PREFIX_PATH} CMAKE_PREFIX_PATH=/home/jonatan/ros2_ws/install/articubot_one:${CMAKE_PREFIX_PATH} PS1=\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ PYTHONPATH=/home/jonatan/ros2_ws/install/articubot_one/lib/python3.12/site-packages:${PYTHONPATH} /usr/bin/ctest -C Release -D ExperimentalTest --no-compress-output -V --force-new-ctest-process
