[0.000000] (-) TimerEvent: {}
[0.000514] (articubot_one) JobQueued: {'identifier': 'articubot_one', 'dependencies': OrderedDict({'articubot_one': '/home/jonatan/ros2_ws/install/articubot_one'})}
[0.000602] (articubot_one) JobStarted: {'identifier': 'articubot_one'}
[0.032853] (articubot_one) Command: {'cmd': ['/usr/bin/ctest', '-C', 'Release', '-D', 'ExperimentalTest', '--no-compress-output', '-V', '--force-new-ctest-process'], 'cwd': '/home/jonatan/ros2_ws/build/articubot_one', 'env': OrderedDict({'GJS_DEBUG_TOPICS': 'JS ERROR;JS LOG', 'XDG_ACTIVATION_TOKEN': '2ddf9c17-5cf4-48ad-bc40-f39f8ecbfeb7', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'jonatan', 'GZ_CONFIG_PATH': '/opt/ros/jazzy/opt/gz_sim_vendor/share/gz:/opt/ros/jazzy/opt/sdformat_vendor/share/gz:/opt/ros/jazzy/opt/gz_gui_vendor/share/gz:/opt/ros/jazzy/opt/gz_transport_vendor/share/gz:/opt/ros/jazzy/opt/gz_rendering_vendor/share/gz:/opt/ros/jazzy/opt/gz_plugin_vendor/share/gz:/opt/ros/jazzy/opt/gz_fuel_tools_vendor/share/gz:/opt/ros/jazzy/opt/gz_msgs_vendor/share/gz:/opt/ros/jazzy/opt/gz_common_vendor/share/gz', 'XDG_SESSION_TYPE': 'wayland', 'CLUTTER_DISABLE_MIPMAPPED_TEXT': '1', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/opt/ros/jazzy/opt/gz_sim_vendor/lib:/opt/ros/jazzy/opt/gz_sensors_vendor/lib:/opt/ros/jazzy/opt/gz_physics_vendor/lib:/opt/ros/jazzy/opt/sdformat_vendor/lib:/opt/ros/jazzy/opt/rviz_ogre_vendor/lib:/opt/ros/jazzy/lib/x86_64-linux-gnu:/opt/ros/jazzy/opt/gz_gui_vendor/lib:/opt/ros/jazzy/opt/gz_transport_vendor/lib:/opt/ros/jazzy/opt/gz_rendering_vendor/lib:/opt/ros/jazzy/opt/gz_plugin_vendor/lib:/opt/ros/jazzy/opt/gz_fuel_tools_vendor/lib:/opt/ros/jazzy/opt/gz_msgs_vendor/lib:/opt/ros/jazzy/opt/gz_common_vendor/lib:/opt/ros/jazzy/opt/gz_math_vendor/lib:/opt/ros/jazzy/opt/gz_utils_vendor/lib:/opt/ros/jazzy/opt/gz_tools_vendor/lib:/opt/ros/jazzy/opt/gz_ogre_next_vendor/lib:/opt/ros/jazzy/opt/gz_dartsim_vendor/lib:/opt/ros/jazzy/opt/gz_cmake_vendor/lib:/opt/ros/jazzy/lib', 'LESS': '-R', 'HOME': '/home/jonatan', 'OLDPWD': '/home/jonatan', 'DESKTOP_SESSION': 'ubuntu', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'ZSH': '/home/jonatan/.oh-my-zsh', 'GIO_LAUNCHED_DESKTOP_FILE': '/usr/share/applications/terminator.desktop', 'ROS_PYTHON_VERSION': '3', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'GTK_MODULES': 'gail:atk-bridge', 'PAGER': 'less', 'PS1': '\\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$', 'MANAGERPID': '2008', 'P9K_TTY': 'old', 'SYSTEMD_EXEC_PID': '2272', 'GSM_SKIP_SSH_AGENT_WORKAROUND': 'true', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'GIO_LAUNCHED_DESKTOP_FILE_PID': '3097', 'WAYLAND_DISPLAY': 'wayland-0', 'ROS_DISTRO': 'jazzy', 'LOGNAME': 'jonatan', '_P9K_SSH_TTY': '/dev/pts/2', 'JOURNAL_STREAM': '9:19463', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'MEMORY_PRESSURE_WATCH': '/sys/fs/cgroup/user.slice/user-1000.slice/user@1000.service/session.slice/org.gnome.Shell@wayland.service/memory.pressure', 'XDG_SESSION_CLASS': 'user', 'USERNAME': 'jonatan', 'TERM': 'xterm-256color', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'PATH': '/opt/ros/jazzy/opt/gz_msgs_vendor/bin:/opt/ros/jazzy/opt/gz_tools_vendor/bin:/opt/ros/jazzy/opt/gz_ogre_next_vendor/bin:/opt/ros/jazzy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin', 'SESSION_MANAGER': 'local/HP-EliteBook-x360-1030-G2:@/tmp/.ICE-unix/2219,unix/HP-EliteBook-x360-1030-G2:/tmp/.ICE-unix/2219', 'INVOCATION_ID': '1d5efdbd10c34d46a8570a6c200c5332', 'XDG_MENU_PREFIX': 'gnome-', 'GNOME_SETUP_DISPLAY': ':1', 'XDG_RUNTIME_DIR': '/run/user/1000', 'DISPLAY': ':0', 'LANG': 'en_US.UTF-8', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'XMODIFIERS': '@im=ibus', 'XDG_SESSION_DESKTOP': 'ubuntu', 'XAUTHORITY': '/run/user/1000/.mutter-Xwaylandauth.DBMW62', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:', 'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh', 'AMENT_PREFIX_PATH': '/home/jonatan/ros2_ws/install/articubot_one:/opt/ros/jazzy', 'SHELL': '/usr/bin/zsh', 'TERMINATOR_UUID': 'urn:uuid:0947d2af-0509-4362-9f98-b841aba16eb4', 'QT_ACCESSIBILITY': '1', 'GDMSESSION': 'ubuntu', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'IGN_GAZEBO_RESOURCE_PATH': '/opt/ros/jazzy/share', 'GJS_DEBUG_OUTPUT': 'stderr', 'P9K_SSH': '0', 'ROS_AUTOMATIC_DISCOVERY_RANGE': 'SUBNET', 'QT_IM_MODULE': 'ibus', 'PWD': '/home/jonatan/ros2_ws/build/articubot_one', 'LC_ALL': 'en_US.UTF-8', '_P9K_TTY': '/dev/pts/2', 'XDG_DATA_DIRS': '/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'PYTHONPATH': '/home/jonatan/ros2_ws/install/articubot_one/lib/python3.12/site-packages:/opt/ros/jazzy/lib/python3.12/site-packages', 'COLCON': '1', 'MEMORY_PRESSURE_WRITE': 'c29tZSAyMDAwMDAgMjAwMDAwMAA=', 'VTE_VERSION': '7600', 'CMAKE_PREFIX_PATH': '/home/jonatan/ros2_ws/install/articubot_one:/opt/ros/jazzy/opt/gz_sim_vendor:/opt/ros/jazzy/opt/gz_sensors_vendor:/opt/ros/jazzy/opt/gz_physics_vendor:/opt/ros/jazzy/opt/sdformat_vendor:/opt/ros/jazzy/opt/gz_gui_vendor:/opt/ros/jazzy/opt/gz_transport_vendor:/opt/ros/jazzy/opt/gz_rendering_vendor:/opt/ros/jazzy/opt/gz_plugin_vendor:/opt/ros/jazzy/opt/gz_fuel_tools_vendor:/opt/ros/jazzy/opt/gz_msgs_vendor:/opt/ros/jazzy/opt/gz_common_vendor:/opt/ros/jazzy/opt/gz_math_vendor:/opt/ros/jazzy/opt/gz_utils_vendor:/opt/ros/jazzy/opt/gz_tools_vendor:/opt/ros/jazzy/opt/gz_ogre_next_vendor:/opt/ros/jazzy/opt/gz_dartsim_vendor:/opt/ros/jazzy/opt/gz_cmake_vendor'}), 'shell': False}
[0.046137] (articubot_one) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.046473] (articubot_one) StdoutLine: {'line': b'Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.046661] (articubot_one) StdoutLine: {'line': b'   Site: HP-EliteBook-x360-1030-G2\n'}
[0.046827] (articubot_one) StdoutLine: {'line': b'   Build name: (empty)\n'}
[0.047097] (articubot_one) StdoutLine: {'line': b' Add coverage exclude regular expressions.\n'}
[0.047274] (articubot_one) StdoutLine: {'line': b'Create new tag: 20250518-1854 - Experimental\n'}
[0.047464] (articubot_one) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.047631] (articubot_one) StdoutLine: {'line': b'Parse Config file:/home/jonatan/ros2_ws/build/articubot_one/CTestConfiguration.ini\n'}
[0.047806] (articubot_one) StdoutLine: {'line': b'Test project /home/jonatan/ros2_ws/build/articubot_one\n'}
[0.047967] (articubot_one) StdoutLine: {'line': b'Constructing a list of tests\n'}
[0.048262] (articubot_one) StdoutLine: {'line': b'Done constructing a list of tests\n'}
[0.048468] (articubot_one) StdoutLine: {'line': b'Updating test list for fixtures\n'}
[0.048758] (articubot_one) StdoutLine: {'line': b'Added 0 tests to meet fixture requirements\n'}
[0.048928] (articubot_one) StdoutLine: {'line': b'Checking test dependency graph...\n'}
[0.049090] (articubot_one) StdoutLine: {'line': b'Checking test dependency graph end\n'}
[0.049256] (articubot_one) StdoutLine: {'line': b'test 1\n'}
[0.049448] (articubot_one) StdoutLine: {'line': b'    Start 1: laser_obstacle_test\n'}
[0.049614] (articubot_one) StdoutLine: {'line': b'\n'}
[0.049776] (articubot_one) StdoutLine: {'line': b'1: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test.txt" "--command" "/usr/bin/python3" "-u" "-m" "pytest" "/home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py" "-o" "cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache" "--junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml" "--junit-prefix=articubot_one"\n'}
[0.049968] (articubot_one) StdoutLine: {'line': b'1: Working Directory: /home/jonatan/ros2_ws/build/articubot_one\n'}
[0.050980] (articubot_one) StdoutLine: {'line': b'1: Test timeout computed to be: 360\n'}
[0.099439] (-) TimerEvent: {}
[0.137685] (articubot_one) StdoutLine: {'line': b"1: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/build/articubot_one':\n"}
[0.140011] (articubot_one) StdoutLine: {'line': b'1:  - /usr/bin/python3 -u -m pytest /home/jonatan/ros2_ws/src/articubot_one/test/pytest/test_laserObstacle.py -o cache_dir=/home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache --junit-xml=/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml --junit-prefix=articubot_one\n'}
[0.199537] (-) TimerEvent: {}
[0.299820] (-) TimerEvent: {}
[0.400149] (-) TimerEvent: {}
[0.500442] (-) TimerEvent: {}
[0.600708] (-) TimerEvent: {}
[0.700977] (-) TimerEvent: {}
[0.736323] (articubot_one) StdoutLine: {'line': b'1: ============================= test session starts ==============================\n'}
[0.736599] (articubot_one) StdoutLine: {'line': b'1: platform linux -- Python 3.12.3, pytest-7.4.4, pluggy-1.4.0\n'}
[0.744370] (articubot_one) StdoutLine: {'line': b'1: cachedir: /home/jonatan/ros2_ws/build/articubot_one/ament_cmake_pytest/laser_obstacle_test/.cache\n'}
[0.744834] (articubot_one) StdoutLine: {'line': b'1: rootdir: /home/jonatan/ros2_ws/src/articubot_one\n'}
[0.745175] (articubot_one) StdoutLine: {'line': b'1: plugins: launch-testing-3.4.4, ament-xmllint-0.17.2, ament-pep257-0.17.2, ament-copyright-0.17.2, ament-flake8-0.17.2, launch-testing-ros-0.26.7, ament-lint-0.17.2, cov-4.1.0, typeguard-4.1.5, colcon-core-0.19.0\n'}
[0.801085] (-) TimerEvent: {}
[0.901410] (-) TimerEvent: {}
[1.001739] (-) TimerEvent: {}
[1.034663] (articubot_one) StdoutLine: {'line': b'1: collected 2 items\n'}
[1.035579] (articubot_one) StdoutLine: {'line': b'1: \n'}
[1.101848] (-) TimerEvent: {}
[1.202197] (-) TimerEvent: {}
[1.302525] (-) TimerEvent: {}
[1.402830] (-) TimerEvent: {}
[1.503213] (-) TimerEvent: {}
[1.603778] (-) TimerEvent: {}
[1.704360] (-) TimerEvent: {}
[1.804893] (-) TimerEvent: {}
[1.905360] (-) TimerEvent: {}
[2.005662] (-) TimerEvent: {}
[2.105965] (-) TimerEvent: {}
[2.206300] (-) TimerEvent: {}
[2.306622] (-) TimerEvent: {}
[2.406927] (-) TimerEvent: {}
[2.507285] (-) TimerEvent: {}
[2.607640] (-) TimerEvent: {}
[2.707967] (-) TimerEvent: {}
[2.808258] (-) TimerEvent: {}
[2.908575] (-) TimerEvent: {}
[3.008935] (-) TimerEvent: {}
[3.109221] (-) TimerEvent: {}
[3.209565] (-) TimerEvent: {}
[3.309907] (-) TimerEvent: {}
[3.410216] (-) TimerEvent: {}
[3.510527] (-) TimerEvent: {}
[3.610899] (-) TimerEvent: {}
[3.711225] (-) TimerEvent: {}
[3.811512] (-) TimerEvent: {}
[3.911830] (-) TimerEvent: {}
[4.012166] (-) TimerEvent: {}
[4.112479] (-) TimerEvent: {}
[4.212776] (-) TimerEvent: {}
[4.313081] (-) TimerEvent: {}
[4.413385] (-) TimerEvent: {}
[4.513727] (-) TimerEvent: {}
[4.614023] (-) TimerEvent: {}
[4.714337] (-) TimerEvent: {}
[4.814617] (-) TimerEvent: {}
[4.914903] (-) TimerEvent: {}
[5.015216] (-) TimerEvent: {}
[5.115538] (-) TimerEvent: {}
[5.202588] (articubot_one) StdoutLine: {'line': b'1: ../../src/articubot_one/test/pytest/test_laserObstacle.py ..             [100%]\n'}
[5.203597] (articubot_one) StdoutLine: {'line': b'1: \n'}
[5.203919] (articubot_one) StdoutLine: {'line': b'1: - generated xml file: /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml -\n'}
[5.204390] (articubot_one) StdoutLine: {'line': b'1: ============================== 2 passed in 4.47s ===============================\n'}
[5.215658] (-) TimerEvent: {}
[5.315988] (-) TimerEvent: {}
[5.416370] (-) TimerEvent: {}
[5.432841] (articubot_one) StdoutLine: {'line': b'1: -- run_test.py: return code 0\n'}
[5.433262] (articubot_one) StdoutLine: {'line': b"1: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/laser_obstacle_test.xunit.xml'\n"}
[5.449744] (articubot_one) StdoutLine: {'line': b'1/6 Test #1: laser_obstacle_test ..............   Passed    5.40 sec\n'}
[5.450362] (articubot_one) StdoutLine: {'line': b'test 2\n'}
[5.451705] (articubot_one) StdoutLine: {'line': b'    Start 2: copyright\n'}
[5.452665] (articubot_one) StdoutLine: {'line': b'\n'}
[5.452956] (articubot_one) StdoutLine: {'line': b'2: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_copyright/copyright.txt" "--command" "/opt/ros/jazzy/bin/ament_copyright" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml"\n'}
[5.453235] (articubot_one) StdoutLine: {'line': b'2: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[5.453507] (articubot_one) StdoutLine: {'line': b'2: Test timeout computed to be: 200\n'}
[5.516471] (-) TimerEvent: {}
[5.538737] (articubot_one) StdoutLine: {'line': b"2: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[5.540053] (articubot_one) StdoutLine: {'line': b'2:  - /opt/ros/jazzy/bin/ament_copyright --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml\n'}
[5.616575] (-) TimerEvent: {}
[5.716848] (-) TimerEvent: {}
[5.817137] (-) TimerEvent: {}
[5.868753] (articubot_one) StdoutLine: {'line': b'2: CONTRIBUTING.md: file not found\n'}
[5.869798] (articubot_one) StdoutLine: {'line': b'2: LICENSE: file not found\n'}
[5.870137] (articubot_one) StdoutLine: {'line': b'2: articubot_one/obstacle_avoidance.py: could not find copyright notice\n'}
[5.870440] (articubot_one) StdoutLine: {'line': b'2: launch/ball_tracker.launch.py: could not find copyright notice\n'}
[5.870618] (articubot_one) StdoutLine: {'line': b'2: launch/camera.launch.py: could not find copyright notice\n'}
[5.870782] (articubot_one) StdoutLine: {'line': b'2: launch/joystick.launch.py: could not find copyright notice\n'}
[5.870943] (articubot_one) StdoutLine: {'line': b'2: launch/launch_robot.launch.py: could not find copyright notice\n'}
[5.871103] (articubot_one) StdoutLine: {'line': b'2: launch/launch_sim.launch.py: could not find copyright notice\n'}
[5.871261] (articubot_one) StdoutLine: {'line': b'2: launch/online_async_launch.py: could not find copyright notice\n'}
[5.871469] (articubot_one) StdoutLine: {'line': b'2: launch/rplidar.launch.py: could not find copyright notice\n'}
[5.871667] (articubot_one) StdoutLine: {'line': b'2: launch/rsp.launch.py: could not find copyright notice\n'}
[5.871891] (articubot_one) StdoutLine: {'line': b'2: launch/rviz_gazebo.launch.py: could not find copyright notice\n'}
[5.872125] (articubot_one) StdoutLine: {'line': b'2: test/pytest/test_laserObstacle.py: could not find copyright notice\n'}
[5.876578] (articubot_one) StdoutLine: {'line': b'2: 13 errors, checked 16 files\n'}
[5.894826] (articubot_one) StdoutLine: {'line': b'2: -- run_test.py: return code 1\n'}
[5.895318] (articubot_one) StdoutLine: {'line': b"2: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/copyright.xunit.xml'\n"}
[5.914843] (articubot_one) StdoutLine: {'line': b'2/6 Test #2: copyright ........................***Failed    0.46 sec\n'}
[5.916313] (articubot_one) StdoutLine: {'line': b'test 3\n'}
[5.916662] (articubot_one) StdoutLine: {'line': b'    Start 3: flake8\n'}
[5.916880] (articubot_one) StdoutLine: {'line': b'\n'}
[5.917088] (articubot_one) StdoutLine: {'line': b'3: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_flake8/flake8.txt" "--command" "/opt/ros/jazzy/bin/ament_flake8" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml"\n'}
[5.917303] (-) TimerEvent: {}
[5.917444] (articubot_one) StdoutLine: {'line': b'3: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[5.917676] (articubot_one) StdoutLine: {'line': b'3: Test timeout computed to be: 60\n'}
[6.017367] (-) TimerEvent: {}
[6.030049] (articubot_one) StdoutLine: {'line': b"3: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[6.032264] (articubot_one) StdoutLine: {'line': b'3:  - /opt/ros/jazzy/bin/ament_flake8 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml\n'}
[6.117474] (-) TimerEvent: {}
[6.217766] (-) TimerEvent: {}
[6.318034] (-) TimerEvent: {}
[6.420344] (-) TimerEvent: {}
[6.520672] (-) TimerEvent: {}
[6.580046] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist\n'}
[6.581629] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.581931] (articubot_one) StdoutLine: {'line': b'3: import math\n'}
[6.582179] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.582400] (articubot_one) StdoutLine: {'line': b'3: import math\n'}
[6.582593] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.582772] (articubot_one) StdoutLine: {'line': b'3: # i am writing down this piece of code with paramters \n'}
[6.582951] (articubot_one) StdoutLine: {'line': b'3:                                                      ^\n'}
[6.583128] (articubot_one) StdoutLine: {'line': b'3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node \n'}
[6.583340] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.584049] (articubot_one) StdoutLine: {'line': b'3: # Paramters are for the node , it enables modularity and you can modify the parameters when executing the node \n'}
[6.584328] (articubot_one) StdoutLine: {'line': b'3:                                                                                                               ^\n'}
[6.584677] (articubot_one) StdoutLine: {'line': b'3:     def __init__(self) :\n'}
[6.584968] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[6.585213] (articubot_one) StdoutLine: {'line': b'3:         super().__init__("Laser_Obstacle_Avoidance")\n'}
[6.585600] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[6.585954] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.586461] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.586697] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[6.586991] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[6.587942] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[6.588158] (articubot_one) StdoutLine: {'line': b'3:                                                    ^\n'}
[6.588379] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("threshold_distance",0.5)  # i can use 0.5m or 1m as threshold distance\n'}
[6.588608] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.588830] (articubot_one) StdoutLine: {'line': b'3:         self.threshold=self.get_parameter("threshold_distance").value\n'}
[6.589050] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[6.590055] (articubot_one) StdoutLine: {'line': b'3:         self.threshold=self.get_parameter("threshold_distance").value\n'}
[6.590249] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[6.590521] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.590800] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.591041] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[6.591311] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[6.592721] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[6.592932] (articubot_one) StdoutLine: {'line': b'3:                                                  ^\n'}
[6.593128] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("laser_scan_topic","/scan")\n'}
[6.593330] (articubot_one) StdoutLine: {'line': b'3:                                                   ^\n'}
[6.593530] (articubot_one) StdoutLine: {'line': b'3:         self.laser_topic=self.get_parameter("laser_scan_topic").value\n'}
[6.593713] (articubot_one) StdoutLine: {'line': b'3:                         ^\n'}
[6.593893] (articubot_one) StdoutLine: {'line': b'3:         self.laser_topic=self.get_parameter("laser_scan_topic").value\n'}
[6.594076] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[6.594265] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.594520] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.594884] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[6.595137] (articubot_one) StdoutLine: {'line': b'3:                                ^\n'}
[6.595554] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[6.598344] (articubot_one) StdoutLine: {'line': b'3:                                               ^\n'}
[6.598624] (articubot_one) StdoutLine: {'line': b'3:         self.declare_parameter("cmd_vel_topic","/cmd_vel")\n'}
[6.598858] (articubot_one) StdoutLine: {'line': b'3:                                                ^\n'}
[6.599068] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value\n'}
[6.599276] (articubot_one) StdoutLine: {'line': b'3:                       ^\n'}
[6.599501] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_topic=self.get_parameter("cmd_vel_topic").value\n'}
[6.599718] (articubot_one) StdoutLine: {'line': b'3:                                           ^\n'}
[6.599930] (articubot_one) StdoutLine: {'line': b"3:         self.frontal_detection_angle_rad = math.radians(self.get_parameter('frontal_detection_angle_deg').value)\n"}
[6.605748] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.607126] (articubot_one) StdoutLine: {'line': b'3:         #create a publisher to the /cmd_vel\n'}
[6.609773] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[6.610021] (articubot_one) StdoutLine: {'line': b'3:         self.cmd_vel_pub = self.create_publisher(Twist,self.cmd_topic, 10)\n'}
[6.610249] (articubot_one) StdoutLine: {'line': b'3:                                                       ^\n'}
[6.610493] (articubot_one) StdoutLine: {'line': b'3:     def laser_callback(self,msg):\n'}
[6.610718] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.610934] (articubot_one) StdoutLine: {'line': b'3:     def laser_callback(self,msg):\n'}
[6.613477] (articubot_one) StdoutLine: {'line': b'3:                            ^\n'}
[6.613725] (articubot_one) StdoutLine: {'line': b'3:   \n'}
[6.613919] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.614102] (articubot_one) StdoutLine: {'line': b'3:         if not(scan_size) :\n'}
[6.614286] (articubot_one) StdoutLine: {'line': b'3:               ^\n'}
[6.615733] (articubot_one) StdoutLine: {'line': b'3:         if not(scan_size) :\n'}
[6.615976] (articubot_one) StdoutLine: {'line': b'3:                          ^\n'}
[6.616529] (articubot_one) StdoutLine: {'line': b'3:             #no laser data \n'}
[6.616797] (articubot_one) StdoutLine: {'line': b'3:             ^\n'}
[6.617068] (articubot_one) StdoutLine: {'line': b'3:             #no laser data \n'}
[6.621722] (-) TimerEvent: {}
[6.621887] (articubot_one) StdoutLine: {'line': b'3:                           ^\n'}
[6.622159] (articubot_one) StdoutLine: {'line': b'3:             return \n'}
[6.622402] (articubot_one) StdoutLine: {'line': b'3:                   ^\n'}
[6.648986] (articubot_one) StdoutLine: {'line': b'3:         # the lidar provides angles,angle step (common difference of the angle sequence), distances in meter\n'}
[6.651200] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.651595] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.653391] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.654244] (articubot_one) StdoutLine: {'line': b'3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance\n'}
[6.655233] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[6.656008] (articubot_one) StdoutLine: {'line': b'3:         #for every angle in this sector, we get a valid distance and compare it with the angle_(i+1) in the sector so as to get the minimum distance\n'}
[6.656493] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.656876] (articubot_one) StdoutLine: {'line': b"3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance\n"}
[6.657145] (articubot_one) StdoutLine: {'line': b'3:         ^\n'}
[6.657491] (articubot_one) StdoutLine: {'line': b"3:         #we get an angle, we get it's corresponding distance and compare it's distance with a min distance\n"}
[6.657807] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.658097] (articubot_one) StdoutLine: {'line': b'3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle \n'}
[6.658351] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.658559] (articubot_one) StdoutLine: {'line': b'3:         # At each round, we get the minimum distance since our objectif is to get the closest distance to an obstacle \n'}
[6.658761] (articubot_one) StdoutLine: {'line': b'3:                                                                                                                      ^\n'}
[6.659013] (articubot_one) StdoutLine: {'line': b'3:         # we are sweeping across all the angles with the increment \n'}
[6.659267] (articubot_one) StdoutLine: {'line': b'3:                                                                   ^\n'}
[6.659576] (articubot_one) StdoutLine: {'line': b'3:         # while sweeping we compare  only the ranges with the ones in the defined angle \n'}
[6.659846] (articubot_one) StdoutLine: {'line': b'3:                                                                                        ^\n'}
[6.660068] (articubot_one) StdoutLine: {'line': b'3:                  # If the range reading is valid (not inf or nan)\n'}
[6.660280] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.660526] (articubot_one) StdoutLine: {'line': b'3:                  # If the range reading is valid (not inf or nan)\n'}
[6.660721] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.660927] (articubot_one) StdoutLine: {'line': b'3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):\n'}
[6.661144] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.661375] (articubot_one) StdoutLine: {'line': b'3:                  if not math.isinf(msg.ranges[i]) and not math.isnan(msg.ranges[i]):\n'}
[6.661599] (articubot_one) StdoutLine: {'line': b'3:                  ^\n'}
[6.661818] (articubot_one) StdoutLine: {'line': b'3:             \n'}
[6.662059] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.662322] (articubot_one) StdoutLine: {'line': b'3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])\n'}
[6.662580] (articubot_one) StdoutLine: {'line': b'3:                      ^\n'}
[6.662825] (articubot_one) StdoutLine: {'line': b'3:                      min_distance_in_frontal_sector = min(min_distance_in_frontal_sector, msg.ranges[i])\n'}
[6.663068] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.663340] (articubot_one) StdoutLine: {'line': b'3:         #  To stop the robot from moving ahead when ever it meets an obstacle, it will just go back \n'}
[6.663595] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.663851] (articubot_one) StdoutLine: {'line': b'3:         if obstacle_detected :\n'}
[6.664140] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.664435] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')\n"}
[6.664712] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.664957] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'Obstacle detected at {min_distance_in_frontal_sector:.2f}m. Deciding to stop.')\n"}
[6.665234] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.665499] (articubot_one) StdoutLine: {'line': b'3:            twist.linear.x = 0.0\n'}
[6.665731] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.665949] (articubot_one) StdoutLine: {'line': b'3:            twist.angular.z =0.0\n'}
[6.666169] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.666408] (articubot_one) StdoutLine: {'line': b'3:            twist.angular.z =0.0\n'}
[6.666630] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.666852] (articubot_one) StdoutLine: {'line': b'3:            self.cmd_vel_pub.publish(twist)\n'}
[6.667075] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.667321] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[6.667605] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.667846] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[6.668103] (articubot_one) StdoutLine: {'line': b'3:                                   ^\n'}
[6.668361] (articubot_one) StdoutLine: {'line': b"3:            self.get_logger().info(f'No obstacle detected') \n"}
[6.668614] (articubot_one) StdoutLine: {'line': b'3:                                                           ^\n'}
[6.668842] (articubot_one) StdoutLine: {'line': b'3: def main(args=None):\n'}
[6.669067] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.669273] (articubot_one) StdoutLine: {'line': b'3:         rclpy.spin(node) # Keep the node running and process callbacks\n'}
[6.669514] (articubot_one) StdoutLine: {'line': b'3:                         ^\n'}
[6.669722] (articubot_one) StdoutLine: {'line': b"3:         node.get_logger().info('Smart Obstacle Avoider Node stopped cleanly via KeyboardInterrupt.')\n"}
[6.669953] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.670186] (articubot_one) StdoutLine: {'line': b"3: if __name__ == '__main__':\n"}
[6.670458] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.670705] (articubot_one) StdoutLine: {'line': b'3:     main()    \n'}
[6.670934] (articubot_one) StdoutLine: {'line': b'3:           ^\n'}
[6.671181] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.671441] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.671695] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[6.671921] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.672154] (articubot_one) StdoutLine: {'line': b"3:     my_package_name='articubot_one'\n"}
[6.672384] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.672606] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[6.672842] (articubot_one) StdoutLine: {'line': b'3:                                                                                   ^\n'}
[6.673087] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[6.673352] (articubot_one) StdoutLine: {'line': b'3:                                                                                            ^\n'}
[6.673653] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_sim = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_sim.yaml')\n"}
[6.673877] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.674107] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[6.674348] (articubot_one) StdoutLine: {'line': b'3:                                                                                     ^\n'}
[6.674589] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[6.674813] (articubot_one) StdoutLine: {'line': b'3:                                                                                              ^\n'}
[6.675031] (articubot_one) StdoutLine: {'line': b"3:     tracker_params_robot = os.path.join(get_package_share_directory(my_package_name),'config','ball_tracker_params_robot.yaml')\n"}
[6.675248] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.675500] (articubot_one) StdoutLine: {'line': b'3:     params_path = PythonExpression([\'"\',tracker_params_sim, \'" if "true" == "\', sim_mode, \'" else "\', tracker_params_robot, \'"\'])\n'}
[6.675714] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.675940] (articubot_one) StdoutLine: {'line': b'3:     params_path = PythonExpression([\'"\',tracker_params_sim, \'" if "true" == "\', sim_mode, \'" else "\', tracker_params_robot, \'"\'])\n'}
[6.676153] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.676396] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory('ball_tracker'), 'launch', 'ball_tracker.launch.py')]),\n"}
[6.676668] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.676879] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'params_file': params_path,\n"}
[6.677071] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.677262] (articubot_one) StdoutLine: {'line': b"3:                                     'image_topic': '/camera/image_raw',\n"}
[6.677498] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.677718] (articubot_one) StdoutLine: {'line': b"3:                                     'cmd_vel_topic': '/cmd_vel_tracker',\n"}
[6.677934] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.678137] (articubot_one) StdoutLine: {'line': b"3:                                     'enable_3d_tracker': 'true'}.items())\n"}
[6.678342] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.678562] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[6.678769] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.678973] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.679186] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.679421] (articubot_one) StdoutLine: {'line': b'3:     return LaunchDescription([\n'}
[6.679654] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.679878] (articubot_one) StdoutLine: {'line': b"3:                 'image_size': [640,480],\n"}
[6.680113] (articubot_one) StdoutLine: {'line': b'3:                                   ^\n'}
[6.680378] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.680627] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.680853] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.681070] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:5:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[6.681326] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.681562] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:6:1: I100 Import statements are in the wrong order. 'import math' should be before 'from geometry_msgs.msg import Twist' and in a different group.\n"}
[6.681798] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.682007] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:6:1: I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.\n"}
[6.682232] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.682509] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:9:54: W291 trailing whitespace\n'}
[6.682699] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.682882] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:10:100: E501 line too long (110 > 99 characters)\n'}
[6.683074] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.683258] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:10:111: W291 trailing whitespace\n'}
[6.683469] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.683663] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:14:23: E203 whitespace before ':'\n"}
[6.683866] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.684066] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:15:26: Q000 Double quotes found but single quotes preferred\n'}
[6.684276] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.684564] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:16:1: W293 blank line contains whitespace\n'}
[6.684853] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.685077] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:17:32: Q000 Double quotes found but single quotes preferred\n'}
[6.685324] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.685584] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:17:52: E231 missing whitespace after ','\n"}
[6.685835] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.686086] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:17:100: E501 line too long (102 > 99 characters)\n'}
[6.686366] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.686602] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:18:23: E225 missing whitespace around operator\n'}
[6.686806] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.687008] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:18:43: Q000 Double quotes found but single quotes preferred\n'}
[6.687207] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.687419] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:19:1: W293 blank line contains whitespace\n'}
[6.687623] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.687818] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:20:32: Q000 Double quotes found but single quotes preferred\n'}
[6.688014] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.688220] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:20:50: E231 missing whitespace after ','\n"}
[6.688499] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.688770] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:20:51: Q000 Double quotes found but single quotes preferred\n'}
[6.689057] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.689304] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:21:25: E225 missing whitespace around operator\n'}
[6.689582] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.689809] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:21:45: Q000 Double quotes found but single quotes preferred\n'}
[6.690042] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.690268] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:22:1: W293 blank line contains whitespace\n'}
[6.690535] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.690748] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:23:32: Q000 Double quotes found but single quotes preferred\n'}
[6.690952] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.691159] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:23:47: E231 missing whitespace after ','\n"}
[6.691403] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.691615] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:23:48: Q000 Double quotes found but single quotes preferred\n'}
[6.691808] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.691976] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:24:23: E225 missing whitespace around operator\n'}
[6.692143] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.692325] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:24:43: Q000 Double quotes found but single quotes preferred\n'}
[6.692576] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.692787] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:29:100: E501 line too long (112 > 99 characters)\n'}
[6.692979] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.693164] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:38:9: E265 block comment should start with '# '\n"}
[6.693454] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.693676] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:39:55: E231 missing whitespace after ','\n"}
[6.693885] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.694102] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:43:5: E303 too many blank lines (2)\n'}
[6.694336] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.694587] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:43:28: E231 missing whitespace after ','\n"}
[6.694812] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.695037] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:47:1: W293 blank line contains whitespace\n'}
[6.695268] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.695528] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:48:15: E275 missing whitespace after keyword\n'}
[6.695750] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.695963] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:48:26: E203 whitespace before ':'\n"}
[6.696172] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.696396] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:49:13: E265 block comment should start with '# '\n"}
[6.696606] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.696791] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:49:27: W291 trailing whitespace\n'}
[6.696994] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.697222] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:50:19: W291 trailing whitespace\n'}
[6.697490] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.697690] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:51:100: E501 line too long (108 > 99 characters)\n'}
[6.697922] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.698175] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:56:1: W293 blank line contains whitespace\n'}
[6.698476] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.698711] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:60:9: E265 block comment should start with '# '\n"}
[6.698915] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.699120] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:60:100: E501 line too long (148 > 99 characters)\n'}
[6.699332] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.699550] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:61:9: E265 block comment should start with '# '\n"}
[6.699763] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.699975] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:61:100: E501 line too long (106 > 99 characters)\n'}
[6.700209] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.700451] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:62:100: E501 line too long (117 > 99 characters)\n'}
[6.700721] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.700974] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:62:118: W291 trailing whitespace\n'}
[6.701221] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.701488] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:64:67: W291 trailing whitespace\n'}
[6.701739] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.701983] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:65:88: W291 trailing whitespace\n'}
[6.702227] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.702517] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:75:18: E114 indentation is not a multiple of 4 (comment)\n'}
[6.702756] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.702960] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:75:18: E117 over-indented (comment)\n'}
[6.703157] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.703355] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:76:18: E111 indentation is not a multiple of 4\n'}
[6.703550] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.703729] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:76:18: E117 over-indented\n'}
[6.703914] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.704098] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:77:1: W293 blank line contains whitespace\n'}
[6.704282] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.704486] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:78:22: E111 indentation is not a multiple of 4\n'}
[6.704671] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.704850] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:78:100: E501 line too long (104 > 99 characters)\n'}
[6.705029] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.705202] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:86:100: W291 trailing whitespace\n'}
[6.705391] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.705640] (articubot_one) StdoutLine: {'line': b"3: ./articubot_one/obstacle_avoidance.py:87:29: E203 whitespace before ':'\n"}
[6.705889] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.706126] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:88:12: E111 indentation is not a multiple of 4\n'}
[6.706374] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.706602] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:88:100: E501 line too long (115 > 99 characters)\n'}
[6.706825] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.707040] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:89:12: E111 indentation is not a multiple of 4\n'}
[6.707251] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.707535] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:90:12: E111 indentation is not a multiple of 4\n'}
[6.707714] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.707880] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:90:29: E225 missing whitespace around operator\n'}
[6.708049] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.708257] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:91:12: E111 indentation is not a multiple of 4\n'}
[6.708575] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.708765] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:12: E111 indentation is not a multiple of 4\n'}
[6.708967] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.709138] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:35: F541 f-string is missing placeholders\n'}
[6.709316] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.709599] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:93:59: W291 trailing whitespace\n'}
[6.709840] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.710058] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:95:1: E302 expected 2 blank lines, found 1\n'}
[6.710265] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.710484] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:99:25: E261 at least two spaces before inline comment\n'}
[6.710693] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.710890] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:101:100: E501 line too long (100 > 99 characters)\n'}
[6.711092] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.711297] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:116:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[6.711542] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.711746] (articubot_one) StdoutLine: {'line': b'3: ./articubot_one/obstacle_avoidance.py:117:11: W291 trailing whitespace\n'}
[6.711942] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.712124] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:2:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.712322] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.712523] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:8:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import PythonExpression'\n"}
[6.712726] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.712900] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:13:20: E225 missing whitespace around operator\n'}
[6.713074] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.713266] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:17:83: E231 missing whitespace after ','\n"}
[6.713469] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.713647] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:17:92: E231 missing whitespace after ','\n"}
[6.713866] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.714081] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:17:100: E501 line too long (123 > 99 characters)\n'}
[6.714308] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.714550] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:18:85: E231 missing whitespace after ','\n"}
[6.714748] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.714934] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:18:94: E231 missing whitespace after ','\n"}
[6.715193] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.715417] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:18:100: E501 line too long (127 > 99 characters)\n'}
[6.715645] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.715808] (articubot_one) StdoutLine: {'line': b"3: ./launch/ball_tracker.launch.py:20:40: E231 missing whitespace after ','\n"}
[6.715974] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.716135] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:20:100: E501 line too long (129 > 99 characters)\n'}
[6.716313] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.716487] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:24:100: E501 line too long (103 > 99 characters)\n'}
[6.716647] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.716802] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:25:21: E131 continuation line unaligned for hanging indent\n'}
[6.716973] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.717140] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:26:37: E128 continuation line under-indented for visual indent\n'}
[6.717349] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.717632] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:27:37: E128 continuation line under-indented for visual indent\n'}
[6.717846] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.718080] (articubot_one) StdoutLine: {'line': b'3: ./launch/ball_tracker.launch.py:28:37: E128 continuation line under-indented for visual indent\n'}
[6.718314] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.718521] (articubot_one) StdoutLine: {'line': b"3: ./launch/camera.launch.py:1:1: F401 'os' imported but unused\n"}
[6.718740] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.718929] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:6:1: E302 expected 2 blank lines, found 1\n'}
[6.719121] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.719401] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:10:5: E303 too many blank lines (3)\n'}
[6.719606] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.719786] (articubot_one) StdoutLine: {'line': b"3: ./launch/camera.launch.py:18:35: E231 missing whitespace after ','\n"}
[6.719946] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.720107] (articubot_one) StdoutLine: {'line': b'3: ./launch/camera.launch.py:22:5: E122 continuation line missing indentation or outdented\n'}
[6.720271] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.720480] (articubot_one) StdoutLine: {'line': b'3: from launch.substitutions import LaunchConfiguration\n'}
[6.720648] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.720807] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[6.720970] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.721132] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[6.721304] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.721480] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.721640] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.721801] (-) TimerEvent: {}
[6.721927] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.722170] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.722431] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[6.722694] (articubot_one) StdoutLine: {'line': b'3:                                                                           ^\n'}
[6.722930] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[6.723134] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[6.723374] (articubot_one) StdoutLine: {'line': b"3:     joy_params = os.path.join(get_package_share_directory('articubot_one'),'config','joystick.yaml')\n"}
[6.723655] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.723863] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel','/cmd_vel_joy')]\n"}
[6.724068] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[6.724228] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_in','/diff_cont/cmd_vel_unstamped'),\n"}
[6.724420] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[6.724589] (articubot_one) StdoutLine: {'line': b"3:                         ('/cmd_vel_out','/diff_cont/cmd_vel')]\n"}
[6.724762] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.724942] (articubot_one) StdoutLine: {'line': b'3:     return LaunchDescription([\n'}
[6.725117] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.725302] (articubot_one) StdoutLine: {'line': b'3:         twist_stamper       \n'}
[6.725592] (articubot_one) StdoutLine: {'line': b'3:                      ^\n'}
[6.725823] (articubot_one) StdoutLine: {'line': b'3:     ])      ^\n'}
[6.726028] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import RegisterEventHandler\n'}
[6.726224] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.726441] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.726643] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.726833] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.727022] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.727212] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.727481] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.727657] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.727850] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.728008] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.728167] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[6.728348] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.728539] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[6.728720] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.728904] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.729092] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.729277] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.729494] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.729681] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.729862] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.730065] (articubot_one) StdoutLine: {'line': b'3:                                                                              ^\n'}
[6.730328] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.730581] (articubot_one) StdoutLine: {'line': b'3:                                                                                       ^\n'}
[6.730835] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.731056] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.731252] (articubot_one) StdoutLine: {'line': b'3:             package="twist_mux",\n'}
[6.731554] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.731776] (articubot_one) StdoutLine: {'line': b'3:             executable="twist_mux",\n'}
[6.732018] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[6.732230] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]\n"}
[6.732487] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.732660] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.732821] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.733033] (articubot_one) StdoutLine: {'line': b"3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])\n"}
[6.733222] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.733425] (articubot_one) StdoutLine: {'line': b"3:     robot_description = Command(['ros2 param get --hide-type /robot_state_publisher robot_description'])\n"}
[6.733611] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.733797] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[6.734009] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[6.734183] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[6.734390] (articubot_one) StdoutLine: {'line': b'3:                                                                                             ^\n'}
[6.734685] (articubot_one) StdoutLine: {'line': b"3:     controller_params_file = os.path.join(get_package_share_directory(package_name),'config','my_controllers.yaml')\n"}
[6.734904] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.735106] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.735319] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.735551] (articubot_one) StdoutLine: {'line': b'3:         executable="ros2_control_node",\n'}
[6.735763] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.735984] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.736212] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.736552] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.736746] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.736939] (articubot_one) StdoutLine: {'line': b'3:         arguments=["diff_cont"],\n'}
[6.737126] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.737334] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.737544] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.737737] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.737917] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.738080] (articubot_one) StdoutLine: {'line': b'3:         arguments=["joint_broad"],\n'}
[6.738240] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.738446] (articubot_one) StdoutLine: {'line': b"3:     # Code for delaying a node (I haven't tested how effective it is)\n"}
[6.738678] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.738886] (articubot_one) StdoutLine: {'line': b'3:     # \n'}
[6.739095] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[6.739285] (articubot_one) StdoutLine: {'line': b'3:     # Launch them all!\n'}
[6.739496] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.739669] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument\n'}
[6.739871] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.740049] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.740248] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.740528] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.740701] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.740890] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.741103] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.741324] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.741545] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.741757] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.741972] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[6.742185] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.742429] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[6.742647] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.742862] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.743081] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.743793] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.744212] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'\n"}
[6.744530] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.744817] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','joystick.launch.py'\n"}
[6.745091] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.745401] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.745656] (articubot_one) StdoutLine: {'line': b'3:                                                                              ^\n'}
[6.745925] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.746178] (articubot_one) StdoutLine: {'line': b'3:                                                                                       ^\n'}
[6.746465] (articubot_one) StdoutLine: {'line': b"3:     twist_mux_params = os.path.join(get_package_share_directory(package_name),'config','twist_mux.yaml')\n"}
[6.746778] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.747072] (articubot_one) StdoutLine: {'line': b'3:             package="twist_mux",\n'}
[6.747400] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.747677] (articubot_one) StdoutLine: {'line': b'3:             executable="twist_mux",\n'}
[6.747954] (articubot_one) StdoutLine: {'line': b'3:                        ^\n'}
[6.748224] (articubot_one) StdoutLine: {'line': b"3:             remappings=[('/cmd_vel_out','/diff_cont/cmd_vel_unstamped')]\n"}
[6.748528] (articubot_one) StdoutLine: {'line': b'3:                                        ^\n'}
[6.748749] (articubot_one) StdoutLine: {'line': b'3:     default_world = os.path.join(\n'}
[6.748966] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.749176] (articubot_one) StdoutLine: {'line': b'3:         )    \n'}
[6.749413] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[6.749634] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.749846] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.750052] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.750266] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.750549] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.750832] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.751082] (articubot_one) StdoutLine: {'line': b"3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.\n"}
[6.751358] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.751639] (articubot_one) StdoutLine: {'line': b'3:     diff_drive_spawner = Node(\n'}
[6.751901] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.752151] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.752457] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.752711] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.752955] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.753194] (articubot_one) StdoutLine: {'line': b'3:         arguments=["diff_cont"],\n'}
[6.753450] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.753697] (articubot_one) StdoutLine: {'line': b'3:         package="controller_manager",\n'}
[6.753954] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.754207] (articubot_one) StdoutLine: {'line': b'3:         executable="spawner",\n'}
[6.754477] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.754732] (articubot_one) StdoutLine: {'line': b'3:         arguments=["joint_broad"],\n'}
[6.754977] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.755224] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.755504] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.755755] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.756004] (articubot_one) StdoutLine: {'line': b'3:                                                                           ^\n'}
[6.756243] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.756506] (articubot_one) StdoutLine: {'line': b'3:                                                                                    ^\n'}
[6.756743] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.756983] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.757233] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.757519] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.757799] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.758041] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.758262] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_image",\n'}
[6.758546] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.758778] (articubot_one) StdoutLine: {'line': b'3:         executable="image_bridge",\n'}
[6.759008] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.759250] (articubot_one) StdoutLine: {'line': b'3:         arguments=["/camera/image_raw"]\n'}
[6.759510] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.759750] (articubot_one) StdoutLine: {'line': b"3:     # Code for delaying a node (I haven't tested how effective it is)\n"}
[6.759975] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.760229] (articubot_one) StdoutLine: {'line': b'3:     # \n'}
[6.760491] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[6.760740] (articubot_one) StdoutLine: {'line': b'3:     # Launch them all!\n'}
[6.760966] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.761197] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.761494] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.761796] (articubot_one) StdoutLine: {'line': b'3:     default_params_file = os.path.join(get_package_share_directory("articubot_one"),\n'}
[6.762115] (articubot_one) StdoutLine: {'line': b'3:                                                                    ^\n'}
[6.762368] (articubot_one) StdoutLine: {'line': b'3: import os\n'}
[6.762624] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.763015] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:3:1: I100 Import statements are in the wrong order. 'from launch.substitutions import LaunchConfiguration' should be before 'from launch_ros.actions import Node'\n"}
[6.763399] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.763764] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:4:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration'\n"}
[6.764090] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.764401] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:6:1: I100 Import statements are in the wrong order. 'import os' should be before 'from launch.actions import DeclareLaunchArgument' and in a different group.\n"}
[6.764768] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.765018] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:7:1: I201 Missing newline between import groups. 'from ament_index_python.packages import get_package_share_directory' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.765272] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.765548] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:9:1: E302 expected 2 blank lines, found 1\n'}
[6.765787] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.766020] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:12:75: E231 missing whitespace after ','\n"}
[6.766254] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.766507] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:12:84: E231 missing whitespace after ','\n"}
[6.766751] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.766991] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:12:100: E501 line too long (100 > 99 characters)\n'}
[6.767278] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.767565] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:25:36: E231 missing whitespace after ','\n"}
[6.767824] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.768042] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:32:39: E231 missing whitespace after ','\n"}
[6.768275] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.768551] (articubot_one) StdoutLine: {'line': b"3: ./launch/joystick.launch.py:33:40: E231 missing whitespace after ','\n"}
[6.768803] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.769063] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:37:5: E303 too many blank lines (2)\n'}
[6.769351] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.769608] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:44:22: W291 trailing whitespace\n'}
[6.769867] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.770123] (articubot_one) StdoutLine: {'line': b'3: ./launch/joystick.launch.py:45:7: W292 no newline at end of file\n'}
[6.770348] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.770569] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:10:1: I100 Import statements are in the wrong order. 'from launch.actions import RegisterEventHandler' should be before 'from launch.substitutions import Command'\n"}
[6.770779] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.770991] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:17:1: E303 too many blank lines (3)\n'}
[6.771192] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.771413] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:20:5: E303 too many blank lines (2)\n'}
[6.771632] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.771848] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:20:100: E501 line too long (110 > 99 characters)\n'}
[6.772048] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.772276] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:23:17: E225 missing whitespace around operator\n'}
[6.772565] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.772832] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:23:33: E261 at least two spaces before inline comment\n'}
[6.773137] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.773427] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:23:34: E262 inline comment should start with '# '\n"}
[6.773719] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.773956] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:27:62: E231 missing whitespace after ','\n"}
[6.774230] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.774550] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:27:71: E231 missing whitespace after ','\n"}
[6.774759] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.774951] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:38:5: E303 too many blank lines (2)\n'}
[6.775166] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.775398] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:38:78: E231 missing whitespace after ','\n"}
[6.775616] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.775816] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:38:87: E231 missing whitespace after ','\n"}
[6.776011] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.776213] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:38:100: E501 line too long (104 > 99 characters)\n'}
[6.776454] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.776671] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:40:21: Q000 Double quotes found but single quotes preferred\n'}
[6.776888] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.777091] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:41:24: Q000 Double quotes found but single quotes preferred\n'}
[6.777302] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.777523] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:43:40: E231 missing whitespace after ','\n"}
[6.777738] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.777940] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:46:1: W293 blank line contains whitespace\n'}
[6.778136] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.778343] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:49:5: E303 too many blank lines (4)\n'}
[6.778653] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.778946] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:49:100: E501 line too long (104 > 99 characters)\n'}
[6.779202] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.779610] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:51:84: E231 missing whitespace after ','\n"}
[6.779982] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.780384] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_robot.launch.py:51:93: E231 missing whitespace after ','\n"}
[6.780830] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.781165] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:51:100: E501 line too long (115 > 99 characters)\n'}
[6.781584] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.781901] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:54:17: Q000 Double quotes found but single quotes preferred\n'}
[6.782203] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.782461] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:55:20: Q000 Double quotes found but single quotes preferred\n'}
[6.782685] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.782902] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:63:17: Q000 Double quotes found but single quotes preferred\n'}
[6.783130] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.783344] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:64:20: Q000 Double quotes found but single quotes preferred\n'}
[6.783577] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.783786] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:65:20: Q000 Double quotes found but single quotes preferred\n'}
[6.783983] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.784169] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:76:17: Q000 Double quotes found but single quotes preferred\n'}
[6.784394] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.784668] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:77:20: Q000 Double quotes found but single quotes preferred\n'}
[6.784899] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.785102] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:78:20: Q000 Double quotes found but single quotes preferred\n'}
[6.785315] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.785538] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:89:5: E303 too many blank lines (2)\n'}
[6.785744] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.785948] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:90:6: W291 trailing whitespace\n'}
[6.786162] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.786446] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_robot.launch.py:107:5: E303 too many blank lines (3)\n'}
[6.786659] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.786847] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[6.787038] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.787238] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:15:1: E303 too many blank lines (3)\n'}
[6.787478] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.787692] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:18:5: E303 too many blank lines (2)\n'}
[6.787900] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.788114] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:18:100: E501 line too long (110 > 99 characters)\n'}
[6.788394] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.788669] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:21:17: E225 missing whitespace around operator\n'}
[6.788958] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.789222] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:21:33: E261 at least two spaces before inline comment\n'}
[6.789504] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.789767] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:21:34: E262 inline comment should start with '# '\n"}
[6.790013] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.790253] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:25:62: E231 missing whitespace after ','\n"}
[6.790530] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.790737] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:25:71: E231 missing whitespace after ','\n"}
[6.790939] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.791161] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:31:62: E231 missing whitespace after ','\n"}
[6.791371] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.791685] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:31:71: E231 missing whitespace after ','\n"}
[6.791966] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.792236] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:35:78: E231 missing whitespace after ','\n"}
[6.792630] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.792962] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:35:87: E231 missing whitespace after ','\n"}
[6.793316] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.793657] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:35:100: E501 line too long (104 > 99 characters)\n'}
[6.793987] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.794362] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:37:21: Q000 Double quotes found but single quotes preferred\n'}
[6.794680] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.794958] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:38:24: Q000 Double quotes found but single quotes preferred\n'}
[6.795259] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.795581] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:40:40: E231 missing whitespace after ','\n"}
[6.795867] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.796157] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:44:5: E303 too many blank lines (2)\n'}
[6.796465] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.796771] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:48:10: W291 trailing whitespace\n'}
[6.797077] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.797361] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:49:1: W293 blank line contains whitespace\n'}
[6.797656] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.797938] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:62:21: E131 continuation line unaligned for hanging indent\n'}
[6.798232] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.798541] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:62:100: E501 line too long (104 > 99 characters)\n'}
[6.798809] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.799099] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:65:100: E501 line too long (126 > 99 characters)\n'}
[6.799419] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.799726] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:73:5: E303 too many blank lines (2)\n'}
[6.799944] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.800224] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:74:17: Q000 Double quotes found but single quotes preferred\n'}
[6.802415] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.802727] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:75:20: Q000 Double quotes found but single quotes preferred\n'}
[6.802946] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.803158] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:76:20: Q000 Double quotes found but single quotes preferred\n'}
[6.803387] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.803598] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:80:17: Q000 Double quotes found but single quotes preferred\n'}
[6.803800] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.803996] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:81:20: Q000 Double quotes found but single quotes preferred\n'}
[6.804185] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.804557] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:82:20: Q000 Double quotes found but single quotes preferred\n'}
[6.804964] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.805263] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:86:5: E303 too many blank lines (2)\n'}
[6.805544] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.805846] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:86:75: E231 missing whitespace after ','\n"}
[6.806083] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.806312] (articubot_one) StdoutLine: {'line': b"3: ./launch/launch_sim.launch.py:86:84: E231 missing whitespace after ','\n"}
[6.806576] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.806756] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:86:100: E501 line too long (101 > 99 characters)\n'}
[6.806938] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.807117] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:88:17: Q000 Double quotes found but single quotes preferred\n'}
[6.807316] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.807517] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:89:20: Q000 Double quotes found but single quotes preferred\n'}
[6.807706] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.807891] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:98:17: Q000 Double quotes found but single quotes preferred\n'}
[6.808080] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.808273] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:99:20: Q000 Double quotes found but single quotes preferred\n'}
[6.808608] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.808855] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:100:20: Q000 Double quotes found but single quotes preferred\n'}
[6.809092] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.809326] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:105:5: E303 too many blank lines (3)\n'}
[6.809560] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.809777] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:106:6: W291 trailing whitespace\n'}
[6.809988] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.810199] (articubot_one) StdoutLine: {'line': b'3: ./launch/launch_sim.launch.py:123:5: E303 too many blank lines (3)\n'}
[6.810480] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.810669] (articubot_one) StdoutLine: {'line': b"3: ./launch/online_async_launch.py:8:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'from launch_ros.actions import Node'\n"}
[6.810857] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.811054] (articubot_one) StdoutLine: {'line': b'3: ./launch/online_async_launch.py:15:68: Q000 Double quotes found but single quotes preferred\n'}
[6.811351] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.811649] (articubot_one) StdoutLine: {'line': b"3: ./launch/rplidar.launch.py:1:1: F401 'os' imported but unused\n"}
[6.811936] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.812180] (articubot_one) StdoutLine: {'line': b"3: ./launch/rplidar.launch.py:2:1: I201 Missing newline between import groups. 'from launch import LaunchDescription' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.812508] (articubot_one) StdoutLine: {'line': b'3: from launch import LaunchDescription\n'}
[6.812830] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.813115] (articubot_one) StdoutLine: {'line': b'3: def generate_launch_description():\n'}
[6.813358] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.813631] (articubot_one) StdoutLine: {'line': b"3:                 'serial_port': '/dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.3:1.0-port0',\n"}
[6.813931] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.814255] (articubot_one) StdoutLine: {'line': b'3: from launch.substitutions import LaunchConfiguration, Command\n'}
[6.815425] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.815767] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import DeclareLaunchArgument\n'}
[6.817735] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.818072] (articubot_one) StdoutLine: {'line': b'3: import xacro\n'}
[6.818353] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.818637] (articubot_one) StdoutLine: {'line': b"3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')\n"}
[6.818870] (articubot_one) StdoutLine: {'line': b'3:                                       ^\n'}
[6.819100] (articubot_one) StdoutLine: {'line': b"3:     xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')\n"}
[6.819492] (articubot_one) StdoutLine: {'line': b'3:                                                     ^\n'}
[6.819856] (articubot_one) StdoutLine: {'line': b"3:     robot_description_config = Command(['xacro ', xacro_file, ' use_ros2_control:=', use_ros2_control, ' sim_mode:=', use_sim_time])\n"}
[6.820202] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.820540] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.820876] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.821222] (articubot_one) StdoutLine: {'line': b'3:     # Launch!\n'}
[6.821595] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.821843] (-) TimerEvent: {}
[6.821990] (articubot_one) StdoutLine: {'line': b'3: import xacro\n'}
[6.822333] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.822650] (articubot_one) StdoutLine: {'line': b'3: from ament_index_python.packages import get_package_share_directory\n'}
[6.822924] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.823178] (articubot_one) StdoutLine: {'line': b'3: from launch.actions import IncludeLaunchDescription, DeclareLaunchArgument\n'}
[6.823451] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.823703] (articubot_one) StdoutLine: {'line': b'3: from launch.conditions import IfCondition, UnlessCondition\n'}
[6.823939] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.824199] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.824436] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.824660] (articubot_one) StdoutLine: {'line': b'3:     # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled\n'}
[6.824885] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.825084] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.825280] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.825614] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.825853] (articubot_one) StdoutLine: {'line': b'3:                                 ^\n'}
[6.826088] (articubot_one) StdoutLine: {'line': b"3:     package_name='articubot_one' #<--- CHANGE ME\n"}
[6.826468] (articubot_one) StdoutLine: {'line': b'3:                                  ^\n'}
[6.826833] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.827096] (articubot_one) StdoutLine: {'line': b'3:                                                              ^\n'}
[6.827475] (articubot_one) StdoutLine: {'line': b"3:                     get_package_share_directory(package_name),'launch','rsp.launch.py'\n"}
[6.827787] (articubot_one) StdoutLine: {'line': b'3:                                                                       ^\n'}
[6.828048] (articubot_one) StdoutLine: {'line': b'3:         )    \n'}
[6.828336] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[6.828636] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.828931] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.829141] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.829503] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.829814] (articubot_one) StdoutLine: {'line': b"3:                     launch_arguments={'gz_args': ['-r -v4 ', world], 'on_exit_shutdown': 'true'}.items()\n"}
[6.830153] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.832145] (articubot_one) StdoutLine: {'line': b"3:     # Run the spawner node from the ros_gz_sim package. The entity name doesn't really matter if you only have a single robot.\n"}
[6.834445] (articubot_one) StdoutLine: {'line': b'3:                                                                                                    ^\n'}
[6.834710] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.834909] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.835108] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[6.835311] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.835519] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.835709] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[6.835900] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[6.836163] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[6.836428] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[6.836614] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[6.836777] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.836939] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.837101] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.837263] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.837456] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.837625] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[6.837785] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.837946] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.838105] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[6.838309] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[6.838557] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[6.838994] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[6.839233] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[6.839526] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.839765] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.839985] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.840202] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.840478] (articubot_one) StdoutLine: {'line': b"3:     bridge_params = os.path.join(get_package_share_directory(package_name),'config','gz_bridge.yaml')\n"}
[6.840669] (articubot_one) StdoutLine: {'line': b'3:     ros_gz_bridge = Node(\n'}
[6.840846] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_bridge",\n'}
[6.841030] (articubot_one) StdoutLine: {'line': b'3:         executable="parameter_bridge",\n'}
[6.841208] (articubot_one) StdoutLine: {'line': b'3:         arguments=[\n'}
[6.841410] (articubot_one) StdoutLine: {'line': b"3:             '--ros-args',\n"}
[6.841596] (articubot_one) StdoutLine: {'line': b"3:             '-p',\n"}
[6.841772] (articubot_one) StdoutLine: {'line': b"3:             f'config_file:={bridge_params}',\n"}
[6.841949] (articubot_one) StdoutLine: {'line': b'3:         ]\n'}
[6.842124] (articubot_one) StdoutLine: {'line': b'3:     )\n'}
[6.842311] (articubot_one) StdoutLine: {'line': b"3:     '''\n"}
[6.842552] (articubot_one) StdoutLine: {'line': b'3:        \n'}
[6.842771] (articubot_one) StdoutLine: {'line': b'3:                                                                                            ^\n'}
[6.842979] (articubot_one) StdoutLine: {'line': b"3:     package='ros_gz_bridge',\n"}
[6.843187] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.843423] (articubot_one) StdoutLine: {'line': b"3:     executable='parameter_bridge',\n"}
[6.843637] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.843859] (articubot_one) StdoutLine: {'line': b'3:     arguments=[\n'}
[6.844067] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.844287] (articubot_one) StdoutLine: {'line': b"3:           '/odom@nav_msgs/msg/Odometry@gz.msgs.Odometry',\n"}
[6.844622] (articubot_one) StdoutLine: {'line': b'3:           ^\n'}
[6.844808] (articubot_one) StdoutLine: {'line': b"3:          '/scan@sensor_msgs/msg/LaserScan@gz.msgs.LaserScan',\n"}
[6.844990] (articubot_one) StdoutLine: {'line': b'3:          ^\n'}
[6.845166] (articubot_one) StdoutLine: {'line': b"3:     output='screen'\n"}
[6.845360] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.845547] (articubot_one) StdoutLine: {'line': b'3: )\n'}
[6.845723] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.845898] (articubot_one) StdoutLine: {'line': b'3:         package="ros_gz_image",\n'}
[6.846075] (articubot_one) StdoutLine: {'line': b'3:                 ^\n'}
[6.846250] (articubot_one) StdoutLine: {'line': b'3:         executable="image_bridge",\n'}
[6.846446] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.846648] (articubot_one) StdoutLine: {'line': b'3:         arguments=["/camera/image_raw"]\n'}
[6.846865] (articubot_one) StdoutLine: {'line': b'3:                    ^\n'}
[6.847297] (articubot_one) StdoutLine: {'line': b'3:     #Adding rviz plugin\n'}
[6.847549] (articubot_one) StdoutLine: {'line': b'3:     ^\n'}
[6.847754] (articubot_one) StdoutLine: {'line': b"3:     share_dir=get_package_share_directory('articubot_one')\n"}
[6.847984] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.848190] (articubot_one) StdoutLine: {'line': b'3:     \n'}
[6.848435] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.848625] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.848809] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.848971] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.849133] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.849303] (articubot_one) StdoutLine: {'line': b'3:         \n'}
[6.849478] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.849639] (articubot_one) StdoutLine: {'line': b'3: import time \n'}
[6.849798] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.849956] (articubot_one) StdoutLine: {'line': b'3: import time \n'}
[6.850115] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.850276] (articubot_one) StdoutLine: {'line': b'3: import time \n'}
[6.850502] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.850708] (articubot_one) StdoutLine: {'line': b'3: from rclpy.executors import SingleThreadedExecutor\n'}
[6.850896] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.851081] (articubot_one) StdoutLine: {'line': b'3: from sensor_msgs.msg import LaserScan\n'}
[6.851270] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.851483] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[6.851676] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.851864] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[6.852058] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.852246] (articubot_one) StdoutLine: {'line': b'3: from geometry_msgs.msg import Twist \n'}
[6.852457] (articubot_one) StdoutLine: {'line': b'3:                                    ^\n'}
[6.852664] (articubot_one) StdoutLine: {'line': b'3: from articubot_one.obstacle_avoidance import Obstacle \n'}
[6.852930] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.853122] (articubot_one) StdoutLine: {'line': b'3: from articubot_one.obstacle_avoidance import Obstacle \n'}
[6.853321] (articubot_one) StdoutLine: {'line': b'3:                                                      ^\n'}
[6.853526] (articubot_one) StdoutLine: {'line': b"3: @pytest.fixture(scope='module')\n"}
[6.853715] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.853900] (articubot_one) StdoutLine: {'line': b'3: @pytest.fixture\n'}
[6.854088] (articubot_one) StdoutLine: {'line': b'3: ^\n'}
[6.854275] (articubot_one) StdoutLine: {'line': b'3:              executor.spin_once(0.1) # Spin briefly to process events\n'}
[6.854488] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.854679] (articubot_one) StdoutLine: {'line': b'3:              executor.spin_once(0.1) # Spin briefly to process events\n'}
[6.854868] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.855056] (articubot_one) StdoutLine: {'line': b'3:              executor.spin_once(0.1) # Spin briefly to process events\n'}
[6.855245] (articubot_one) StdoutLine: {'line': b'3:                                     ^\n'}
[6.855452] (articubot_one) StdoutLine: {'line': b'3:         yield node, executor # Yield the node and executor\n'}
[6.855653] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.856118] (articubot_one) StdoutLine: {'line': b'3:              executor.shutdown()\n'}
[6.856364] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.856590] (articubot_one) StdoutLine: {'line': b'3:              executor.shutdown()\n'}
[6.856783] (articubot_one) StdoutLine: {'line': b'3:              ^\n'}
[6.856974] (articubot_one) StdoutLine: {'line': b'3:     assert node.get_name() == "Laser_Obstacle_Avoidance"\n'}
[6.857183] (articubot_one) StdoutLine: {'line': b'3:                               ^\n'}
[6.857430] (articubot_one) StdoutLine: {'line': b"3:     assert node.laser_sub.topic_name == '/scan' # Often includes the leading slash in ROS 2\n"}
[6.857630] (articubot_one) StdoutLine: {'line': b'3:                                                ^\n'}
[6.857817] (articubot_one) StdoutLine: {'line': b"3:     assert node.cmd_vel_pub.topic_name == '/cmd_vel' # Often includes the leading slash\n"}
[6.858010] (articubot_one) StdoutLine: {'line': b'3:                                                     ^\n'}
[6.858201] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold, float), f"expect the threshold to be a float"\n'}
[6.858416] (articubot_one) StdoutLine: {'line': b'3:                                              ^\n'}
[6.858613] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold, float), f"expect the threshold to be a float"\n'}
[6.858803] (articubot_one) StdoutLine: {'line': b'3:                                              ^\n'}
[6.858994] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic, str), f"expect the scan topic to be a string"\n'}
[6.859185] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[6.859394] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic, str), f"expect the scan topic to be a string"\n'}
[6.859591] (articubot_one) StdoutLine: {'line': b'3:                                             ^\n'}
[6.859778] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"\n'}
[6.859967] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[6.860159] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic, str), f"expect the cmd velocity command to be a string"\n'}
[6.860374] (articubot_one) StdoutLine: {'line': b'3:                                            ^\n'}
[6.860574] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle, float), f'expect the angle of sector to be a float'\n"}
[6.860768] (articubot_one) StdoutLine: {'line': b'3:                                                       ^\n'}
[6.860957] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic == "/scan"\n'}
[6.861231] (articubot_one) StdoutLine: {'line': b'3:                              ^\n'}
[6.861453] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "/cmd_vel"\n'}
[6.861651] (articubot_one) StdoutLine: {'line': b'3:                             ^\n'}
[6.861846] (articubot_one) StdoutLine: {'line': b'3:         pytest.fail(f"Parameter not declared: {e}")\n'}
[6.862037] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.862226] (articubot_one) StdoutLine: {'line': b'3:         pytest.fail(f"Error getting parameter: {e}")\n'}
[6.862441] (articubot_one) StdoutLine: {'line': b'3:                     ^\n'}
[6.862635] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.862824] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.863014] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.863203] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.863417] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.863612] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.863795] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.864217] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.864481] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.864685] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.864896] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.865107] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.865311] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.865519] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.865716] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.865906] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.866098] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.866301] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.866518] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.866711] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.866905] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.867098] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.867301] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.867513] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.867704] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.867894] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.868085] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.868275] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.868507] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.868705] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.868898] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.869093] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.869283] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.869610] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.869781] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.869945] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.870109] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.870275] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.870463] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.870637] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.870801] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.870965] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.871130] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.871305] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.871486] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.871650] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.871858] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.872063] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.872523] (articubot_one) StdoutLine: {'line': b"3: '''    ^\n"}
[6.872765] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.872966] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.873184] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.873403] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.873607] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.873801] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.874024] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.874214] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.874476] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.874645] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.874809] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.874976] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.875162] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.875374] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.875605] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.875795] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.875986] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.876175] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.876383] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.876581] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.876773] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.876963] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.877159] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.877395] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.877586] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.877810] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.877984] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.878151] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.878326] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.878508] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.878674] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.878843] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.879009] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.879171] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.879366] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.879543] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.879708] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.879872] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.880038] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.880202] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.880446] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.880660] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.881112] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.881349] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.881570] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.881781] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.881976] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.882167] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.882425] (articubot_one) StdoutLine: {'line': b"3: '''    ^\n"}
[6.882612] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.882775] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.882937] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.883101] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.883265] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.883474] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.883642] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.883809] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.883973] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.884133] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.884318] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.884548] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.884756] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.884943] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.885133] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.885348] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.885553] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.885746] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.885935] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.886197] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.886439] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.886627] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.886794] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.886954] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.887118] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.887283] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.887492] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.887664] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.887830] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.887998] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.888162] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.888339] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.888512] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.888677] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.888889] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.889112] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.889605] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.889852] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.890062] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.890286] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.890536] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.890747] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.890940] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.891130] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.891361] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.891558] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.891725] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.891895] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.892058] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.892232] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.892444] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.892671] (articubot_one) StdoutLine: {'line': b'3:          \n'}
[6.892864] (articubot_one) StdoutLine: {'line': b'3:                   ^\n'}
[6.893054] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.893246] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.893476] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.893670] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.893860] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.894049] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.894239] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.894550] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.894722] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.894889] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.895052] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.895216] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.895415] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.895607] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.895772] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.895938] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.896103] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.896265] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.896447] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.896614] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.896779] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.896941] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.897102] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.897263] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.897500] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.897926] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.898177] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.898413] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.898617] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.898828] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.899029] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.899224] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.899498] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.899667] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.899847] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.900014] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.900179] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.900375] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.900552] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.900714] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.900881] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.901044] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.901208] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.901425] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.901648] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.901841] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.902032] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.902219] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.902435] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.902633] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.902900] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.903098] (articubot_one) StdoutLine: {'line': b'3:       ^\n'}
[6.903299] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.903530] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.903713] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.903896] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.904083] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.904263] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.904479] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.904646] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.904812] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.904973] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.905135] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.905306] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.905486] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.905715] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.906166] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.906473] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.906774] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.907028] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.907377] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.907614] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.907801] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.907979] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.908358] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.909050] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.909310] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.909588] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.910153] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.910607] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.911421] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.911632] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.914255] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.914524] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.914760] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.914965] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.915171] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.915408] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.915622] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.915823] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.916016] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.916213] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.916441] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.916641] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.916833] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.917024] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.917214] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.917426] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.917699] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.917899] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.918095] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.918298] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.918507] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.918700] (articubot_one) StdoutLine: {'line': b'3:          \n'}
[6.918895] (articubot_one) StdoutLine: {'line': b'3:      ^\n'}
[6.919086] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.919276] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.919594] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.919794] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.919986] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.920177] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.920422] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.920623] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.920814] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.921003] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.921193] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.921425] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.921626] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.921820] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.922043] (-) TimerEvent: {}
[6.922189] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.922429] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.922878] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.923167] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.923432] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.923647] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.923841] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.924041] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.924237] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.924461] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.924664] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.924855] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.925065] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.925261] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.925485] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.925684] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.925880] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.926078] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.926270] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.926493] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.926691] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.926882] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.927072] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.927265] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.927499] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.927694] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.927964] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.928157] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.928368] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.928569] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.928760] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.928947] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.929134] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.929355] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.929564] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.929757] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.929946] (articubot_one) StdoutLine: {'line': b'3:               \n'}
[6.930137] (articubot_one) StdoutLine: {'line': b'3:          \n'}
[6.930341] (articubot_one) StdoutLine: {'line': b'3:        ^\n'}
[6.930863] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.931089] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.931323] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.931537] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.931748] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.931943] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.932135] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.932351] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.932583] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.932776] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.932941] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.933105] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.933270] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.933513] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.933709] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.933900] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.934090] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.934279] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.934507] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.934696] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.934887] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.935075] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.935260] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.935505] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.935673] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.935835] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.935996] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.936230] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.936429] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.936597] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.936763] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.936929] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.937092] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.937253] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.937442] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.937612] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.937776] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.937942] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.938107] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.938272] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.938470] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.938638] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.938804] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.938967] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.939129] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.939299] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.939479] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.939643] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.939804] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.939966] (articubot_one) StdoutLine: {'line': b'3:                          \n'}
[6.940130] (articubot_one) StdoutLine: {'line': b'3:            ^\n'}
[6.940313] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.940507] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.940671] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.940837] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.941003] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.941168] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.941362] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.941536] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.941703] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.941868] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.942040] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.942206] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.942400] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.942574] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.942739] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.942939] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.943106] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.943270] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.943451] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.943618] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.943781] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.943945] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.944107] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.944273] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.944479] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.944651] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.944817] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.944982] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.945147] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.945324] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.945505] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.945672] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.945837] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.946000] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.946162] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.946340] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.946536] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.946717] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.946937] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.947450] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.947693] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.947905] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.948134] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.948377] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.948607] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.948770] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.948936] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.949100] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.949262] (articubot_one) StdoutLine: {'line': b"3: '''       ^\n"}
[6.949444] (articubot_one) StdoutLine: {'line': b"3: '''\n"}
[6.949610] (articubot_one) StdoutLine: {'line': b'3: def test_node_creation():\n'}
[6.949772] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.949935] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.950098] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.950261] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the expected name\n'}
[6.950512] (articubot_one) StdoutLine: {'line': b'3:         assert node.get_name()=="Laser_Obstacle_Avoidance"\n'}
[6.950731] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node has the subscribed to the correct topic by name\n'}
[6.950933] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'laser_sub')\n"}
[6.951130] (articubot_one) StdoutLine: {'line': b"3:         assert node.laser_sub.topic_name == 'scan'\n"}
[6.951337] (articubot_one) StdoutLine: {'line': b'3:         # verify that the node is publishing to the correct topic by name \n'}
[6.951550] (articubot_one) StdoutLine: {'line': b"3:         assert hasattr(node,'cmd_vel_pub')\n"}
[6.951750] (articubot_one) StdoutLine: {'line': b"3:         assert node.cmd_vel_pub.topic_name == 'cmd_vel'\n"}
[6.951946] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.952138] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.952376] (articubot_one) StdoutLine: {'line': b'3: def test_parameter_node():\n'}
[6.952571] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.952801] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.952975] (articubot_one) StdoutLine: {'line': b'3:         pass\n'}
[6.953140] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.953321] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.953504] (articubot_one) StdoutLine: {'line': b'3: def test_obstacle():\n'}
[6.953675] (articubot_one) StdoutLine: {'line': b'3:     rclpy.init\n'}
[6.953843] (articubot_one) StdoutLine: {'line': b'3:     try :\n'}
[6.954006] (articubot_one) StdoutLine: {'line': b'3:         node=Obstacle()\n'}
[6.954177] (articubot_one) StdoutLine: {'line': b'3:         #get values of parameters\n'}
[6.954365] (articubot_one) StdoutLine: {'line': b"3:         threshold=node.get_parameter('threshold_distance').value\n"}
[6.954542] (articubot_one) StdoutLine: {'line': b'3:         scan_topic=node.get_parameter("laser_scan_topic").value\n'}
[6.954708] (articubot_one) StdoutLine: {'line': b'3:         cmd_topic=node.get_parameter("cmd_vel_topic").value\n'}
[6.954871] (articubot_one) StdoutLine: {'line': b'3:         front_sector_angle=node.get_parameter("frontal_detection_angle_deg").value\n'}
[6.955033] (articubot_one) StdoutLine: {'line': b'3:         # assert the values are correct as expected \n'}
[6.955200] (articubot_one) StdoutLine: {'line': b'3:         # 1- check if the parameters are of expected classes \n'}
[6.955386] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(threshold,float) ,f"expect the threshold to be a float"\n'}
[6.955561] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(scan_topic,str), f"expect the scan topic to be a string"\n'}
[6.955730] (articubot_one) StdoutLine: {'line': b'3:         assert isinstance(cmd_topic,str), f"expect the cmd velocity command to be a string"\n'}
[6.955910] (articubot_one) StdoutLine: {'line': b"3:         assert isinstance(front_sector_angle,float),f'expect the angle of sector to be a float'\n"}
[6.956076] (articubot_one) StdoutLine: {'line': b'3:         # 2- check if the values of the parameters are correct \n'}
[6.956249] (articubot_one) StdoutLine: {'line': b'3:         assert threshold == 0.5\n'}
[6.956455] (articubot_one) StdoutLine: {'line': b'3:         assert scan_topic== "scan"\n'}
[6.956623] (articubot_one) StdoutLine: {'line': b'3:         assert cmd_topic == "cmd_vel"\n'}
[6.956786] (articubot_one) StdoutLine: {'line': b'3:         assert front_sector_angle == 60.0 \n'}
[6.956947] (articubot_one) StdoutLine: {'line': b'3:     finally :\n'}
[6.957110] (articubot_one) StdoutLine: {'line': b'3:         rclpy.shutdown\n'}
[6.957271] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.957455] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.957619] (articubot_one) StdoutLine: {'line': b"3: if __name__=='__main__' :\n"}
[6.957781] (articubot_one) StdoutLine: {'line': b"3:     pytest.main(['-v'])\n"}
[6.957942] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.958104] (articubot_one) StdoutLine: {'line': b"3: '''       \n"}
[6.958266] (articubot_one) StdoutLine: {'line': b'3:    ^\n'}
[6.958464] (articubot_one) StdoutLine: {'line': b'3: 9     E111 indentation is not a multiple of 4\n'}
[6.958631] (articubot_one) StdoutLine: {'line': b'3: 1     E114 indentation is not a multiple of 4 (comment)\n'}
[6.958795] (articubot_one) StdoutLine: {'line': b'3: 4     E117 over-indented (comment)\n'}
[6.958958] (articubot_one) StdoutLine: {'line': b'3: 6     E122 continuation line missing indentation or outdented\n'}
[6.959125] (articubot_one) StdoutLine: {'line': b'3: 3     E128 continuation line under-indented for visual indent\n'}
[6.959286] (articubot_one) StdoutLine: {'line': b'3: 5     E131 continuation line unaligned for hanging indent\n'}
[6.959468] (articubot_one) StdoutLine: {'line': b"3: 3     E203 whitespace before ':'\n"}
[6.959630] (articubot_one) StdoutLine: {'line': b'3: 9     E225 missing whitespace around operator\n'}
[6.959792] (articubot_one) StdoutLine: {'line': b"3: 36    E231 missing whitespace after ','\n"}
[6.959952] (articubot_one) StdoutLine: {'line': b'3: 8     E261 at least two spaces before inline comment\n'}
[6.960114] (articubot_one) StdoutLine: {'line': b"3: 3     E262 inline comment should start with '# '\n"}
[6.960278] (articubot_one) StdoutLine: {'line': b"3: 5     E265 block comment should start with '# '\n"}
[6.960476] (articubot_one) StdoutLine: {'line': b'3: 1     E275 missing whitespace after keyword\n'}
[6.960641] (articubot_one) StdoutLine: {'line': b'3: 6     E302 expected 2 blank lines, found 1\n'}
[6.960803] (articubot_one) StdoutLine: {'line': b'3: 20    E303 too many blank lines (2)\n'}
[6.960988] (articubot_one) StdoutLine: {'line': b'3: 1     E305 expected 2 blank lines after class or function definition, found 1\n'}
[6.961152] (articubot_one) StdoutLine: {'line': b'3: 30    E501 line too long (110 > 99 characters)\n'}
[6.961323] (articubot_one) StdoutLine: {'line': b"3: 5     F401 'os' imported but unused\n"}
[6.961501] (articubot_one) StdoutLine: {'line': b'3: 5     F541 f-string is missing placeholders\n'}
[6.961663] (articubot_one) StdoutLine: {'line': b"3: 14    I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[6.961831] (articubot_one) StdoutLine: {'line': b'3: 3     I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[6.961995] (articubot_one) StdoutLine: {'line': b"3: 7     I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from geometry_msgs.msg import Twist' is identified as Third Party.\n"}
[6.962163] (articubot_one) StdoutLine: {'line': b'3: 44    Q000 Double quotes found but single quotes preferred\n'}
[6.962339] (articubot_one) StdoutLine: {'line': b'3: 2     Q001 Single quote multiline found but double quotes preferred\n'}
[6.962512] (articubot_one) StdoutLine: {'line': b'3: 24    W291 trailing whitespace\n'}
[6.962674] (articubot_one) StdoutLine: {'line': b'3: 2     W292 no newline at end of file\n'}
[6.962839] (articubot_one) StdoutLine: {'line': b'3: 14    W293 blank line contains whitespace\n'}
[6.963017] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.963180] (articubot_one) StdoutLine: {'line': b'3: ./launch/rplidar.launch.py:5:1: E302 expected 2 blank lines, found 1\n'}
[6.963392] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.963567] (articubot_one) StdoutLine: {'line': b'3: ./launch/rplidar.launch.py:14:100: E501 line too long (113 > 99 characters)\n'}
[6.963761] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.963976] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:6:1: I101 Imported names are in the wrong order. Should be Command, LaunchConfiguration\n'}
[6.964421] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.964674] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:7:1: I100 Import statements are in the wrong order. 'from launch.actions import DeclareLaunchArgument' should be before 'from launch.substitutions import LaunchConfiguration, Command'\n"}
[6.964889] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.965105] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:10:1: F401 'xacro' imported but unused\n"}
[6.965347] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.965594] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:21:39: E231 missing whitespace after ','\n"}
[6.965776] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.965937] (articubot_one) StdoutLine: {'line': b"3: ./launch/rsp.launch.py:21:53: E231 missing whitespace after ','\n"}
[6.966102] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.966269] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:23:100: E501 line too long (132 > 99 characters)\n'}
[6.966458] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.966627] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:24:1: W293 blank line contains whitespace\n'}
[6.966790] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.966957] (articubot_one) StdoutLine: {'line': b'3: ./launch/rsp.launch.py:35:5: E303 too many blank lines (2)\n'}
[6.967121] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.967299] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:2:1: I201 Missing newline between import groups. 'import xacro' is identified as Third Party and 'import os' is identified as Stdlib.\n"}
[6.967548] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.967767] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:3:1: I100 Import statements are in the wrong order. 'from ament_index_python.packages import get_package_share_directory' should be before 'import xacro'\n"}
[6.967971] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.968189] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:7:1: I101 Imported names are in the wrong order. Should be DeclareLaunchArgument, IncludeLaunchDescription\n'}
[6.968418] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.968618] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:12:1: I100 Import statements are in the wrong order. 'from launch.conditions import IfCondition, UnlessCondition' should be before 'from launch_ros.actions import Node'\n"}
[6.968816] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.969005] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:18:5: E303 too many blank lines (2)\n'}
[6.969195] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.969529] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:18:100: E501 line too long (110 > 99 characters)\n'}
[6.969711] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.969882] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:21:17: E225 missing whitespace around operator\n'}
[6.970053] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.970222] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:21:33: E261 at least two spaces before inline comment\n'}
[6.970421] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.970623] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:21:34: E262 inline comment should start with '# '\n"}
[6.970809] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.970979] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:25:62: E231 missing whitespace after ','\n"}
[6.971152] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.971352] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:25:71: E231 missing whitespace after ','\n"}
[6.971539] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.971709] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:33:10: W291 trailing whitespace\n'}
[6.971879] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.972047] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:34:1: W293 blank line contains whitespace\n'}
[6.972221] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.972409] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:47:21: E131 continuation line unaligned for hanging indent\n'}
[6.972587] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.972753] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:47:100: E501 line too long (104 > 99 characters)\n'}
[6.972944] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.973154] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:50:100: E501 line too long (126 > 99 characters)\n'}
[6.973598] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.973844] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:58:5: Q001 Single quote multiline found but double quotes preferred\n'}
[6.974043] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.974239] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:58:5: E303 too many blank lines (2)\n'}
[6.974474] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.974677] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:59:100: E501 line too long (101 > 99 characters)\n'}
[6.974872] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.975060] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:72:5: E122 continuation line missing indentation or outdented\n'}
[6.975257] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.975501] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:73:5: E122 continuation line missing indentation or outdented\n'}
[6.975680] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.975850] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:74:5: E122 continuation line missing indentation or outdented\n'}
[6.976063] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.976232] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:77:11: E131 continuation line unaligned for hanging indent\n'}
[6.976478] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.977108] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:78:10: E131 continuation line unaligned for hanging indent\n'}
[6.977355] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.977565] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:81:5: E122 continuation line missing indentation or outdented\n'}
[6.978046] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.978261] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:82:1: E122 continuation line missing indentation or outdented\n'}
[6.978488] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.978694] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:85:17: Q000 Double quotes found but single quotes preferred\n'}
[6.978893] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.980351] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:86:20: Q000 Double quotes found but single quotes preferred\n'}
[6.980602] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.980801] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:87:20: Q000 Double quotes found but single quotes preferred\n'}
[6.980999] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.981210] (articubot_one) StdoutLine: {'line': b"3: ./launch/rviz_gazebo.launch.py:89:5: E265 block comment should start with '# '\n"}
[6.981599] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.981810] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:90:14: E225 missing whitespace around operator\n'}
[6.982281] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.982546] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:96:1: W293 blank line contains whitespace\n'}
[6.982773] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.982971] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:136:1: W293 blank line contains whitespace\n'}
[6.983165] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.983387] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:140:1: W293 blank line contains whitespace\n'}
[6.983594] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.983798] (articubot_one) StdoutLine: {'line': b'3: ./launch/rviz_gazebo.launch.py:144:1: W293 blank line contains whitespace\n'}
[6.983991] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.984183] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:5:1: I100 Import statements are in the wrong order. 'import time' should be before 'import rclpy' and in a different group.\n"}
[6.984416] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.984618] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:5:1: I201 Missing newline between import groups. 'import time' is identified as Stdlib and 'import rclpy' is identified as Third Party.\n"}
[6.984816] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.985005] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:5:12: W291 trailing whitespace\n'}
[6.985196] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.985407] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:6:1: I201 Missing newline between import groups. 'from rclpy.executors import SingleThreadedExecutor' is identified as Third Party and 'import time' is identified as Stdlib.\n"}
[6.985631] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.985823] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:7:1: F401 'sensor_msgs.msg.LaserScan' imported but unused\n"}
[6.986014] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.986297] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:8:1: I100 Import statements are in the wrong order. 'from geometry_msgs.msg import Twist' should be before 'from sensor_msgs.msg import LaserScan'\n"}
[6.986514] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.986703] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:8:1: F401 'geometry_msgs.msg.Twist' imported but unused\n"}
[6.986894] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.987091] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:8:36: W291 trailing whitespace\n'}
[6.987283] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.987540] (articubot_one) StdoutLine: {'line': b"3: ./test/pytest/test_laserObstacle.py:10:1: I100 Import statements are in the wrong order. 'from articubot_one.obstacle_avoidance import Obstacle' should be before 'from geometry_msgs.msg import Twist'\n"}
[6.987711] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.987873] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:10:54: W291 trailing whitespace\n'}
[6.988039] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.988203] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:12:1: E302 expected 2 blank lines, found 1\n'}
[6.988405] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.988574] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:19:1: E302 expected 2 blank lines, found 1\n'}
[6.988739] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.988900] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:14: E111 indentation is not a multiple of 4\n'}
[6.989082] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.989244] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:14: E117 over-indented\n'}
[6.989429] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.989594] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:37:37: E261 at least two spaces before inline comment\n'}
[6.989787] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.990011] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:39:29: E261 at least two spaces before inline comment\n'}
[6.990488] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.990717] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:46:14: E111 indentation is not a multiple of 4\n'}
[6.990919] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.991135] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:46:14: E117 over-indented\n'}
[6.991360] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.991599] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:52:31: Q000 Double quotes found but single quotes preferred\n'}
[6.991765] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.991933] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:55:48: E261 at least two spaces before inline comment\n'}
[6.992102] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.992265] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:57:53: E261 at least two spaces before inline comment\n'}
[6.992456] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.992628] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:76:46: Q000 Double quotes found but single quotes preferred\n'}
[6.992793] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.992954] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:76:46: F541 f-string is missing placeholders\n'}
[6.993118] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.993286] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:77:45: Q000 Double quotes found but single quotes preferred\n'}
[6.993521] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.993724] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:77:45: F541 f-string is missing placeholders\n'}
[6.993916] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.994104] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:78:44: Q000 Double quotes found but single quotes preferred\n'}
[6.994318] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.994598] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:78:44: F541 f-string is missing placeholders\n'}
[6.994821] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.995017] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:79:55: F541 f-string is missing placeholders\n'}
[6.995211] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.995461] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:84:30: Q000 Double quotes found but single quotes preferred\n'}
[6.995635] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.995796] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:85:29: Q000 Double quotes found but single quotes preferred\n'}
[6.995963] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.996135] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:89:21: Q000 Double quotes found but single quotes preferred\n'}
[6.996305] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.996515] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:91:21: Q000 Double quotes found but single quotes preferred\n'}
[6.996675] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.996830] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:96:1: Q001 Single quote multiline found but double quotes preferred\n'}
[6.997004] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.997161] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:96:1: E303 too many blank lines (4)\n'}
[6.997327] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.997501] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:106:74: W291 trailing whitespace\n'}
[6.997666] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.997828] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:126:52: W291 trailing whitespace\n'}
[6.998015] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.998231] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:127:61: W291 trailing whitespace\n'}
[6.998708] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.998933] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:132:63: W291 trailing whitespace\n'}
[6.999148] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.999377] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:136:42: W291 trailing whitespace\n'}
[6.999596] (articubot_one) StdoutLine: {'line': b'3: \n'}
[6.999796] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:144:4: W291 trailing whitespace\n'}
[6.999996] (articubot_one) StdoutLine: {'line': b'3: \n'}
[7.000187] (articubot_one) StdoutLine: {'line': b'3: ./test/pytest/test_laserObstacle.py:144:8: W292 no newline at end of file\n'}
[7.000438] (articubot_one) StdoutLine: {'line': b'3: \n'}
[7.000621] (articubot_one) StdoutLine: {'line': b'3: \n'}
[7.000784] (articubot_one) StdoutLine: {'line': b'3: 15 files checked\n'}
[7.000946] (articubot_one) StdoutLine: {'line': b'3: 270 errors\n'}
[7.001109] (articubot_one) StdoutLine: {'line': b'3: \n'}
[7.001271] (articubot_one) StdoutLine: {'line': b"3: 'E'-type errors: 150\n"}
[7.001454] (articubot_one) StdoutLine: {'line': b"3: 'F'-type errors: 10\n"}
[7.001619] (articubot_one) StdoutLine: {'line': b"3: 'I'-type errors: 24\n"}
[7.001780] (articubot_one) StdoutLine: {'line': b"3: 'Q'-type errors: 46\n"}
[7.001942] (articubot_one) StdoutLine: {'line': b"3: 'W'-type errors: 40\n"}
[7.002104] (articubot_one) StdoutLine: {'line': b'3: \n'}
[7.002265] (articubot_one) StdoutLine: {'line': b'3: Checked files:\n'}
[7.002448] (articubot_one) StdoutLine: {'line': b'3: \n'}
[7.002618] (articubot_one) StdoutLine: {'line': b'3: * ./setup.py\n'}
[7.002881] (articubot_one) StdoutLine: {'line': b'3: * ./test/pytest/test_laserObstacle.py\n'}
[7.003107] (articubot_one) StdoutLine: {'line': b'3: * ./articubot_one/obstacle_avoidance.py\n'}
[7.003308] (articubot_one) StdoutLine: {'line': b'3: * ./articubot_one/__init__.py\n'}
[7.003517] (articubot_one) StdoutLine: {'line': b'3: * ./launch/joystick.launch.py\n'}
[7.003708] (articubot_one) StdoutLine: {'line': b'3: * ./launch/online_async_launch.py\n'}
[7.003900] (articubot_one) StdoutLine: {'line': b'3: * ./launch/ball_tracker.launch.py\n'}
[7.004092] (articubot_one) StdoutLine: {'line': b'3: * ./launch/localization_launch.py\n'}
[7.004283] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rviz_gazebo.launch.py\n'}
[7.004503] (articubot_one) StdoutLine: {'line': b'3: * ./launch/navigation_launch.py\n'}
[7.004696] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rsp.launch.py\n'}
[7.004890] (articubot_one) StdoutLine: {'line': b'3: * ./launch/launch_robot.launch.py\n'}
[7.005079] (articubot_one) StdoutLine: {'line': b'3: * ./launch/camera.launch.py\n'}
[7.005474] (articubot_one) StdoutLine: {'line': b'3: * ./launch/rplidar.launch.py\n'}
[7.005808] (articubot_one) StdoutLine: {'line': b'3: * ./launch/launch_sim.launch.py\n'}
[7.006015] (articubot_one) StdoutLine: {'line': b'3: -- run_test.py: return code 1\n'}
[7.006238] (articubot_one) StdoutLine: {'line': b"3: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/flake8.xunit.xml'\n"}
[7.006464] (articubot_one) StdoutLine: {'line': b'3/6 Test #3: flake8 ...........................***Failed    0.83 sec\n'}
[7.006683] (articubot_one) StdoutLine: {'line': b'test 4\n'}
[7.006877] (articubot_one) StdoutLine: {'line': b'    Start 4: lint_cmake\n'}
[7.007068] (articubot_one) StdoutLine: {'line': b'\n'}
[7.007262] (articubot_one) StdoutLine: {'line': b'4: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/jazzy/bin/ament_lint_cmake" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml"\n'}
[7.007497] (articubot_one) StdoutLine: {'line': b'4: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[7.007697] (articubot_one) StdoutLine: {'line': b'4: Test timeout computed to be: 60\n'}
[7.007890] (articubot_one) StdoutLine: {'line': b"4: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[7.008088] (articubot_one) StdoutLine: {'line': b'4:  - /opt/ros/jazzy/bin/ament_lint_cmake --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml\n'}
[7.022338] (-) TimerEvent: {}
[7.106069] (articubot_one) StdoutLine: {'line': b'4: CMakeLists.txt:40: Line ends in whitespace [whitespace/eol]\n'}
[7.111180] (articubot_one) StdoutLine: {'line': b'4: CMakeLists.txt:55: Line ends in whitespace [whitespace/eol]\n'}
[7.111498] (articubot_one) StdoutLine: {'line': b'4: \n'}
[7.112529] (articubot_one) StdoutLine: {'line': b'4: \n'}
[7.113119] (articubot_one) StdoutLine: {'line': b'4: 2 errors\n'}
[7.123046] (-) TimerEvent: {}
[7.133172] (articubot_one) StdoutLine: {'line': b'4: -- run_test.py: return code 1\n'}
[7.134052] (articubot_one) StdoutLine: {'line': b"4: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/lint_cmake.xunit.xml'\n"}
[7.154735] (articubot_one) StdoutLine: {'line': b'4/6 Test #4: lint_cmake .......................***Failed    0.41 sec\n'}
[7.155183] (articubot_one) StdoutLine: {'line': b'test 5\n'}
[7.155504] (articubot_one) StdoutLine: {'line': b'    Start 5: pep257\n'}
[7.155777] (articubot_one) StdoutLine: {'line': b'\n'}
[7.156002] (articubot_one) StdoutLine: {'line': b'5: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_pep257/pep257.txt" "--command" "/opt/ros/jazzy/bin/ament_pep257" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml"\n'}
[7.158237] (articubot_one) StdoutLine: {'line': b'5: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[7.158540] (articubot_one) StdoutLine: {'line': b'5: Test timeout computed to be: 60\n'}
[7.223137] (-) TimerEvent: {}
[7.265060] (articubot_one) StdoutLine: {'line': b"5: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[7.267632] (articubot_one) StdoutLine: {'line': b'5:  - /opt/ros/jazzy/bin/ament_pep257 --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml\n'}
[7.323236] (-) TimerEvent: {}
[7.423528] (-) TimerEvent: {}
[7.523825] (-) TimerEvent: {}
[7.536942] (articubot_one) StdoutLine: {'line': b'5: checking ./articubot_one/__init__.py\n'}
[7.537260] (articubot_one) StdoutLine: {'line': b'5: checking ./articubot_one/obstacle_avoidance.py\n'}
[7.537524] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/ball_tracker.launch.py\n'}
[7.537765] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/camera.launch.py\n'}
[7.537997] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/joystick.launch.py\n'}
[7.538203] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/launch_robot.launch.py\n'}
[7.538469] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/launch_sim.launch.py\n'}
[7.538699] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/localization_launch.py\n'}
[7.538917] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/navigation_launch.py\n'}
[7.539130] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/online_async_launch.py\n'}
[7.539377] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rplidar.launch.py\n'}
[7.543786] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rsp.launch.py\n'}
[7.544121] (articubot_one) StdoutLine: {'line': b'5: checking ./launch/rviz_gazebo.launch.py\n'}
[7.544397] (articubot_one) StdoutLine: {'line': b'5: checking ./setup.py\n'}
[7.544661] (articubot_one) StdoutLine: {'line': b'5: checking ./test/pytest/test_laserObstacle.py\n'}
[7.544924] (articubot_one) StdoutLine: {'line': b'5: No problems found\n'}
[7.571334] (articubot_one) StdoutLine: {'line': b'5: -- run_test.py: return code 0\n'}
[7.572481] (articubot_one) StdoutLine: {'line': b"5: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/pep257.xunit.xml'\n"}
[7.592405] (articubot_one) StdoutLine: {'line': b'5/6 Test #5: pep257 ...........................   Passed    0.44 sec\n'}
[7.592822] (articubot_one) StdoutLine: {'line': b'test 6\n'}
[7.593046] (articubot_one) StdoutLine: {'line': b'    Start 6: xmllint\n'}
[7.593267] (articubot_one) StdoutLine: {'line': b'\n'}
[7.593510] (articubot_one) StdoutLine: {'line': b'6: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml" "--package-name" "articubot_one" "--output-file" "/home/jonatan/ros2_ws/build/articubot_one/ament_xmllint/xmllint.txt" "--command" "/opt/ros/jazzy/bin/ament_xmllint" "--xunit-file" "/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml"\n'}
[7.593731] (articubot_one) StdoutLine: {'line': b'6: Working Directory: /home/jonatan/ros2_ws/src/articubot_one\n'}
[7.593940] (articubot_one) StdoutLine: {'line': b'6: Test timeout computed to be: 60\n'}
[7.623948] (-) TimerEvent: {}
[7.695875] (articubot_one) StdoutLine: {'line': b"6: -- run_test.py: invoking following command in '/home/jonatan/ros2_ws/src/articubot_one':\n"}
[7.696211] (articubot_one) StdoutLine: {'line': b'6:  - /opt/ros/jazzy/bin/ament_xmllint --xunit-file /home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml\n'}
[7.724064] (-) TimerEvent: {}
[7.824358] (-) TimerEvent: {}
[7.924702] (-) TimerEvent: {}
[8.025277] (-) TimerEvent: {}
[8.125891] (-) TimerEvent: {}
[8.226433] (-) TimerEvent: {}
[8.326936] (-) TimerEvent: {}
[8.427350] (-) TimerEvent: {}
[8.527684] (-) TimerEvent: {}
[8.628050] (-) TimerEvent: {}
[8.728430] (-) TimerEvent: {}
[8.828792] (-) TimerEvent: {}
[8.929099] (-) TimerEvent: {}
[9.029403] (-) TimerEvent: {}
[9.129764] (-) TimerEvent: {}
[9.230154] (-) TimerEvent: {}
[9.330571] (-) TimerEvent: {}
[9.431001] (-) TimerEvent: {}
[9.531411] (-) TimerEvent: {}
[9.631782] (-) TimerEvent: {}
[9.732117] (-) TimerEvent: {}
[9.832407] (-) TimerEvent: {}
[9.932715] (-) TimerEvent: {}
[10.033017] (-) TimerEvent: {}
[10.133381] (-) TimerEvent: {}
[10.233811] (-) TimerEvent: {}
[10.334148] (-) TimerEvent: {}
[10.434561] (-) TimerEvent: {}
[10.534882] (-) TimerEvent: {}
[10.635223] (-) TimerEvent: {}
[10.735746] (-) TimerEvent: {}
[10.836112] (-) TimerEvent: {}
[10.936388] (-) TimerEvent: {}
[11.010565] (articubot_one) StdoutLine: {'line': b"6: File 'package.xml' is valid\n"}
[11.010881] (articubot_one) StdoutLine: {'line': b'6: \n'}
[11.011079] (articubot_one) StdoutLine: {'line': b'6: No problems found\n'}
[11.035726] (articubot_one) StdoutLine: {'line': b'6: -- run_test.py: return code 0\n'}
[11.036388] (articubot_one) StdoutLine: {'line': b"6: -- run_test.py: verify result file '/home/jonatan/ros2_ws/build/articubot_one/test_results/articubot_one/xmllint.xunit.xml'\n"}
[11.036745] (-) TimerEvent: {}
[11.060778] (articubot_one) StdoutLine: {'line': b'6/6 Test #6: xmllint ..........................   Passed    3.46 sec\n'}
[11.061149] (articubot_one) StdoutLine: {'line': b'\n'}
[11.061400] (articubot_one) StdoutLine: {'line': b'50% tests passed\x1b[0;0m, \x1b[0;31m3 tests failed\x1b[0;0m out of 6\n'}
[11.061621] (articubot_one) StdoutLine: {'line': b'\n'}
[11.062033] (articubot_one) StdoutLine: {'line': b'Label Time Summary:\n'}
[11.062243] (articubot_one) StdoutLine: {'line': b'copyright     =   0.46 sec*proc (1 test)\n'}
[11.062465] (articubot_one) StdoutLine: {'line': b'flake8        =   0.83 sec*proc (1 test)\n'}
[11.062661] (articubot_one) StdoutLine: {'line': b'lint_cmake    =   0.41 sec*proc (1 test)\n'}
[11.062852] (articubot_one) StdoutLine: {'line': b'linter        =   5.60 sec*proc (5 tests)\n'}
[11.063041] (articubot_one) StdoutLine: {'line': b'pep257        =   0.44 sec*proc (1 test)\n'}
[11.063237] (articubot_one) StdoutLine: {'line': b'pytest        =   5.40 sec*proc (1 test)\n'}
[11.066029] (articubot_one) StdoutLine: {'line': b'xmllint       =   3.46 sec*proc (1 test)\n'}
[11.066722] (articubot_one) StdoutLine: {'line': b'\n'}
[11.066967] (articubot_one) StdoutLine: {'line': b'Total Test time (real) =  11.01 sec\n'}
[11.067189] (articubot_one) StdoutLine: {'line': b'\n'}
[11.067478] (articubot_one) StdoutLine: {'line': b'The following tests FAILED:\n'}
[11.067699] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  2 - copyright (Failed)\x1b[0;0m\n'}
[11.068259] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  3 - flake8 (Failed)\x1b[0;0m\n'}
[11.068715] (articubot_one) StdoutLine: {'line': b'\t\x1b[0;31m  4 - lint_cmake (Failed)\x1b[0;0m\n'}
[11.069138] (articubot_one) StderrLine: {'line': b'Errors while running CTest\n'}
[11.070272] (articubot_one) StderrLine: {'line': b'Output from these tests are in: /home/jonatan/ros2_ws/build/articubot_one/Testing/Temporary/LastTest.log\n'}
[11.070554] (articubot_one) StderrLine: {'line': b'Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.\n'}
[11.071387] (articubot_one) CommandEnded: {'returncode': 8}
[11.072460] (articubot_one) TestFailure: {'identifier': 'articubot_one'}
[11.072515] (articubot_one) JobEnded: {'identifier': 'articubot_one', 'rc': 0}
[11.073333] (-) EventReactorShutdown: {}
